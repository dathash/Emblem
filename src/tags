!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!ObjectiveC	category	/category attached to the class/
!_TAG_FIELD_DESCRIPTION!ObjectiveC	protocols	/protocols that the class (or category) confirms to/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!ObjectiveC	C,category	/categories/
!_TAG_KIND_DESCRIPTION!ObjectiveC	E,field	/Object field/
!_TAG_KIND_DESCRIPTION!ObjectiveC	I,implementation	/class implementation/
!_TAG_KIND_DESCRIPTION!ObjectiveC	M,macro	/A preprocessor macro/
!_TAG_KIND_DESCRIPTION!ObjectiveC	P,protocol	/Protocol/
!_TAG_KIND_DESCRIPTION!ObjectiveC	c,class	/Class' method/
!_TAG_KIND_DESCRIPTION!ObjectiveC	e,enum	/An enumeration/
!_TAG_KIND_DESCRIPTION!ObjectiveC	f,function	/A function/
!_TAG_KIND_DESCRIPTION!ObjectiveC	i,interface	/class interface/
!_TAG_KIND_DESCRIPTION!ObjectiveC	m,method	/Object's method/
!_TAG_KIND_DESCRIPTION!ObjectiveC	p,property	/A property/
!_TAG_KIND_DESCRIPTION!ObjectiveC	s,struct	/A type structure/
!_TAG_KIND_DESCRIPTION!ObjectiveC	t,typedef	/A type alias/
!_TAG_KIND_DESCRIPTION!ObjectiveC	v,var	/Global variable/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!ObjectiveC	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/alexhartford/Home/code/emblem/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/1901123c/
C89ATOMIC_32BIT	../ext/miniaudio.h	/^#define C89ATOMIC_32BIT$/;"	M
C89ATOMIC_64BIT	../ext/miniaudio.h	/^#define C89ATOMIC_64BIT$/;"	M
C89ATOMIC_ARM	../ext/miniaudio.h	/^#define C89ATOMIC_ARM$/;"	M
C89ATOMIC_HAS_16	../ext/miniaudio.h	/^#define C89ATOMIC_HAS_16$/;"	M
C89ATOMIC_HAS_32	../ext/miniaudio.h	/^#define C89ATOMIC_HAS_32$/;"	M
C89ATOMIC_HAS_64	../ext/miniaudio.h	/^#define C89ATOMIC_HAS_64$/;"	M
C89ATOMIC_HAS_8	../ext/miniaudio.h	/^#define C89ATOMIC_HAS_8$/;"	M
C89ATOMIC_HAS_NATIVE_COMPARE_EXCHANGE	../ext/miniaudio.h	/^    #define C89ATOMIC_HAS_NATIVE_COMPARE_EXCHANGE$/;"	M
C89ATOMIC_HAS_NATIVE_IS_LOCK_FREE	../ext/miniaudio.h	/^    #define C89ATOMIC_HAS_NATIVE_IS_LOCK_FREE$/;"	M
C89ATOMIC_INLINE	../ext/miniaudio.h	/^        #define C89ATOMIC_INLINE __inline__ __attribute__((always_inline))$/;"	M
C89ATOMIC_INLINE	../ext/miniaudio.h	/^        #define C89ATOMIC_INLINE inline __attribute__((always_inline))$/;"	M
C89ATOMIC_INLINE	../ext/miniaudio.h	/^    #define C89ATOMIC_INLINE __forceinline$/;"	M
C89ATOMIC_INLINE	../ext/miniaudio.h	/^    #define C89ATOMIC_INLINE __inline$/;"	M
C89ATOMIC_INLINE	../ext/miniaudio.h	/^    #define C89ATOMIC_INLINE$/;"	M
C89ATOMIC_MSVC_USE_INLINED_ASSEMBLY	../ext/miniaudio.h	/^        #define C89ATOMIC_MSVC_USE_INLINED_ASSEMBLY$/;"	M
C89ATOMIC_X64	../ext/miniaudio.h	/^#define C89ATOMIC_X64$/;"	M
C89ATOMIC_X86	../ext/miniaudio.h	/^#define C89ATOMIC_X86$/;"	M
DWORD_PTR	../ext/miniaudio.h	/^typedef size_t DWORD_PTR;$/;"	t
Format	../ext/miniaudio.h	/^    WAVEFORMATEX Format;$/;"	E
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * Activate)         (ma_IMMDevice* pThis, const IID* const ii/;"	E	struct:ma_IMMDeviceCollection
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * EnumAudioEndpoints)                    (ma_IMMDeviceEnumera/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * GetActivateResult)(ma_IActivateAudioInterfaceAsyncOperation/;"	E
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * GetCount)(ma_IMMDeviceCollection* pThis, UINT* pDevices);$/;"	E
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * GetDefaultAudioEndpoint)               (ma_IMMDeviceEnumera/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * GetDevice)                             (ma_IMMDeviceEnumera/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * GetId)            (ma_IMMDevice* pThis, LPWSTR *pID);$/;"	E	struct:ma_IMMDeviceCollection
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * GetState)         (ma_IMMDevice* pThis, DWORD *pState);$/;"	E	struct:ma_IMMDeviceCollection
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * Item)    (ma_IMMDeviceCollection* pThis, UINT nDevice, ma_I/;"	E
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * OnDefaultDeviceChanged)(ma_IMMNotificationClient* pThis, ma/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * OnDeviceAdded)         (ma_IMMNotificationClient* pThis, LP/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * OnDeviceRemoved)       (ma_IMMNotificationClient* pThis, LP/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * OnDeviceStateChanged)  (ma_IMMNotificationClient* pThis, LP/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * OnPropertyValueChanged)(ma_IMMNotificationClient* pThis, LP/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * OpenPropertyStore)(ma_IMMDevice* pThis, DWORD stgmAccess, m/;"	E	struct:ma_IMMDeviceCollection
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IActivateAudioInterfaceAsyncOperation* p/;"	E
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IMMDevice* pThis, const IID* const riid,/;"	E	struct:ma_IMMDeviceCollection
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IMMDeviceCollection* pThis, const IID* c/;"	E
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IMMDeviceEnumerator* pThis, const IID* c/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IMMNotificationClient* pThis, const IID*/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * RegisterEndpointNotificationCallback)  (ma_IMMDeviceEnumera/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^        HRESULT (STDMETHODCALLTYPE * UnregisterEndpointNotificationCallback)(ma_IMMDeviceEnumera/;"	E	struct:ma_IUnknown
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * ActivateCompleted)(ma_completion_handler_uwp* pThis, ma_IActiva/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Commit)  (ma_IPropertyStore* pThis);$/;"	E	struct:ma_IActivateAudioInterfaceAsyncOperation
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Compact)             (ma_IDirectSound* pThis);$/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * CreateCaptureBuffer)(ma_IDirectSoundCapture* pThis, const MA_DS/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * CreateSoundBuffer)   (ma_IDirectSound* pThis, const MA_DSBUFFER/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * DuplicateSoundBuffer)(ma_IDirectSound* pThis, ma_IDirectSoundBu/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetAt)   (ma_IPropertyStore* pThis, DWORD propIndex, PROPERTYKE/;"	E	struct:ma_IActivateAudioInterfaceAsyncOperation
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetBuffer)        (ma_IAudioCaptureClient* pThis, BYTE** ppData/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetBuffer)    (ma_IAudioRenderClient* pThis, ma_uint32 numFrame/;"	E	struct:ma_IAudioClient3
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetBufferSize)    (ma_IAudioClient* pThis, ma_uint32* pNumBuffe/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetBufferSize)    (ma_IAudioClient2* pThis, ma_uint32* pNumBuff/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetBufferSize)    (ma_IAudioClient3* pThis, ma_uint32* pNumBuff/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetBufferSizeLimits)(ma_IAudioClient2* pThis, const WAVEFORMATE/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetBufferSizeLimits)(ma_IAudioClient3* pThis, const WAVEFORMATE/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCaps)             (ma_IDirectSound* pThis, MA_DSCAPS* pDSCap/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCaps)            (ma_IDirectSoundCapture* pThis, MA_DSCCAPS*/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCaps)           (ma_IDirectSoundBuffer* pThis, MA_DSBCAPS* p/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCaps)           (ma_IDirectSoundCaptureBuffer* pThis, MA_DSC/;"	E	struct:ma_IDirectSoundCapture
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCount)(ma_IPropertyStore* pThis, DWORD* pPropCount);$/;"	E	struct:ma_IActivateAudioInterfaceAsyncOperation
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCurrentPadding)(ma_IAudioClient* pThis, ma_uint32* pNumPaddi/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCurrentPadding)(ma_IAudioClient2* pThis, ma_uint32* pNumPadd/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCurrentPadding)(ma_IAudioClient3* pThis, ma_uint32* pNumPadd/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCurrentPosition)(ma_IDirectSoundBuffer* pThis, DWORD* pCurre/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCurrentPosition)(ma_IDirectSoundCaptureBuffer* pThis, DWORD*/;"	E	struct:ma_IDirectSoundCapture
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetCurrentSharedModeEnginePeriod)(ma_IAudioClient3* pThis, WAVE/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetDevicePeriod)  (ma_IAudioClient* pThis, MA_REFERENCE_TIME* p/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetDevicePeriod)  (ma_IAudioClient2* pThis, MA_REFERENCE_TIME* /;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetDevicePeriod)  (ma_IAudioClient3* pThis, MA_REFERENCE_TIME* /;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetFormat)         (ma_IDirectSoundBuffer* pThis, WAVEFORMATEX*/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetFormat)         (ma_IDirectSoundCaptureBuffer* pThis, WAVEFO/;"	E	struct:ma_IDirectSoundCapture
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetFrequency)      (ma_IDirectSoundBuffer* pThis, DWORD* pFrequ/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetMixFormat)     (ma_IAudioClient* pThis, WAVEFORMATEX** ppDev/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetMixFormat)     (ma_IAudioClient2* pThis, WAVEFORMATEX** ppDe/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetMixFormat)     (ma_IAudioClient3* pThis, WAVEFORMATEX** ppDe/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetNextPacketSize)(ma_IAudioCaptureClient* pThis, ma_uint32* pN/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetPan)            (ma_IDirectSoundBuffer* pThis, LONG* pPan);$/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetService)       (ma_IAudioClient* pThis, const IID* const rii/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetService)       (ma_IAudioClient2* pThis, const IID* const ri/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetService)       (ma_IAudioClient3* pThis, const IID* const ri/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetSharedModeEnginePeriod)       (ma_IAudioClient3* pThis, cons/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetSpeakerConfig)    (ma_IDirectSound* pThis, DWORD* pSpeakerCo/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetStatus)         (ma_IDirectSoundBuffer* pThis, DWORD* pStatu/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetStatus)         (ma_IDirectSoundCaptureBuffer* pThis, DWORD*/;"	E	struct:ma_IDirectSoundCapture
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetStreamLatency) (ma_IAudioClient* pThis, MA_REFERENCE_TIME* p/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetStreamLatency) (ma_IAudioClient2* pThis, MA_REFERENCE_TIME* /;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetStreamLatency) (ma_IAudioClient3* pThis, MA_REFERENCE_TIME* /;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetValue)(ma_IPropertyStore* pThis, const PROPERTYKEY* const pK/;"	E	struct:ma_IActivateAudioInterfaceAsyncOperation
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * GetVolume)         (ma_IDirectSoundBuffer* pThis, LONG* pVolume/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Initialize)          (ma_IDirectSound* pThis, const GUID* pGuid/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Initialize)         (ma_IDirectSoundCapture* pThis, const GUID*/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Initialize)        (ma_IDirectSoundBuffer* pThis, ma_IDirectSou/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Initialize)        (ma_IDirectSoundCaptureBuffer* pThis, ma_IDi/;"	E	struct:ma_IDirectSoundCapture
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Initialize)       (ma_IAudioClient* pThis, MA_AUDCLNT_SHAREMODE/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Initialize)       (ma_IAudioClient2* pThis, MA_AUDCLNT_SHAREMOD/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Initialize)       (ma_IAudioClient3* pThis, MA_AUDCLNT_SHAREMOD/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * InitializeSharedAudioStream)     (ma_IAudioClient3* pThis, DWOR/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * IsFormatSupported)(ma_IAudioClient* pThis, MA_AUDCLNT_SHAREMODE/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * IsFormatSupported)(ma_IAudioClient2* pThis, MA_AUDCLNT_SHAREMOD/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * IsFormatSupported)(ma_IAudioClient3* pThis, MA_AUDCLNT_SHAREMOD/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * IsOffloadCapable)   (ma_IAudioClient2* pThis, MA_AUDIO_STREAM_C/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * IsOffloadCapable)   (ma_IAudioClient3* pThis, MA_AUDIO_STREAM_C/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Lock)              (ma_IDirectSoundBuffer* pThis, DWORD dwOffse/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Lock)              (ma_IDirectSoundCaptureBuffer* pThis, DWORD /;"	E	struct:ma_IDirectSoundCapture
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Play)              (ma_IDirectSoundBuffer* pThis, DWORD dwReser/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IAudioCaptureClient* pThis, const IID* const/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IAudioClient* pThis, const IID* const riid, /;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IAudioClient2* pThis, const IID* const riid,/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IAudioClient3* pThis, const IID* const riid,/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IAudioRenderClient* pThis, const IID* const /;"	E	struct:ma_IAudioClient3
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IDirectSound* pThis, const IID* const riid, /;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IDirectSoundBuffer* pThis, const IID* const /;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IDirectSoundCapture* pThis, const IID* const/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IDirectSoundCaptureBuffer* pThis, const IID*/;"	E	struct:ma_IDirectSoundCapture
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IDirectSoundNotify* pThis, const IID* const /;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IPropertyStore* pThis, const IID* const riid/;"	E	struct:ma_IActivateAudioInterfaceAsyncOperation
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_IUnknown* pThis, const IID* const riid, void/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * QueryInterface)(ma_completion_handler_uwp* pThis, const IID* co/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * ReleaseBuffer)    (ma_IAudioCaptureClient* pThis, ma_uint32 num/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * ReleaseBuffer)(ma_IAudioRenderClient* pThis, ma_uint32 numFrame/;"	E	struct:ma_IAudioClient3
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Reset)            (ma_IAudioClient* pThis);$/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Reset)            (ma_IAudioClient2* pThis);$/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Reset)            (ma_IAudioClient3* pThis);$/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Restore)           (ma_IDirectSoundBuffer* pThis);$/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetClientProperties)(ma_IAudioClient2* pThis, const ma_AudioCli/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetClientProperties)(ma_IAudioClient3* pThis, const ma_AudioCli/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetCooperativeLevel) (ma_IDirectSound* pThis, HWND hwnd, DWORD /;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetCurrentPosition)(ma_IDirectSoundBuffer* pThis, DWORD dwNewPo/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetEventHandle)   (ma_IAudioClient* pThis, HANDLE eventHandle);$/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetEventHandle)   (ma_IAudioClient2* pThis, HANDLE eventHandle)/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetEventHandle)   (ma_IAudioClient3* pThis, HANDLE eventHandle)/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetFormat)         (ma_IDirectSoundBuffer* pThis, const WAVEFOR/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetFrequency)      (ma_IDirectSoundBuffer* pThis, DWORD dwFrequ/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetNotificationPositions)(ma_IDirectSoundNotify* pThis, DWORD d/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetPan)            (ma_IDirectSoundBuffer* pThis, LONG pan);$/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetSpeakerConfig)    (ma_IDirectSound* pThis, DWORD dwSpeakerCo/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetValue)(ma_IPropertyStore* pThis, const PROPERTYKEY* const pK/;"	E	struct:ma_IActivateAudioInterfaceAsyncOperation
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * SetVolume)         (ma_IDirectSoundBuffer* pThis, LONG volume);$/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Start)             (ma_IDirectSoundCaptureBuffer* pThis, DWORD /;"	E	struct:ma_IDirectSoundCapture
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Start)            (ma_IAudioClient* pThis);$/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Start)            (ma_IAudioClient2* pThis);$/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Start)            (ma_IAudioClient3* pThis);$/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Stop)              (ma_IDirectSoundBuffer* pThis);$/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Stop)              (ma_IDirectSoundCaptureBuffer* pThis);$/;"	E	struct:ma_IDirectSoundCapture
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Stop)             (ma_IAudioClient* pThis);$/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Stop)             (ma_IAudioClient2* pThis);$/;"	E	struct:ma_IAudioClient
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Stop)             (ma_IAudioClient3* pThis);$/;"	E
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Unlock)            (ma_IDirectSoundBuffer* pThis, void* pAudioP/;"	E	struct:ma_IDirectSound
HRESULT	../ext/miniaudio.h	/^    HRESULT (STDMETHODCALLTYPE * Unlock)            (ma_IDirectSoundCaptureBuffer* pThis, void* /;"	E	struct:ma_IDirectSoundCapture
MA_32BIT	../ext/miniaudio.h	/^#define MA_32BIT$/;"	M
MA_64BIT	../ext/miniaudio.h	/^#define MA_64BIT$/;"	M
MA_ACCESS_DENIED	../ext/miniaudio.h	/^    MA_ACCESS_DENIED                  = -6,$/;"	e
MA_ADDRESS_FAMILY_NOT_SUPPORTED	../ext/miniaudio.h	/^    MA_ADDRESS_FAMILY_NOT_SUPPORTED   = -43,$/;"	e
MA_ALREADY_CONNECTED	../ext/miniaudio.h	/^    MA_ALREADY_CONNECTED              = -46,$/;"	e
MA_ALREADY_EXISTS	../ext/miniaudio.h	/^    MA_ALREADY_EXISTS                 = -8,$/;"	e
MA_ALREADY_IN_USE	../ext/miniaudio.h	/^    MA_ALREADY_IN_USE                 = -23,$/;"	e
MA_ANDROID	../ext/miniaudio.h	/^        #define MA_ANDROID$/;"	M
MA_ANDROID_LOG_TAG	../ext/miniaudio.h	/^#define MA_ANDROID_LOG_TAG  "miniaudio"$/;"	M
MA_API	../ext/miniaudio.h	/^            #define MA_API  MA_DLL_EXPORT$/;"	M
MA_API	../ext/miniaudio.h	/^            #define MA_API  MA_DLL_IMPORT$/;"	M
MA_API	../ext/miniaudio.h	/^        #define MA_API extern$/;"	M
MA_API_NOT_FOUND	../ext/miniaudio.h	/^    MA_API_NOT_FOUND                  = -105,$/;"	e
MA_APPLE	../ext/miniaudio.h	/^        #define MA_APPLE$/;"	M
MA_ARM	../ext/miniaudio.h	/^#define MA_ARM$/;"	M
MA_ASSERT	../ext/miniaudio.h	/^#define MA_ASSERT(condition) assert(condition)$/;"	M
MA_ASSUME	../ext/miniaudio.h	/^        #define MA_ASSUME(x) (void)(x)$/;"	M
MA_ASSUME	../ext/miniaudio.h	/^        #define MA_ASSUME(x) __assume(x)$/;"	M
MA_ASSUME	../ext/miniaudio.h	/^        #define MA_ASSUME(x) __builtin_assume(x)$/;"	M
MA_ASSUME	../ext/miniaudio.h	/^        #define MA_ASSUME(x) do { if (!(x)) __builtin_unreachable(); } while (0)$/;"	M
MA_ATOMIC	../ext/miniaudio.h	/^        #define MA_ATOMIC(alignment, type)        __declspec(align(alignment)) type$/;"	M
MA_ATOMIC	../ext/miniaudio.h	/^        #define MA_ATOMIC(alignment, type)        type __attribute__((aligned(alignment)))$/;"	M
MA_ATOMIC	../ext/miniaudio.h	/^        #define MA_ATOMIC(alignment, type)        type$/;"	M
MA_ATOMIC	../ext/miniaudio.h	/^    #define MA_ATOMIC(alignment, type)            alignas(alig[Inment) type$/;"	M
MA_ATTRIBUTE_FORMAT	../ext/miniaudio.h	/^        #define MA_ATTRIBUTE_FORMAT(fmt, va) __attribute__((format(printf, fmt, va)))$/;"	M
MA_ATTRIBUTE_FORMAT	../ext/miniaudio.h	/^#define MA_ATTRIBUTE_FORMAT(fmt,va)$/;"	M
MA_ATTRIBUTE_FORMAT	../ext/miniaudio.h	/^MA_API ma_result ma_log_postf(ma_log* pLog, ma_uint32 level, const char* pFormat, ...) MA_ATTRIB/;"	f
MA_AT_END	../ext/miniaudio.h	/^    MA_AT_END                         = -17,$/;"	e
MA_AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY	../ext/miniaudio.h	/^#define MA_AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY          1$/;"	M
MA_AUDCLNT_BUFFERFLAGS_SILENT	../ext/miniaudio.h	/^#define MA_AUDCLNT_BUFFERFLAGS_SILENT                      2$/;"	M
MA_AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR	../ext/miniaudio.h	/^#define MA_AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR             4$/;"	M
MA_AUDCLNT_E_ALREADY_INITIALIZED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_ALREADY_INITIALIZED          ((HRESULT)0x88890002)$/;"	M
MA_AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL ((HRESULT)0x88890013)$/;"	M
MA_AUDCLNT_E_BUFFER_ERROR	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_BUFFER_ERROR                 ((HRESULT)0x88890018)$/;"	M
MA_AUDCLNT_E_BUFFER_OPERATION_PENDING	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_BUFFER_OPERATION_PENDING     ((HRESULT)0x8889000B)$/;"	M
MA_AUDCLNT_E_BUFFER_SIZE_ERROR	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_BUFFER_SIZE_ERROR            ((HRESULT)0x88890016)$/;"	M
MA_AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED      ((HRESULT)0x88890019)$/;"	M
MA_AUDCLNT_E_BUFFER_TOO_LARGE	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_BUFFER_TOO_LARGE             ((HRESULT)0x88890006)$/;"	M
MA_AUDCLNT_E_CPUUSAGE_EXCEEDED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_CPUUSAGE_EXCEEDED            ((HRESULT)0x88890017)$/;"	M
MA_AUDCLNT_E_DEVICE_INVALIDATED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_DEVICE_INVALIDATED           ((HRESULT)0x88890004)$/;"	M
MA_AUDCLNT_E_DEVICE_IN_USE	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_DEVICE_IN_USE                ((HRESULT)0x8889000A)$/;"	M
MA_AUDCLNT_E_ENDPOINT_CREATE_FAILED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_ENDPOINT_CREATE_FAILED       ((HRESULT)0x8889000F)$/;"	M
MA_AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_ENDPOINT_OFFLOAD_NOT_CAPABLE ((HRESULT)0x88890022)$/;"	M
MA_AUDCLNT_E_ENGINE_FORMAT_LOCKED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_ENGINE_FORMAT_LOCKED         ((HRESULT)0x88890029)$/;"	M
MA_AUDCLNT_E_ENGINE_PERIODICITY_LOCKED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_ENGINE_PERIODICITY_LOCKED    ((HRESULT)0x88890028)$/;"	M
MA_AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_EVENTHANDLE_NOT_EXPECTED     ((HRESULT)0x88890011)$/;"	M
MA_AUDCLNT_E_EVENTHANDLE_NOT_SET	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_EVENTHANDLE_NOT_SET          ((HRESULT)0x88890014)$/;"	M
MA_AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED   ((HRESULT)0x8889000E)$/;"	M
MA_AUDCLNT_E_EXCLUSIVE_MODE_ONLY	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_EXCLUSIVE_MODE_ONLY          ((HRESULT)0x88890012)$/;"	M
MA_AUDCLNT_E_HEADTRACKING_ENABLED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_HEADTRACKING_ENABLED         ((HRESULT)0x88890030)$/;"	M
MA_AUDCLNT_E_HEADTRACKING_UNSUPPORTED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_HEADTRACKING_UNSUPPORTED     ((HRESULT)0x88890040)$/;"	M
MA_AUDCLNT_E_INCORRECT_BUFFER_SIZE	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_INCORRECT_BUFFER_SIZE        ((HRESULT)0x88890015)$/;"	M
MA_AUDCLNT_E_INVALID_DEVICE_PERIOD	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_INVALID_DEVICE_PERIOD        ((HRESULT)0x88890020)$/;"	M
MA_AUDCLNT_E_INVALID_SIZE	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_INVALID_SIZE                 ((HRESULT)0x88890009)$/;"	M
MA_AUDCLNT_E_INVALID_STREAM_FLAG	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_INVALID_STREAM_FLAG          ((HRESULT)0x88890021)$/;"	M
MA_AUDCLNT_E_NONOFFLOAD_MODE_ONLY	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_NONOFFLOAD_MODE_ONLY         ((HRESULT)0x88890025)$/;"	M
MA_AUDCLNT_E_NOT_INITIALIZED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_NOT_INITIALIZED              ((HRESULT)0x88890001)$/;"	M
MA_AUDCLNT_E_NOT_STOPPED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_NOT_STOPPED                  ((HRESULT)0x88890005)$/;"	M
MA_AUDCLNT_E_NO_SINGLE_PROCESS	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_NO_SINGLE_PROCESS            ((HRESULT)0x8889000D)$/;"	M
MA_AUDCLNT_E_OFFLOAD_MODE_ONLY	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_OFFLOAD_MODE_ONLY            ((HRESULT)0x88890024)$/;"	M
MA_AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_OUT_OF_OFFLOAD_RESOURCES     ((HRESULT)0x88890023)$/;"	M
MA_AUDCLNT_E_OUT_OF_ORDER	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_OUT_OF_ORDER                 ((HRESULT)0x88890007)$/;"	M
MA_AUDCLNT_E_RAW_MODE_UNSUPPORTED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_RAW_MODE_UNSUPPORTED         ((HRESULT)0x88890027)$/;"	M
MA_AUDCLNT_E_RESOURCES_INVALIDATED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_RESOURCES_INVALIDATED        ((HRESULT)0x88890026)$/;"	M
MA_AUDCLNT_E_SERVICE_NOT_RUNNING	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_SERVICE_NOT_RUNNING          ((HRESULT)0x88890010)$/;"	M
MA_AUDCLNT_E_THREAD_NOT_REGISTERED	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_THREAD_NOT_REGISTERED        ((HRESULT)0x8889000C)$/;"	M
MA_AUDCLNT_E_UNSUPPORTED_FORMAT	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_UNSUPPORTED_FORMAT           ((HRESULT)0x88890008)$/;"	M
MA_AUDCLNT_E_WRONG_ENDPOINT_TYPE	../ext/miniaudio.h	/^#define MA_AUDCLNT_E_WRONG_ENDPOINT_TYPE          ((HRESULT)0x88890003)$/;"	M
MA_AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE	../ext/miniaudio.h	/^#define MA_AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE               0x20000000$/;"	M
MA_AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED	../ext/miniaudio.h	/^#define MA_AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED    0x40000000$/;"	M
MA_AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED	../ext/miniaudio.h	/^#define MA_AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED          0x10000000$/;"	M
MA_AUDCLNT_SHAREMODE	../ext/miniaudio.h	/^} MA_AUDCLNT_SHAREMODE;$/;"	t
MA_AUDCLNT_SHAREMODE_EXCLUSIVE	../ext/miniaudio.h	/^    MA_AUDCLNT_SHAREMODE_EXCLUSIVE$/;"	e
MA_AUDCLNT_SHAREMODE_SHARED	../ext/miniaudio.h	/^    MA_AUDCLNT_SHAREMODE_SHARED,$/;"	e
MA_AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM	../ext/miniaudio.h	/^#define MA_AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM              0x80000000$/;"	M
MA_AUDCLNT_STREAMFLAGS_CROSSPROCESS	../ext/miniaudio.h	/^#define MA_AUDCLNT_STREAMFLAGS_CROSSPROCESS                0x00010000$/;"	M
MA_AUDCLNT_STREAMFLAGS_EVENTCALLBACK	../ext/miniaudio.h	/^#define MA_AUDCLNT_STREAMFLAGS_EVENTCALLBACK               0x00040000$/;"	M
MA_AUDCLNT_STREAMFLAGS_LOOPBACK	../ext/miniaudio.h	/^#define MA_AUDCLNT_STREAMFLAGS_LOOPBACK                    0x00020000$/;"	M
MA_AUDCLNT_STREAMFLAGS_NOPERSIST	../ext/miniaudio.h	/^#define MA_AUDCLNT_STREAMFLAGS_NOPERSIST                   0x00080000$/;"	M
MA_AUDCLNT_STREAMFLAGS_RATEADJUST	../ext/miniaudio.h	/^#define MA_AUDCLNT_STREAMFLAGS_RATEADJUST                  0x00100000$/;"	M
MA_AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY	../ext/miniaudio.h	/^#define MA_AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY         0x08000000$/;"	M
MA_AUDCLNT_S_BUFFER_EMPTY	../ext/miniaudio.h	/^#define MA_AUDCLNT_S_BUFFER_EMPTY                 ((HRESULT)0x08890001)$/;"	M
MA_AUDCLNT_S_POSITION_STALLED	../ext/miniaudio.h	/^#define MA_AUDCLNT_S_POSITION_STALLED             ((HRESULT)0x08890003)$/;"	M
MA_AUDCLNT_S_THREAD_ALREADY_REGISTERED	../ext/miniaudio.h	/^#define MA_AUDCLNT_S_THREAD_ALREADY_REGISTERED    ((HRESULT)0x08890002)$/;"	M
MA_AUDIO_STREAM_CATEGORY	../ext/miniaudio.h	/^} MA_AUDIO_STREAM_CATEGORY;$/;"	t
MA_AudioCategory_Other	../ext/miniaudio.h	/^    MA_AudioCategory_Other = 0  \/* <-- miniaudio is only caring about Other. *\/$/;"	e
MA_BACKEND_COUNT	../ext/miniaudio.h	/^#define MA_BACKEND_COUNT (ma_backend_null+1)$/;"	M	struct:ma_job
MA_BAD_ADDRESS	../ext/miniaudio.h	/^    MA_BAD_ADDRESS                    = -24,$/;"	e
MA_BAD_MESSAGE	../ext/miniaudio.h	/^    MA_BAD_MESSAGE                    = -31,$/;"	e
MA_BAD_PIPE	../ext/miniaudio.h	/^    MA_BAD_PIPE                       = -26,$/;"	e
MA_BAD_PROTOCOL	../ext/miniaudio.h	/^    MA_BAD_PROTOCOL                   = -39,$/;"	e
MA_BAD_SEEK	../ext/miniaudio.h	/^    MA_BAD_SEEK                       = -25,$/;"	e
MA_BSD	../ext/miniaudio.h	/^            #define MA_BSD$/;"	M
MA_BUSY	../ext/miniaudio.h	/^    MA_BUSY                           = -19,$/;"	e
MA_CANCELLED	../ext/miniaudio.h	/^    MA_CANCELLED                      = -51,$/;"	e
MA_CHANNEL_AUX_0	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_0              = 20,$/;"	e
MA_CHANNEL_AUX_1	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_1              = 21,$/;"	e
MA_CHANNEL_AUX_10	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_10             = 30,$/;"	e
MA_CHANNEL_AUX_11	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_11             = 31,$/;"	e
MA_CHANNEL_AUX_12	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_12             = 32,$/;"	e
MA_CHANNEL_AUX_13	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_13             = 33,$/;"	e
MA_CHANNEL_AUX_14	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_14             = 34,$/;"	e
MA_CHANNEL_AUX_15	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_15             = 35,$/;"	e
MA_CHANNEL_AUX_16	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_16             = 36,$/;"	e
MA_CHANNEL_AUX_17	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_17             = 37,$/;"	e
MA_CHANNEL_AUX_18	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_18             = 38,$/;"	e
MA_CHANNEL_AUX_19	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_19             = 39,$/;"	e
MA_CHANNEL_AUX_2	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_2              = 22,$/;"	e
MA_CHANNEL_AUX_20	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_20             = 40,$/;"	e
MA_CHANNEL_AUX_21	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_21             = 41,$/;"	e
MA_CHANNEL_AUX_22	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_22             = 42,$/;"	e
MA_CHANNEL_AUX_23	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_23             = 43,$/;"	e
MA_CHANNEL_AUX_24	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_24             = 44,$/;"	e
MA_CHANNEL_AUX_25	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_25             = 45,$/;"	e
MA_CHANNEL_AUX_26	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_26             = 46,$/;"	e
MA_CHANNEL_AUX_27	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_27             = 47,$/;"	e
MA_CHANNEL_AUX_28	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_28             = 48,$/;"	e
MA_CHANNEL_AUX_29	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_29             = 49,$/;"	e
MA_CHANNEL_AUX_3	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_3              = 23,$/;"	e
MA_CHANNEL_AUX_30	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_30             = 50,$/;"	e
MA_CHANNEL_AUX_31	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_31             = 51,$/;"	e
MA_CHANNEL_AUX_4	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_4              = 24,$/;"	e
MA_CHANNEL_AUX_5	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_5              = 25,$/;"	e
MA_CHANNEL_AUX_6	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_6              = 26,$/;"	e
MA_CHANNEL_AUX_7	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_7              = 27,$/;"	e
MA_CHANNEL_AUX_8	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_8              = 28,$/;"	e
MA_CHANNEL_AUX_9	../ext/miniaudio.h	/^    MA_CHANNEL_AUX_9              = 29,$/;"	e
MA_CHANNEL_BACK_CENTER	../ext/miniaudio.h	/^    MA_CHANNEL_BACK_CENTER        = 10,$/;"	e
MA_CHANNEL_BACK_LEFT	../ext/miniaudio.h	/^    MA_CHANNEL_BACK_LEFT          = 6,$/;"	e
MA_CHANNEL_BACK_RIGHT	../ext/miniaudio.h	/^    MA_CHANNEL_BACK_RIGHT         = 7,$/;"	e
MA_CHANNEL_FRONT_CENTER	../ext/miniaudio.h	/^    MA_CHANNEL_FRONT_CENTER       = 4,$/;"	e
MA_CHANNEL_FRONT_LEFT	../ext/miniaudio.h	/^    MA_CHANNEL_FRONT_LEFT         = 2,$/;"	e
MA_CHANNEL_FRONT_LEFT_CENTER	../ext/miniaudio.h	/^    MA_CHANNEL_FRONT_LEFT_CENTER  = 8,$/;"	e
MA_CHANNEL_FRONT_RIGHT	../ext/miniaudio.h	/^    MA_CHANNEL_FRONT_RIGHT        = 3,$/;"	e
MA_CHANNEL_FRONT_RIGHT_CENTER	../ext/miniaudio.h	/^    MA_CHANNEL_FRONT_RIGHT_CENTER = 9,$/;"	e
MA_CHANNEL_INDEX_NULL	../ext/miniaudio.h	/^#define MA_CHANNEL_INDEX_NULL   255$/;"	M	struct:ma_resampler_config
MA_CHANNEL_LEFT	../ext/miniaudio.h	/^    MA_CHANNEL_LEFT               = MA_CHANNEL_FRONT_LEFT,$/;"	e
MA_CHANNEL_LFE	../ext/miniaudio.h	/^    MA_CHANNEL_LFE                = 5,$/;"	e
MA_CHANNEL_MONO	../ext/miniaudio.h	/^    MA_CHANNEL_MONO               = 1,$/;"	e
MA_CHANNEL_NONE	../ext/miniaudio.h	/^    MA_CHANNEL_NONE               = 0,$/;"	e
MA_CHANNEL_POSITION_COUNT	../ext/miniaudio.h	/^    MA_CHANNEL_POSITION_COUNT     = (MA_CHANNEL_AUX_31 + 1)$/;"	e
MA_CHANNEL_RIGHT	../ext/miniaudio.h	/^    MA_CHANNEL_RIGHT              = MA_CHANNEL_FRONT_RIGHT,$/;"	e
MA_CHANNEL_SIDE_LEFT	../ext/miniaudio.h	/^    MA_CHANNEL_SIDE_LEFT          = 11,$/;"	e
MA_CHANNEL_SIDE_RIGHT	../ext/miniaudio.h	/^    MA_CHANNEL_SIDE_RIGHT         = 12,$/;"	e
MA_CHANNEL_TOP_BACK_CENTER	../ext/miniaudio.h	/^    MA_CHANNEL_TOP_BACK_CENTER    = 18,$/;"	e
MA_CHANNEL_TOP_BACK_LEFT	../ext/miniaudio.h	/^    MA_CHANNEL_TOP_BACK_LEFT      = 17,$/;"	e
MA_CHANNEL_TOP_BACK_RIGHT	../ext/miniaudio.h	/^    MA_CHANNEL_TOP_BACK_RIGHT     = 19,$/;"	e
MA_CHANNEL_TOP_CENTER	../ext/miniaudio.h	/^    MA_CHANNEL_TOP_CENTER         = 13,$/;"	e
MA_CHANNEL_TOP_FRONT_CENTER	../ext/miniaudio.h	/^    MA_CHANNEL_TOP_FRONT_CENTER   = 15,$/;"	e
MA_CHANNEL_TOP_FRONT_LEFT	../ext/miniaudio.h	/^    MA_CHANNEL_TOP_FRONT_LEFT     = 14,$/;"	e
MA_CHANNEL_TOP_FRONT_RIGHT	../ext/miniaudio.h	/^    MA_CHANNEL_TOP_FRONT_RIGHT    = 16,$/;"	e
MA_CLOCK_ID	../ext/miniaudio.h	/^            #define MA_CLOCK_ID CLOCK_MONOTONIC$/;"	M
MA_CLOCK_ID	../ext/miniaudio.h	/^            #define MA_CLOCK_ID CLOCK_REALTIME$/;"	M
MA_CLSID_MMDeviceEnumerator	../ext/miniaudio.h	/^#define MA_CLSID_MMDeviceEnumerator &MA_CLSID_MMDeviceEnumerator_Instance$/;"	M
MA_CLSID_MMDeviceEnumerator	../ext/miniaudio.h	/^#define MA_CLSID_MMDeviceEnumerator MA_CLSID_MMDeviceEnumerator_Instance$/;"	M
MA_COINIT_VALUE	../ext/miniaudio.h	/^#define MA_COINIT_VALUE    0   \/* 0 = COINIT_MULTITHREADED *\/$/;"	M
MA_COMPILER_HAS_BUILTIN	../ext/miniaudio.h	/^    #define MA_COMPILER_HAS_BUILTIN(x) 0$/;"	M
MA_COMPILER_HAS_BUILTIN	../ext/miniaudio.h	/^    #define MA_COMPILER_HAS_BUILTIN(x) __has_builtin(x)$/;"	M
MA_CONNECTION_REFUSED	../ext/miniaudio.h	/^    MA_CONNECTION_REFUSED             = -48,$/;"	e
MA_CONNECTION_RESET	../ext/miniaudio.h	/^    MA_CONNECTION_RESET               = -45,$/;"	e
MA_CONTEXT_COMMAND_CREATE_IAUDIOCLIENT__WASAPI	../ext/miniaudio.h	/^#define MA_CONTEXT_COMMAND_CREATE_IAUDIOCLIENT__WASAPI  2$/;"	M	struct:ma_completion_handler_uwp
MA_CONTEXT_COMMAND_QUIT__WASAPI	../ext/miniaudio.h	/^#define MA_CONTEXT_COMMAND_QUIT__WASAPI                 1$/;"	M	struct:ma_completion_handler_uwp
MA_CONTEXT_COMMAND_RELEASE_IAUDIOCLIENT__WASAPI	../ext/miniaudio.h	/^#define MA_CONTEXT_COMMAND_RELEASE_IAUDIOCLIENT__WASAPI 3$/;"	M	struct:ma_completion_handler_uwp
MA_COPY_MEMORY	../ext/miniaudio.h	/^#define MA_COPY_MEMORY(dst, src, sz) CopyMemory((dst), (src), (sz))$/;"	M
MA_COPY_MEMORY	../ext/miniaudio.h	/^#define MA_COPY_MEMORY(dst, src, sz) memcpy((dst), (src), (sz))$/;"	M
MA_DATA_CONVERTER_STACK_BUFFER_SIZE	../ext/miniaudio.h	/^#define MA_DATA_CONVERTER_STACK_BUFFER_SIZE     4096$/;"	M
MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE	../ext/miniaudio.h	/^#define MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE (1U << 1)    \/* If set, this is supported in exclusi/;"	M
MA_DATA_SOURCE_SELF_MANAGED_RANGE_AND_LOOP_POINT	../ext/miniaudio.h	/^#define MA_DATA_SOURCE_SELF_MANAGED_RANGE_AND_LOOP_POINT    0x00000001$/;"	M	struct:ma_device
MA_DEADLOCK	../ext/miniaudio.h	/^    MA_DEADLOCK                       = -27,$/;"	e
MA_DEFAULT_CAPTURE_DEVICE_NAME	../ext/miniaudio.h	/^#define MA_DEFAULT_CAPTURE_DEVICE_NAME     "Default Capture Device"$/;"	M
MA_DEFAULT_CHANNELS	../ext/miniaudio.h	/^#define MA_DEFAULT_CHANNELS                                 2$/;"	M
MA_DEFAULT_FORMAT	../ext/miniaudio.h	/^#define MA_DEFAULT_FORMAT                                   ma_format_f32$/;"	M
MA_DEFAULT_LCG_SEED	../ext/miniaudio.h	/^#define MA_DEFAULT_LCG_SEED 4321$/;"	M
MA_DEFAULT_PERIODS	../ext/miniaudio.h	/^#define MA_DEFAULT_PERIODS                                  3$/;"	M
MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_CONSERVATIVE	../ext/miniaudio.h	/^#define MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_CONSERVATIVE 100$/;"	M
MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_LOW_LATENCY	../ext/miniaudio.h	/^#define MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_LOW_LATENCY  10$/;"	M
MA_DEFAULT_PLAYBACK_DEVICE_NAME	../ext/miniaudio.h	/^#define MA_DEFAULT_PLAYBACK_DEVICE_NAME    "Default Playback Device"$/;"	M
MA_DEFAULT_RESAMPLER_LPF_ORDER	../ext/miniaudio.h	/^        #define MA_DEFAULT_RESAMPLER_LPF_ORDER  4$/;"	M
MA_DEFAULT_RESAMPLER_LPF_ORDER	../ext/miniaudio.h	/^        #define MA_DEFAULT_RESAMPLER_LPF_ORDER  MA_MAX_FILTER_ORDER$/;"	M
MA_DEFAULT_SAMPLE_RATE	../ext/miniaudio.h	/^#define MA_DEFAULT_SAMPLE_RATE                              48000$/;"	M
MA_DEVICE_ALREADY_INITIALIZED	../ext/miniaudio.h	/^    MA_DEVICE_ALREADY_INITIALIZED     = -201,$/;"	e
MA_DEVICE_NOT_INITIALIZED	../ext/miniaudio.h	/^    MA_DEVICE_NOT_INITIALIZED         = -200,$/;"	e
MA_DEVICE_NOT_STARTED	../ext/miniaudio.h	/^    MA_DEVICE_NOT_STARTED             = -202,$/;"	e
MA_DEVICE_NOT_STOPPED	../ext/miniaudio.h	/^    MA_DEVICE_NOT_STOPPED             = -203,$/;"	e
MA_DEVICE_OP_KILL__NULL	../ext/miniaudio.h	/^#define MA_DEVICE_OP_KILL__NULL    3$/;"	M
MA_DEVICE_OP_NONE__NULL	../ext/miniaudio.h	/^#define MA_DEVICE_OP_NONE__NULL    0$/;"	M
MA_DEVICE_OP_START__NULL	../ext/miniaudio.h	/^#define MA_DEVICE_OP_START__NULL   1$/;"	M
MA_DEVICE_OP_SUSPEND__NULL	../ext/miniaudio.h	/^#define MA_DEVICE_OP_SUSPEND__NULL 2$/;"	M
MA_DEVICE_TYPE_NOT_SUPPORTED	../ext/miniaudio.h	/^    MA_DEVICE_TYPE_NOT_SUPPORTED      = -101,$/;"	e
MA_DIRECTORY_NOT_EMPTY	../ext/miniaudio.h	/^    MA_DIRECTORY_NOT_EMPTY            = -16,$/;"	e
MA_DLL_EXPORT	../ext/miniaudio.h	/^                #define MA_DLL_EXPORT  __attribute__((visibility("default")))$/;"	M
MA_DLL_EXPORT	../ext/miniaudio.h	/^                #define MA_DLL_EXPORT$/;"	M
MA_DLL_EXPORT	../ext/miniaudio.h	/^            #define MA_DLL_EXPORT  __declspec(dllexport)$/;"	M
MA_DLL_IMPORT	../ext/miniaudio.h	/^                #define MA_DLL_IMPORT  __attribute__((visibility("default")))$/;"	M
MA_DLL_IMPORT	../ext/miniaudio.h	/^                #define MA_DLL_IMPORT$/;"	M
MA_DLL_IMPORT	../ext/miniaudio.h	/^            #define MA_DLL_IMPORT  __declspec(dllimport)$/;"	M
MA_DLL_PRIVATE	../ext/miniaudio.h	/^                #define MA_DLL_PRIVATE __attribute__((visibility("hidden")))$/;"	M
MA_DLL_PRIVATE	../ext/miniaudio.h	/^                #define MA_DLL_PRIVATE static$/;"	M
MA_DLL_PRIVATE	../ext/miniaudio.h	/^            #define MA_DLL_PRIVATE static$/;"	M
MA_DOES_NOT_EXIST	../ext/miniaudio.h	/^    MA_DOES_NOT_EXIST                 = -7,$/;"	e
MA_DSBCAPS	../ext/miniaudio.h	/^} MA_DSBCAPS;$/;"	t	struct:ma_completion_handler_uwp
MA_DSBCAPS_CTRL3D	../ext/miniaudio.h	/^#define MA_DSBCAPS_CTRL3D               0x00000010$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_CTRLFREQUENCY	../ext/miniaudio.h	/^#define MA_DSBCAPS_CTRLFREQUENCY        0x00000020$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_CTRLFX	../ext/miniaudio.h	/^#define MA_DSBCAPS_CTRLFX               0x00000200$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_CTRLPAN	../ext/miniaudio.h	/^#define MA_DSBCAPS_CTRLPAN              0x00000040$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_CTRLPOSITIONNOTIFY	../ext/miniaudio.h	/^#define MA_DSBCAPS_CTRLPOSITIONNOTIFY   0x00000100$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_CTRLVOLUME	../ext/miniaudio.h	/^#define MA_DSBCAPS_CTRLVOLUME           0x00000080$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_GETCURRENTPOSITION2	../ext/miniaudio.h	/^#define MA_DSBCAPS_GETCURRENTPOSITION2  0x00010000$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_GLOBALFOCUS	../ext/miniaudio.h	/^#define MA_DSBCAPS_GLOBALFOCUS          0x00008000$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_LOCDEFER	../ext/miniaudio.h	/^#define MA_DSBCAPS_LOCDEFER             0x00040000$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_LOCHARDWARE	../ext/miniaudio.h	/^#define MA_DSBCAPS_LOCHARDWARE          0x00000004$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_LOCSOFTWARE	../ext/miniaudio.h	/^#define MA_DSBCAPS_LOCSOFTWARE          0x00000008$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_MUTE3DATMAXDISTANCE	../ext/miniaudio.h	/^#define MA_DSBCAPS_MUTE3DATMAXDISTANCE  0x00020000$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_PRIMARYBUFFER	../ext/miniaudio.h	/^#define MA_DSBCAPS_PRIMARYBUFFER        0x00000001$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_STATIC	../ext/miniaudio.h	/^#define MA_DSBCAPS_STATIC               0x00000002$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_STICKYFOCUS	../ext/miniaudio.h	/^#define MA_DSBCAPS_STICKYFOCUS          0x00004000$/;"	M	struct:ma_completion_handler_uwp
MA_DSBCAPS_TRUEPLAYPOSITION	../ext/miniaudio.h	/^#define MA_DSBCAPS_TRUEPLAYPOSITION     0x00080000$/;"	M	struct:ma_completion_handler_uwp
MA_DSBPLAY_LOCHARDWARE	../ext/miniaudio.h	/^#define MA_DSBPLAY_LOCHARDWARE          0x00000002$/;"	M	struct:ma_completion_handler_uwp
MA_DSBPLAY_LOCSOFTWARE	../ext/miniaudio.h	/^#define MA_DSBPLAY_LOCSOFTWARE          0x00000004$/;"	M	struct:ma_completion_handler_uwp
MA_DSBPLAY_LOOPING	../ext/miniaudio.h	/^#define MA_DSBPLAY_LOOPING              0x00000001$/;"	M	struct:ma_completion_handler_uwp
MA_DSBPLAY_TERMINATEBY_DISTANCE	../ext/miniaudio.h	/^#define MA_DSBPLAY_TERMINATEBY_DISTANCE 0x00000010$/;"	M	struct:ma_completion_handler_uwp
MA_DSBPLAY_TERMINATEBY_PRIORITY	../ext/miniaudio.h	/^#define MA_DSBPLAY_TERMINATEBY_PRIORITY 0x00000020$/;"	M	struct:ma_completion_handler_uwp
MA_DSBPLAY_TERMINATEBY_TIME	../ext/miniaudio.h	/^#define MA_DSBPLAY_TERMINATEBY_TIME     0x00000008$/;"	M	struct:ma_completion_handler_uwp
MA_DSBPOSITIONNOTIFY	../ext/miniaudio.h	/^} MA_DSBPOSITIONNOTIFY;$/;"	t	struct:ma_completion_handler_uwp
MA_DSBUFFERDESC	../ext/miniaudio.h	/^} MA_DSBUFFERDESC;$/;"	t	struct:ma_completion_handler_uwp
MA_DSCAPS	../ext/miniaudio.h	/^} MA_DSCAPS;$/;"	t	struct:ma_completion_handler_uwp
MA_DSCAPS_CERTIFIED	../ext/miniaudio.h	/^#define MA_DSCAPS_CERTIFIED             0x00000040$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_CONTINUOUSRATE	../ext/miniaudio.h	/^#define MA_DSCAPS_CONTINUOUSRATE        0x00000010$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_EMULDRIVER	../ext/miniaudio.h	/^#define MA_DSCAPS_EMULDRIVER            0x00000020$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_PRIMARY16BIT	../ext/miniaudio.h	/^#define MA_DSCAPS_PRIMARY16BIT          0x00000008$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_PRIMARY8BIT	../ext/miniaudio.h	/^#define MA_DSCAPS_PRIMARY8BIT           0x00000004$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_PRIMARYMONO	../ext/miniaudio.h	/^#define MA_DSCAPS_PRIMARYMONO           0x00000001$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_PRIMARYSTEREO	../ext/miniaudio.h	/^#define MA_DSCAPS_PRIMARYSTEREO         0x00000002$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_SECONDARY16BIT	../ext/miniaudio.h	/^#define MA_DSCAPS_SECONDARY16BIT        0x00000800$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_SECONDARY8BIT	../ext/miniaudio.h	/^#define MA_DSCAPS_SECONDARY8BIT         0x00000400$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_SECONDARYMONO	../ext/miniaudio.h	/^#define MA_DSCAPS_SECONDARYMONO         0x00000100$/;"	M	struct:ma_completion_handler_uwp
MA_DSCAPS_SECONDARYSTEREO	../ext/miniaudio.h	/^#define MA_DSCAPS_SECONDARYSTEREO       0x00000200$/;"	M	struct:ma_completion_handler_uwp
MA_DSCBCAPS	../ext/miniaudio.h	/^} MA_DSCBCAPS;$/;"	t	struct:ma_completion_handler_uwp
MA_DSCBSTART_LOOPING	../ext/miniaudio.h	/^#define MA_DSCBSTART_LOOPING            0x00000001$/;"	M	struct:ma_completion_handler_uwp
MA_DSCBUFFERDESC	../ext/miniaudio.h	/^} MA_DSCBUFFERDESC;$/;"	t	struct:ma_completion_handler_uwp
MA_DSCCAPS	../ext/miniaudio.h	/^} MA_DSCCAPS;$/;"	t	struct:ma_completion_handler_uwp
MA_DSERR_ACCESSDENIED	../ext/miniaudio.h	/^#define MA_DSERR_ACCESSDENIED                     ((HRESULT)0x80070005) \/*E_ACCESSDENIED*\/$/;"	M
MA_DSERR_ALLOCATED	../ext/miniaudio.h	/^#define MA_DSERR_ALLOCATED                        ((HRESULT)0x8878000A)$/;"	M
MA_DSERR_ALREADYINITIALIZED	../ext/miniaudio.h	/^#define MA_DSERR_ALREADYINITIALIZED               ((HRESULT)0x88780082)$/;"	M
MA_DSERR_BADFORMAT	../ext/miniaudio.h	/^#define MA_DSERR_BADFORMAT                        ((HRESULT)0x88780064)$/;"	M
MA_DSERR_BADSENDBUFFERGUID	../ext/miniaudio.h	/^#define MA_DSERR_BADSENDBUFFERGUID                ((HRESULT)0x887800D2)$/;"	M
MA_DSERR_BUFFERLOST	../ext/miniaudio.h	/^#define MA_DSERR_BUFFERLOST                       ((HRESULT)0x88780096)$/;"	M
MA_DSERR_BUFFERTOOSMALL	../ext/miniaudio.h	/^#define MA_DSERR_BUFFERTOOSMALL                   ((HRESULT)0x887800B4)$/;"	M
MA_DSERR_CONTROLUNAVAIL	../ext/miniaudio.h	/^#define MA_DSERR_CONTROLUNAVAIL                   ((HRESULT)0x8878001E)$/;"	M
MA_DSERR_DS8_REQUIRED	../ext/miniaudio.h	/^#define MA_DSERR_DS8_REQUIRED                     ((HRESULT)0x887800BE)$/;"	M
MA_DSERR_FXUNAVAILABLE	../ext/miniaudio.h	/^#define MA_DSERR_FXUNAVAILABLE                    ((HRESULT)0x887800DC)$/;"	M
MA_DSERR_GENERIC	../ext/miniaudio.h	/^#define MA_DSERR_GENERIC                          ((HRESULT)0x80004005) \/*E_FAIL*\/$/;"	M
MA_DSERR_INVALIDCALL	../ext/miniaudio.h	/^#define MA_DSERR_INVALIDCALL                      ((HRESULT)0x88780032)$/;"	M
MA_DSERR_INVALIDPARAM	../ext/miniaudio.h	/^#define MA_DSERR_INVALIDPARAM                     ((HRESULT)0x80070057) \/*E_INVALIDARG*\/$/;"	M
MA_DSERR_NOAGGREGATION	../ext/miniaudio.h	/^#define MA_DSERR_NOAGGREGATION                    ((HRESULT)0x80040110) \/*CLASS_E_NOAGGREGATION/;"	M
MA_DSERR_NODRIVER	../ext/miniaudio.h	/^#define MA_DSERR_NODRIVER                         ((HRESULT)0x88780078)$/;"	M
MA_DSERR_NOINTERFACE	../ext/miniaudio.h	/^#define MA_DSERR_NOINTERFACE                      ((HRESULT)0x80004002) \/*E_NOINTERFACE*\/$/;"	M
MA_DSERR_OBJECTNOTFOUND	../ext/miniaudio.h	/^#define MA_DSERR_OBJECTNOTFOUND                   ((HRESULT)0x88781161)$/;"	M
MA_DSERR_OTHERAPPHASPRIO	../ext/miniaudio.h	/^#define MA_DSERR_OTHERAPPHASPRIO                  ((HRESULT)0x887800A0)$/;"	M
MA_DSERR_OUTOFMEMORY	../ext/miniaudio.h	/^#define MA_DSERR_OUTOFMEMORY                      ((HRESULT)0x8007000E) \/*E_OUTOFMEMORY*\/$/;"	M
MA_DSERR_PRIOLEVELNEEDED	../ext/miniaudio.h	/^#define MA_DSERR_PRIOLEVELNEEDED                  ((HRESULT)0x88780046)$/;"	M
MA_DSERR_SENDLOOP	../ext/miniaudio.h	/^#define MA_DSERR_SENDLOOP                         ((HRESULT)0x887800C8)$/;"	M
MA_DSERR_UNINITIALIZED	../ext/miniaudio.h	/^#define MA_DSERR_UNINITIALIZED                    ((HRESULT)0x887800AA)$/;"	M
MA_DSERR_UNSUPPORTED	../ext/miniaudio.h	/^#define MA_DSERR_UNSUPPORTED                      ((HRESULT)0x80004001) \/*E_NOTIMPL*\/$/;"	M
MA_DSSCL_EXCLUSIVE	../ext/miniaudio.h	/^#define MA_DSSCL_EXCLUSIVE              3$/;"	M	struct:ma_completion_handler_uwp
MA_DSSCL_NORMAL	../ext/miniaudio.h	/^#define MA_DSSCL_NORMAL                 1$/;"	M	struct:ma_completion_handler_uwp
MA_DSSCL_PRIORITY	../ext/miniaudio.h	/^#define MA_DSSCL_PRIORITY               2$/;"	M	struct:ma_completion_handler_uwp
MA_DSSCL_WRITEPRIMARY	../ext/miniaudio.h	/^#define MA_DSSCL_WRITEPRIMARY           4$/;"	M	struct:ma_completion_handler_uwp
MA_DS_NO_VIRTUALIZATION	../ext/miniaudio.h	/^#define MA_DS_NO_VIRTUALIZATION                   ((HRESULT)0x0878000A)$/;"	M
MA_DS_OK	../ext/miniaudio.h	/^#define MA_DS_OK                                  ((HRESULT)0)$/;"	M
MA_EMSCRIPTEN	../ext/miniaudio.h	/^        #define MA_EMSCRIPTEN$/;"	M
MA_ENGINE_MAX_LISTENERS	../ext/miniaudio.h	/^#define MA_ENGINE_MAX_LISTENERS             4$/;"	M
MA_ERROR	../ext/miniaudio.h	/^    MA_ERROR                          = -1,  \/* A generic error. *\/$/;"	e
MA_FAILED_TO_INIT_BACKEND	../ext/miniaudio.h	/^    MA_FAILED_TO_INIT_BACKEND         = -300,$/;"	e
MA_FAILED_TO_OPEN_BACKEND_DEVICE	../ext/miniaudio.h	/^    MA_FAILED_TO_OPEN_BACKEND_DEVICE  = -301,$/;"	e
MA_FAILED_TO_START_BACKEND_DEVICE	../ext/miniaudio.h	/^    MA_FAILED_TO_START_BACKEND_DEVICE = -302,$/;"	e
MA_FAILED_TO_STOP_BACKEND_DEVICE	../ext/miniaudio.h	/^    MA_FAILED_TO_STOP_BACKEND_DEVICE  = -303$/;"	e
MA_FALSE	../ext/miniaudio.h	/^#define MA_FALSE    0$/;"	M
MA_FENCE_COUNTER_MAX	../ext/miniaudio.h	/^#define MA_FENCE_COUNTER_MAX    0x7FFFFFFF$/;"	M
MA_FLT_MAX	../ext/miniaudio.h	/^        #define MA_FLT_MAX 3.402823466e+38F$/;"	M
MA_FLT_MAX	../ext/miniaudio.h	/^        #define MA_FLT_MAX FLT_MAX$/;"	M
MA_FORMAT_NOT_SUPPORTED	../ext/miniaudio.h	/^    MA_FORMAT_NOT_SUPPORTED           = -100,$/;"	e
MA_FREE	../ext/miniaudio.h	/^#define MA_FREE(p) HeapFree(GetProcessHeap(), 0, (p))$/;"	M
MA_FREE	../ext/miniaudio.h	/^#define MA_FREE(p) free((p))$/;"	M
MA_GNUC_INLINE_HINT	../ext/miniaudio.h	/^        #define MA_GNUC_INLINE_HINT __inline__$/;"	M
MA_GNUC_INLINE_HINT	../ext/miniaudio.h	/^        #define MA_GNUC_INLINE_HINT inline$/;"	M
MA_HAS_AAUDIO	../ext/miniaudio.h	/^    #define MA_HAS_AAUDIO$/;"	M	struct:ma_job
MA_HAS_ALSA	../ext/miniaudio.h	/^    #define MA_HAS_ALSA$/;"	M	struct:ma_job
MA_HAS_AUDIO4	../ext/miniaudio.h	/^    #define MA_HAS_AUDIO4$/;"	M	struct:ma_job
MA_HAS_BYTESWAP16_INTRINSIC	../ext/miniaudio.h	/^        #define MA_HAS_BYTESWAP16_INTRINSIC$/;"	M
MA_HAS_BYTESWAP16_INTRINSIC	../ext/miniaudio.h	/^    #define MA_HAS_BYTESWAP16_INTRINSIC$/;"	M
MA_HAS_BYTESWAP32_INTRINSIC	../ext/miniaudio.h	/^        #define MA_HAS_BYTESWAP32_INTRINSIC$/;"	M
MA_HAS_BYTESWAP32_INTRINSIC	../ext/miniaudio.h	/^    #define MA_HAS_BYTESWAP32_INTRINSIC$/;"	M
MA_HAS_BYTESWAP64_INTRINSIC	../ext/miniaudio.h	/^        #define MA_HAS_BYTESWAP64_INTRINSIC$/;"	M
MA_HAS_BYTESWAP64_INTRINSIC	../ext/miniaudio.h	/^    #define MA_HAS_BYTESWAP64_INTRINSIC$/;"	M
MA_HAS_COREAUDIO	../ext/miniaudio.h	/^    #define MA_HAS_COREAUDIO$/;"	M	struct:ma_job
MA_HAS_CUSTOM	../ext/miniaudio.h	/^    #define MA_HAS_CUSTOM$/;"	M	struct:ma_job
MA_HAS_DSOUND	../ext/miniaudio.h	/^    #define MA_HAS_DSOUND$/;"	M	struct:ma_job
MA_HAS_JACK	../ext/miniaudio.h	/^    #define MA_HAS_JACK$/;"	M	struct:ma_job
MA_HAS_NULL	../ext/miniaudio.h	/^    #define MA_HAS_NULL$/;"	M	struct:ma_job
MA_HAS_OPENSL	../ext/miniaudio.h	/^    #define MA_HAS_OPENSL$/;"	M	struct:ma_job
MA_HAS_OSS	../ext/miniaudio.h	/^    #define MA_HAS_OSS$/;"	M	struct:ma_job
MA_HAS_PULSEAUDIO	../ext/miniaudio.h	/^    #define MA_HAS_PULSEAUDIO$/;"	M	struct:ma_job
MA_HAS_SNDIO	../ext/miniaudio.h	/^    #define MA_HAS_SNDIO$/;"	M	struct:ma_job
MA_HAS_WASAPI	../ext/miniaudio.h	/^    #define MA_HAS_WASAPI$/;"	M	struct:ma_job
MA_HAS_WEBAUDIO	../ext/miniaudio.h	/^    #define MA_HAS_WEBAUDIO$/;"	M	struct:ma_job
MA_HAS_WFOPEN	../ext/miniaudio.h	/^        #define MA_HAS_WFOPEN$/;"	M
MA_HAS_WINMM	../ext/miniaudio.h	/^    #define MA_HAS_WINMM$/;"	M	struct:ma_job
MA_IID_IMMDeviceEnumerator	../ext/miniaudio.h	/^#define MA_IID_IMMDeviceEnumerator  &MA_IID_IMMDeviceEnumerator_Instance$/;"	M
MA_IID_IMMDeviceEnumerator	../ext/miniaudio.h	/^#define MA_IID_IMMDeviceEnumerator  MA_IID_IMMDeviceEnumerator_Instance$/;"	M
MA_INLINE	../ext/miniaudio.h	/^        #define MA_INLINE MA_GNUC_INLINE_HINT __attribute__((always_inline))$/;"	M
MA_INLINE	../ext/miniaudio.h	/^        #define MA_INLINE MA_GNUC_INLINE_HINT$/;"	M
MA_INLINE	../ext/miniaudio.h	/^    #define MA_INLINE __forceinline$/;"	M
MA_INLINE	../ext/miniaudio.h	/^    #define MA_INLINE __inline$/;"	M
MA_INLINE	../ext/miniaudio.h	/^    #define MA_INLINE$/;"	M
MA_INTERRUPT	../ext/miniaudio.h	/^    MA_INTERRUPT                      = -21,$/;"	e
MA_INVALID_ARGS	../ext/miniaudio.h	/^    MA_INVALID_ARGS                   = -2,$/;"	e
MA_INVALID_DATA	../ext/miniaudio.h	/^    MA_INVALID_DATA                   = -33,$/;"	e
MA_INVALID_DEVICE_CONFIG	../ext/miniaudio.h	/^    MA_INVALID_DEVICE_CONFIG          = -106,$/;"	e
MA_INVALID_FILE	../ext/miniaudio.h	/^    MA_INVALID_FILE                   = -10,$/;"	e
MA_INVALID_OPERATION	../ext/miniaudio.h	/^    MA_INVALID_OPERATION              = -3,$/;"	e
MA_IN_PROGRESS	../ext/miniaudio.h	/^    MA_IN_PROGRESS                    = -50,$/;"	e
MA_IO_ERROR	../ext/miniaudio.h	/^    MA_IO_ERROR                       = -20,$/;"	e
MA_IS_DIRECTORY	../ext/miniaudio.h	/^    MA_IS_DIRECTORY                   = -15,$/;"	e
MA_JOB_ID_NONE	../ext/miniaudio.h	/^#define MA_JOB_ID_NONE      ~((ma_uint64)0)$/;"	M
MA_JOB_QUEUE_FLAG_NON_BLOCKING	../ext/miniaudio.h	/^    MA_JOB_QUEUE_FLAG_NON_BLOCKING = 0x00000001$/;"	e	struct:ma_job
MA_JOB_SLOT_NONE	../ext/miniaudio.h	/^#define MA_JOB_SLOT_NONE    (ma_uint16)(~0)$/;"	M
MA_JOB_TYPE_COUNT	../ext/miniaudio.h	/^    MA_JOB_TYPE_COUNT$/;"	e
MA_JOB_TYPE_CUSTOM	../ext/miniaudio.h	/^    MA_JOB_TYPE_CUSTOM,$/;"	e
MA_JOB_TYPE_DEVICE_AAUDIO_REROUTE	../ext/miniaudio.h	/^    MA_JOB_TYPE_DEVICE_AAUDIO_REROUTE,$/;"	e
MA_JOB_TYPE_QUIT	../ext/miniaudio.h	/^    MA_JOB_TYPE_QUIT = 0,$/;"	e
MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER	../ext/miniaudio.h	/^    MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER,$/;"	e
MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER_NODE	../ext/miniaudio.h	/^    MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER_NODE,$/;"	e
MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_STREAM	../ext/miniaudio.h	/^    MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_STREAM,$/;"	e
MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER	../ext/miniaudio.h	/^    MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER,$/;"	e
MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER_NODE	../ext/miniaudio.h	/^    MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER_NODE,$/;"	e
MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_STREAM	../ext/miniaudio.h	/^    MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_STREAM,$/;"	e
MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE	../ext/miniaudio.h	/^    MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE,$/;"	e
MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_STREAM	../ext/miniaudio.h	/^    MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_STREAM,$/;"	e
MA_JOB_TYPE_RESOURCE_MANAGER_QUEUE_FLAG_NON_BLOCKING	../ext/miniaudio.h	/^#define MA_JOB_TYPE_RESOURCE_MANAGER_QUEUE_FLAG_NON_BLOCKING MA_JOB_QUEUE_FLAG_NON_BLOCKING$/;"	M
MA_JOB_TYPE_RESOURCE_MANAGER_SEEK_DATA_STREAM	../ext/miniaudio.h	/^    MA_JOB_TYPE_RESOURCE_MANAGER_SEEK_DATA_STREAM,$/;"	e
MA_LCG_A	../ext/miniaudio.h	/^#define MA_LCG_A   48271$/;"	M
MA_LCG_C	../ext/miniaudio.h	/^#define MA_LCG_C   0$/;"	M
MA_LCG_M	../ext/miniaudio.h	/^#define MA_LCG_M   2147483647$/;"	M
MA_LINUX	../ext/miniaudio.h	/^        #define MA_LINUX$/;"	M
MA_LISTENER_INDEX_CLOSEST	../ext/miniaudio.h	/^#define MA_LISTENER_INDEX_CLOSEST           ((ma_uint8)-1)$/;"	M
MA_LOG_LEVEL_DEBUG	../ext/miniaudio.h	/^    MA_LOG_LEVEL_DEBUG   = 4,$/;"	e
MA_LOG_LEVEL_ERROR	../ext/miniaudio.h	/^    MA_LOG_LEVEL_ERROR   = 1$/;"	e
MA_LOG_LEVEL_INFO	../ext/miniaudio.h	/^    MA_LOG_LEVEL_INFO    = 3,$/;"	e
MA_LOG_LEVEL_WARNING	../ext/miniaudio.h	/^    MA_LOG_LEVEL_WARNING = 2,$/;"	e
MA_LOOP	../ext/miniaudio.h	/^    MA_LOOP                           = -107,$/;"	e
MA_MALLOC	../ext/miniaudio.h	/^#define MA_MALLOC(sz) HeapAlloc(GetProcessHeap(), 0, (sz))$/;"	M
MA_MALLOC	../ext/miniaudio.h	/^#define MA_MALLOC(sz) malloc((sz))$/;"	M
MA_MAX_CHANNELS	../ext/miniaudio.h	/^#define MA_MAX_CHANNELS                 254$/;"	M
MA_MAX_DEVICE_NAME_LENGTH	../ext/miniaudio.h	/^#define MA_MAX_DEVICE_NAME_LENGTH   255$/;"	M
MA_MAX_FILTER_ORDER	../ext/miniaudio.h	/^#define MA_MAX_FILTER_ORDER             8$/;"	M
MA_MAX_LOG_CALLBACKS	../ext/miniaudio.h	/^#define MA_MAX_LOG_CALLBACKS    4$/;"	M
MA_MAX_NODE_BUS_COUNT	../ext/miniaudio.h	/^#define MA_MAX_NODE_BUS_COUNT       254$/;"	M	struct:ma_resource_manager
MA_MAX_NODE_LOCAL_BUS_COUNT	../ext/miniaudio.h	/^#define MA_MAX_NODE_LOCAL_BUS_COUNT 2$/;"	M	struct:ma_resource_manager
MA_MEMORY_ALREADY_MAPPED	../ext/miniaudio.h	/^    MA_MEMORY_ALREADY_MAPPED          = -52,$/;"	e
MA_MIN_CHANNELS	../ext/miniaudio.h	/^#define MA_MIN_CHANNELS                 1$/;"	M
MA_MM_DENORMALS_ZERO_MASK	../ext/miniaudio.h	/^#define MA_MM_DENORMALS_ZERO_MASK   0x0040$/;"	M
MA_MM_DEVICE_STATE_ACTIVE	../ext/miniaudio.h	/^#define MA_MM_DEVICE_STATE_ACTIVE                          1$/;"	M
MA_MM_DEVICE_STATE_DISABLED	../ext/miniaudio.h	/^#define MA_MM_DEVICE_STATE_DISABLED                        2$/;"	M
MA_MM_DEVICE_STATE_NOTPRESENT	../ext/miniaudio.h	/^#define MA_MM_DEVICE_STATE_NOTPRESENT                      4$/;"	M
MA_MM_DEVICE_STATE_UNPLUGGED	../ext/miniaudio.h	/^#define MA_MM_DEVICE_STATE_UNPLUGGED                       8$/;"	M
MA_MM_FLUSH_ZERO_MASK	../ext/miniaudio.h	/^#define MA_MM_FLUSH_ZERO_MASK       0x8000$/;"	M
MA_MOVE_MEMORY	../ext/miniaudio.h	/^#define MA_MOVE_MEMORY(dst, src, sz) MoveMemory((dst), (src), (sz))$/;"	M
MA_MOVE_MEMORY	../ext/miniaudio.h	/^#define MA_MOVE_MEMORY(dst, src, sz) memmove((dst), (src), (sz))$/;"	M
MA_NAME_TOO_LONG	../ext/miniaudio.h	/^    MA_NAME_TOO_LONG                  = -13,$/;"	e
MA_NODE_BUS_COUNT_UNKNOWN	../ext/miniaudio.h	/^#define MA_NODE_BUS_COUNT_UNKNOWN   255$/;"	M	struct:ma_resource_manager
MA_NODE_FLAG_ALLOW_NULL_INPUT	../ext/miniaudio.h	/^    MA_NODE_FLAG_ALLOW_NULL_INPUT           = 0x00000004,$/;"	e
MA_NODE_FLAG_CONTINUOUS_PROCESSING	../ext/miniaudio.h	/^    MA_NODE_FLAG_CONTINUOUS_PROCESSING      = 0x00000002,$/;"	e
MA_NODE_FLAG_DIFFERENT_PROCESSING_RATES	../ext/miniaudio.h	/^    MA_NODE_FLAG_DIFFERENT_PROCESSING_RATES = 0x00000008,$/;"	e
MA_NODE_FLAG_PASSTHROUGH	../ext/miniaudio.h	/^    MA_NODE_FLAG_PASSTHROUGH                = 0x00000001,$/;"	e
MA_NODE_FLAG_SILENT_OUTPUT	../ext/miniaudio.h	/^    MA_NODE_FLAG_SILENT_OUTPUT              = 0x00000010$/;"	e
MA_NOT_CONNECTED	../ext/miniaudio.h	/^    MA_NOT_CONNECTED                  = -47,$/;"	e
MA_NOT_DIRECTORY	../ext/miniaudio.h	/^    MA_NOT_DIRECTORY                  = -14,$/;"	e
MA_NOT_IMPLEMENTED	../ext/miniaudio.h	/^    MA_NOT_IMPLEMENTED                = -29,$/;"	e
MA_NOT_SOCKET	../ext/miniaudio.h	/^    MA_NOT_SOCKET                     = -37,$/;"	e
MA_NOT_UNIQUE	../ext/miniaudio.h	/^    MA_NOT_UNIQUE                     = -36,$/;"	e
MA_NO_ADDRESS	../ext/miniaudio.h	/^    MA_NO_ADDRESS                     = -38,$/;"	e
MA_NO_BACKEND	../ext/miniaudio.h	/^    MA_NO_BACKEND                     = -103,$/;"	e
MA_NO_CPUID	../ext/miniaudio.h	/^            #define MA_NO_CPUID$/;"	M
MA_NO_CPUID	../ext/miniaudio.h	/^        #define MA_NO_CPUID$/;"	M
MA_NO_CPUID	../ext/miniaudio.h	/^    #define MA_NO_CPUID$/;"	M
MA_NO_DATA_AVAILABLE	../ext/miniaudio.h	/^    MA_NO_DATA_AVAILABLE              = -32,$/;"	e
MA_NO_DEVICE	../ext/miniaudio.h	/^    MA_NO_DEVICE                      = -104,$/;"	e
MA_NO_HOST	../ext/miniaudio.h	/^    MA_NO_HOST                        = -49,$/;"	e
MA_NO_MESSAGE	../ext/miniaudio.h	/^    MA_NO_MESSAGE                     = -30,$/;"	e
MA_NO_NETWORK	../ext/miniaudio.h	/^    MA_NO_NETWORK                     = -35,$/;"	e
MA_NO_RESOURCE_MANAGER	../ext/miniaudio.h	/^#define MA_NO_RESOURCE_MANAGER$/;"	M	struct:ma_encoder
MA_NO_RUNTIME_LINKING	../ext/miniaudio.h	/^        #define MA_NO_RUNTIME_LINKING$/;"	M
MA_NO_SPACE	../ext/miniaudio.h	/^    MA_NO_SPACE                       = -18,$/;"	e
MA_NO_XGETBV	../ext/miniaudio.h	/^            #define MA_NO_XGETBV$/;"	M
MA_NO_XGETBV	../ext/miniaudio.h	/^        #define MA_NO_XGETBV$/;"	M
MA_NO_XGETBV	../ext/miniaudio.h	/^    #define MA_NO_XGETBV$/;"	M
MA_OPEN_MODE_READ	../ext/miniaudio.h	/^    MA_OPEN_MODE_READ  = 0x00000001,$/;"	e	struct:ma_paged_audio_buffer_page
MA_OPEN_MODE_WRITE	../ext/miniaudio.h	/^    MA_OPEN_MODE_WRITE = 0x00000002$/;"	e	struct:ma_paged_audio_buffer_page
MA_OUT_OF_MEMORY	../ext/miniaudio.h	/^    MA_OUT_OF_MEMORY                  = -4,$/;"	e
MA_OUT_OF_RANGE	../ext/miniaudio.h	/^    MA_OUT_OF_RANGE                   = -5,$/;"	e
MA_PATH_TOO_LONG	../ext/miniaudio.h	/^    MA_PATH_TOO_LONG                  = -12,$/;"	e
MA_PI	../ext/miniaudio.h	/^#define MA_PI      3.14159265358979323846264f$/;"	M
MA_PI_D	../ext/miniaudio.h	/^#define MA_PI_D    3.14159265358979323846264$/;"	M
MA_POSIX	../ext/miniaudio.h	/^    #define MA_POSIX$/;"	M
MA_PREFERRED_SIMD	../ext/miniaudio.h	/^        #define MA_PREFERRED_SIMD MA_SIMD_AVX2$/;"	M
MA_PREFERRED_SIMD	../ext/miniaudio.h	/^        #define MA_PREFERRED_SIMD MA_SIMD_NEON$/;"	M
MA_PREFERRED_SIMD	../ext/miniaudio.h	/^        #define MA_PREFERRED_SIMD MA_SIMD_NONE$/;"	M
MA_PREFERRED_SIMD	../ext/miniaudio.h	/^        #define MA_PREFERRED_SIMD MA_SIMD_SSE2$/;"	M
MA_PRIVATE	../ext/miniaudio.h	/^        #define MA_PRIVATE MA_DLL_PRIVATE$/;"	M
MA_PRIVATE	../ext/miniaudio.h	/^        #define MA_PRIVATE static$/;"	M
MA_PROTOCOL_FAMILY_NOT_SUPPORTED	../ext/miniaudio.h	/^    MA_PROTOCOL_FAMILY_NOT_SUPPORTED  = -42,$/;"	e
MA_PROTOCOL_NOT_SUPPORTED	../ext/miniaudio.h	/^    MA_PROTOCOL_NOT_SUPPORTED         = -41,$/;"	e
MA_PROTOCOL_UNAVAILABLE	../ext/miniaudio.h	/^    MA_PROTOCOL_UNAVAILABLE           = -40,$/;"	e
MA_REALLOC	../ext/miniaudio.h	/^#define MA_REALLOC(p, sz) (((sz) > 0) ? ((p) ? HeapReAlloc(GetProcessHeap(), 0, (p), (sz)) : Hea/;"	M
MA_REALLOC	../ext/miniaudio.h	/^#define MA_REALLOC(p, sz) realloc((p), (sz))$/;"	M
MA_REFERENCE_TIME	../ext/miniaudio.h	/^typedef ma_int64                                           MA_REFERENCE_TIME;$/;"	t
MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC	../ext/miniaudio.h	/^    MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC          = 0x00000004,   \/* When set, the resour/;"	e
MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE	../ext/miniaudio.h	/^    MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE         = 0x00000002,   \/* Decode data before s/;"	e
MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM	../ext/miniaudio.h	/^    MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM         = 0x00000001,   \/* When set, does not l/;"	e
MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_UNKNOWN_LENGTH	../ext/miniaudio.h	/^    MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_UNKNOWN_LENGTH = 0x00000010    \/* Gives the resource m/;"	e
MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT	../ext/miniaudio.h	/^    MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT      = 0x00000008,   \/* When set, waits for /;"	e
MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING	../ext/miniaudio.h	/^    MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING = 0x00000001,$/;"	e
MA_RESOURCE_MANAGER_FLAG_NO_THREADING	../ext/miniaudio.h	/^    MA_RESOURCE_MANAGER_FLAG_NO_THREADING = 0x00000002$/;"	e
MA_RESOURCE_MANAGER_MAX_JOB_THREAD_COUNT	../ext/miniaudio.h	/^#define MA_RESOURCE_MANAGER_MAX_JOB_THREAD_COUNT    64$/;"	M
MA_RESTRICT	../ext/miniaudio.h	/^        #define MA_RESTRICT __restrict$/;"	M
MA_RESTRICT	../ext/miniaudio.h	/^        #define MA_RESTRICT$/;"	M
MA_SHARE_MODE_NOT_SUPPORTED	../ext/miniaudio.h	/^    MA_SHARE_MODE_NOT_SUPPORTED       = -102,$/;"	e
MA_SIMD_ALIGNMENT	../ext/miniaudio.h	/^#define MA_SIMD_ALIGNMENT  32$/;"	M
MA_SIMD_AVX2	../ext/miniaudio.h	/^#define MA_SIMD_AVX2    2$/;"	M
MA_SIMD_NEON	../ext/miniaudio.h	/^#define MA_SIMD_NEON    3$/;"	M
MA_SIMD_NONE	../ext/miniaudio.h	/^#define MA_SIMD_NONE    0$/;"	M
MA_SIMD_SSE2	../ext/miniaudio.h	/^#define MA_SIMD_SSE2    1$/;"	M
MA_SIZEOF_PTR	../ext/miniaudio.h	/^    #define MA_SIZEOF_PTR   4$/;"	M
MA_SIZEOF_PTR	../ext/miniaudio.h	/^    #define MA_SIZEOF_PTR   8$/;"	M
MA_SIZE_MAX	../ext/miniaudio.h	/^    #define MA_SIZE_MAX    0xFFFFFFFF  \/* When SIZE_MAX is not defined by the standard library /;"	M
MA_SIZE_MAX	../ext/miniaudio.h	/^    #define MA_SIZE_MAX    SIZE_MAX$/;"	M
MA_SOCKET_NOT_SUPPORTED	../ext/miniaudio.h	/^    MA_SOCKET_NOT_SUPPORTED           = -44,$/;"	e
MA_SOUND_FLAG_ASYNC	../ext/miniaudio.h	/^    MA_SOUND_FLAG_ASYNC                 = 0x00000004,   \/* MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG/;"	e
MA_SOUND_FLAG_DECODE	../ext/miniaudio.h	/^    MA_SOUND_FLAG_DECODE                = 0x00000002,   \/* MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG/;"	e
MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT	../ext/miniaudio.h	/^    MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT = 0x00000010,   \/* Do not attach to the endpoint by def/;"	e
MA_SOUND_FLAG_NO_PITCH	../ext/miniaudio.h	/^    MA_SOUND_FLAG_NO_PITCH              = 0x00000020,   \/* Disable pitch shifting with ma_sound/;"	e
MA_SOUND_FLAG_NO_SPATIALIZATION	../ext/miniaudio.h	/^    MA_SOUND_FLAG_NO_SPATIALIZATION     = 0x00000040    \/* Disable spatialization. *\/$/;"	e
MA_SOUND_FLAG_STREAM	../ext/miniaudio.h	/^    MA_SOUND_FLAG_STREAM                = 0x00000001,   \/* MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG/;"	e
MA_SOUND_FLAG_WAIT_INIT	../ext/miniaudio.h	/^    MA_SOUND_FLAG_WAIT_INIT             = 0x00000008,   \/* MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG/;"	e
MA_SOUND_SOURCE_CHANNEL_COUNT	../ext/miniaudio.h	/^#define MA_SOUND_SOURCE_CHANNEL_COUNT   0xFFFFFFFF$/;"	M
MA_STRINGIFY	../ext/miniaudio.h	/^#define MA_STRINGIFY(x)     #x$/;"	M
MA_SUCCESS	../ext/miniaudio.h	/^    MA_SUCCESS                        =  0,$/;"	e
MA_SUPPORT_AAUDIO	../ext/miniaudio.h	/^        #define MA_SUPPORT_AAUDIO$/;"	M	struct:ma_job
MA_SUPPORT_ALSA	../ext/miniaudio.h	/^            #define MA_SUPPORT_ALSA$/;"	M	struct:ma_job
MA_SUPPORT_AUDIO4	../ext/miniaudio.h	/^        #define MA_SUPPORT_AUDIO4   \/* Only support audio(4) on platforms with known support. */;"	M	struct:ma_job
MA_SUPPORT_AVX2	../ext/miniaudio.h	/^            #define MA_SUPPORT_AVX2$/;"	M
MA_SUPPORT_COREAUDIO	../ext/miniaudio.h	/^    #define MA_SUPPORT_COREAUDIO$/;"	M	struct:ma_job
MA_SUPPORT_CUSTOM	../ext/miniaudio.h	/^#define MA_SUPPORT_CUSTOM$/;"	M	struct:ma_job
MA_SUPPORT_DSOUND	../ext/miniaudio.h	/^        #define MA_SUPPORT_DSOUND$/;"	M	struct:ma_job
MA_SUPPORT_JACK	../ext/miniaudio.h	/^        #define MA_SUPPORT_JACK    \/* JACK is technically supported on Windows, but I don't kno/;"	M	struct:ma_job
MA_SUPPORT_JACK	../ext/miniaudio.h	/^        #define MA_SUPPORT_JACK$/;"	M	struct:ma_job
MA_SUPPORT_NEON	../ext/miniaudio.h	/^        #define MA_SUPPORT_NEON$/;"	M
MA_SUPPORT_NULL	../ext/miniaudio.h	/^#define MA_SUPPORT_NULL$/;"	M	struct:ma_job
MA_SUPPORT_OPENSL	../ext/miniaudio.h	/^        #define MA_SUPPORT_OPENSL$/;"	M	struct:ma_job
MA_SUPPORT_OSS	../ext/miniaudio.h	/^        #define MA_SUPPORT_OSS      \/* Only support OSS on specific platforms with known suppor/;"	M	struct:ma_job
MA_SUPPORT_PULSEAUDIO	../ext/miniaudio.h	/^        #define MA_SUPPORT_PULSEAUDIO$/;"	M	struct:ma_job
MA_SUPPORT_SNDIO	../ext/miniaudio.h	/^        #define MA_SUPPORT_SNDIO    \/* sndio is only supported on OpenBSD for now. May be expan/;"	M	struct:ma_job
MA_SUPPORT_SSE2	../ext/miniaudio.h	/^            #define MA_SUPPORT_SSE2$/;"	M
MA_SUPPORT_WASAPI	../ext/miniaudio.h	/^    #define MA_SUPPORT_WASAPI$/;"	M	struct:ma_job
MA_SUPPORT_WEBAUDIO	../ext/miniaudio.h	/^    #define MA_SUPPORT_WEBAUDIO$/;"	M	struct:ma_job
MA_SUPPORT_WINMM	../ext/miniaudio.h	/^        #define MA_SUPPORT_WINMM$/;"	M	struct:ma_job
MA_TAU	../ext/miniaudio.h	/^#define MA_TAU     6.28318530717958647693f$/;"	M
MA_TAU_D	../ext/miniaudio.h	/^#define MA_TAU_D   6.28318530717958647693$/;"	M
MA_THREADCALL	../ext/miniaudio.h	/^    #define MA_THREADCALL WINAPI$/;"	M
MA_THREADCALL	../ext/miniaudio.h	/^    #define MA_THREADCALL$/;"	M
MA_TIMEOUT	../ext/miniaudio.h	/^    MA_TIMEOUT                        = -34,$/;"	e
MA_TOO_BIG	../ext/miniaudio.h	/^    MA_TOO_BIG                        = -11,$/;"	e
MA_TOO_MANY_LINKS	../ext/miniaudio.h	/^    MA_TOO_MANY_LINKS                 = -28,$/;"	e
MA_TOO_MANY_OPEN_FILES	../ext/miniaudio.h	/^    MA_TOO_MANY_OPEN_FILES            = -9,$/;"	e
MA_TRUE	../ext/miniaudio.h	/^#define MA_TRUE     1$/;"	M
MA_UNAVAILABLE	../ext/miniaudio.h	/^    MA_UNAVAILABLE                    = -22,$/;"	e
MA_UNIX	../ext/miniaudio.h	/^        #define MA_UNIX$/;"	M
MA_VERSION_MAJOR	../ext/miniaudio.h	/^#define MA_VERSION_MAJOR    0$/;"	M
MA_VERSION_MINOR	../ext/miniaudio.h	/^#define MA_VERSION_MINOR    11$/;"	M
MA_VERSION_REVISION	../ext/miniaudio.h	/^#define MA_VERSION_REVISION 9$/;"	M
MA_VERSION_STRING	../ext/miniaudio.h	/^#define MA_VERSION_STRING   MA_XSTRINGIFY(MA_VERSION_MAJOR) "." MA_XSTRINGIFY(MA_VERSION_MINOR) /;"	M
MA_VER_GREATER_EQUAL	../ext/miniaudio.h	/^#define MA_VER_GREATER_EQUAL    0x03$/;"	M
MA_VER_MAJORVERSION	../ext/miniaudio.h	/^#define MA_VER_MAJORVERSION     0x02$/;"	M
MA_VER_MINORVERSION	../ext/miniaudio.h	/^#define MA_VER_MINORVERSION     0x01$/;"	M
MA_VER_SERVICEPACKMAJOR	../ext/miniaudio.h	/^#define MA_VER_SERVICEPACKMAJOR 0x20$/;"	M
MA_WASAPI_WAIT_TIMEOUT_MILLISECONDS	../ext/miniaudio.h	/^#define MA_WASAPI_WAIT_TIMEOUT_MILLISECONDS 5000$/;"	M	struct:ma_completion_handler_uwp
MA_WAVECAPSA	../ext/miniaudio.h	/^} MA_WAVECAPSA;$/;"	t	struct:ma_IDirectSoundNotify
MA_WAVEINCAPS2A	../ext/miniaudio.h	/^} MA_WAVEINCAPS2A;$/;"	t	struct:ma_IDirectSoundNotify
MA_WAVEOUTCAPS2A	../ext/miniaudio.h	/^} MA_WAVEOUTCAPS2A;$/;"	t	struct:ma_IDirectSoundNotify
MA_WIN32	../ext/miniaudio.h	/^    #define MA_WIN32$/;"	M
MA_WIN32_DESKTOP	../ext/miniaudio.h	/^        #define MA_WIN32_DESKTOP$/;"	M
MA_WIN32_GDK	../ext/miniaudio.h	/^        #define MA_WIN32_GDK$/;"	M
MA_WIN32_UWP	../ext/miniaudio.h	/^        #define MA_WIN32_UWP$/;"	M
MA_WIN32_WINNT_VISTA	../ext/miniaudio.h	/^#define MA_WIN32_WINNT_VISTA    0x0600$/;"	M
MA_X64	../ext/miniaudio.h	/^#define MA_X64$/;"	M
MA_X86	../ext/miniaudio.h	/^#define MA_X86$/;"	M
MA_XSTRINGIFY	../ext/miniaudio.h	/^#define MA_XSTRINGIFY(x)    MA_STRINGIFY(x)$/;"	M
MA_ZERO_MEMORY	../ext/miniaudio.h	/^#define MA_ZERO_MEMORY(p, sz) ZeroMemory((p), (sz))$/;"	M
MA_ZERO_MEMORY	../ext/miniaudio.h	/^#define MA_ZERO_MEMORY(p, sz) memset((p), 0, (sz))$/;"	M
MA_ZERO_OBJECT	../ext/miniaudio.h	/^#define MA_ZERO_OBJECT(p) MA_ZERO_MEMORY((p), sizeof(*(p)))$/;"	M
MINIAUDIO_IMPLEMENTATION	../ext/miniaudio.h	/^#define MINIAUDIO_IMPLEMENTATION$/;"	M
ManufacturerGuid	../ext/miniaudio.h	/^    GUID ManufacturerGuid;$/;"	E	struct:ma_IDirectSoundNotify
NULL	../ext/miniaudio.h	/^#define NULL 0$/;"	M
NameGuid	../ext/miniaudio.h	/^    GUID NameGuid;$/;"	E	struct:ma_IDirectSoundNotify
PROPERTYKEY	../ext/miniaudio.h	/^} PROPERTYKEY;$/;"	t
PROPERTYKEY_DEFINED	../ext/miniaudio.h	/^#define PROPERTYKEY_DEFINED$/;"	M
ProductGuid	../ext/miniaudio.h	/^    GUID ProductGuid;$/;"	E	struct:ma_IDirectSoundNotify
SPEAKER_BACK_CENTER	../ext/miniaudio.h	/^#define SPEAKER_BACK_CENTER           0x100$/;"	M
SPEAKER_BACK_LEFT	../ext/miniaudio.h	/^#define SPEAKER_BACK_LEFT             0x10$/;"	M
SPEAKER_BACK_RIGHT	../ext/miniaudio.h	/^#define SPEAKER_BACK_RIGHT            0x20$/;"	M
SPEAKER_FRONT_CENTER	../ext/miniaudio.h	/^#define SPEAKER_FRONT_CENTER          0x4$/;"	M
SPEAKER_FRONT_LEFT	../ext/miniaudio.h	/^#define SPEAKER_FRONT_LEFT            0x1$/;"	M
SPEAKER_FRONT_LEFT_OF_CENTER	../ext/miniaudio.h	/^#define SPEAKER_FRONT_LEFT_OF_CENTER  0x40$/;"	M
SPEAKER_FRONT_RIGHT	../ext/miniaudio.h	/^#define SPEAKER_FRONT_RIGHT           0x2$/;"	M
SPEAKER_FRONT_RIGHT_OF_CENTER	../ext/miniaudio.h	/^#define SPEAKER_FRONT_RIGHT_OF_CENTER 0x80$/;"	M
SPEAKER_LOW_FREQUENCY	../ext/miniaudio.h	/^#define SPEAKER_LOW_FREQUENCY         0x8$/;"	M
SPEAKER_SIDE_LEFT	../ext/miniaudio.h	/^#define SPEAKER_SIDE_LEFT             0x200$/;"	M
SPEAKER_SIDE_RIGHT	../ext/miniaudio.h	/^#define SPEAKER_SIDE_RIGHT            0x400$/;"	M
SPEAKER_TOP_BACK_CENTER	../ext/miniaudio.h	/^#define SPEAKER_TOP_BACK_CENTER       0x10000$/;"	M
SPEAKER_TOP_BACK_LEFT	../ext/miniaudio.h	/^#define SPEAKER_TOP_BACK_LEFT         0x8000$/;"	M
SPEAKER_TOP_BACK_RIGHT	../ext/miniaudio.h	/^#define SPEAKER_TOP_BACK_RIGHT        0x20000$/;"	M
SPEAKER_TOP_CENTER	../ext/miniaudio.h	/^#define SPEAKER_TOP_CENTER            0x800$/;"	M
SPEAKER_TOP_FRONT_CENTER	../ext/miniaudio.h	/^#define SPEAKER_TOP_FRONT_CENTER      0x2000$/;"	M
SPEAKER_TOP_FRONT_LEFT	../ext/miniaudio.h	/^#define SPEAKER_TOP_FRONT_LEFT        0x1000$/;"	M
SPEAKER_TOP_FRONT_RIGHT	../ext/miniaudio.h	/^#define SPEAKER_TOP_FRONT_RIGHT       0x4000$/;"	M
Samples	../ext/miniaudio.h	/^    } Samples;$/;"	E
SubFormat	../ext/miniaudio.h	/^    GUID SubFormat;$/;"	E
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IActivateAudioInterfaceAsyncOperation* p/;"	E
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IMMDevice* pThis);$/;"	E	struct:ma_IMMDeviceCollection
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IMMDeviceCollection* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IMMDeviceEnumerator* pThis);$/;"	E	struct:ma_IUnknown
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IMMNotificationClient* pThis);$/;"	E	struct:ma_IUnknown
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * Release)       (ma_IActivateAudioInterfaceAsyncOperation* p/;"	E
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * Release)       (ma_IMMDevice* pThis);$/;"	E	struct:ma_IMMDeviceCollection
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * Release)       (ma_IMMDeviceCollection* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * Release)       (ma_IMMDeviceEnumerator* pThis);$/;"	E	struct:ma_IUnknown
ULONG	../ext/miniaudio.h	/^        ULONG   (STDMETHODCALLTYPE * Release)       (ma_IMMNotificationClient* pThis);$/;"	E	struct:ma_IUnknown
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IAudioCaptureClient* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IAudioClient* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IAudioClient2* pThis);$/;"	E	struct:ma_IAudioClient
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IAudioClient3* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IAudioRenderClient* pThis);$/;"	E	struct:ma_IAudioClient3
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IDirectSound* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IDirectSoundBuffer* pThis);$/;"	E	struct:ma_IDirectSound
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IDirectSoundCapture* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IDirectSoundCaptureBuffer* pThis);$/;"	E	struct:ma_IDirectSoundCapture
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IDirectSoundNotify* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IPropertyStore* pThis);$/;"	E	struct:ma_IActivateAudioInterfaceAsyncOperation
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_IUnknown* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * AddRef)        (ma_completion_handler_uwp* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IAudioCaptureClient* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IAudioClient* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IAudioClient2* pThis);$/;"	E	struct:ma_IAudioClient
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IAudioClient3* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IAudioRenderClient* pThis);$/;"	E	struct:ma_IAudioClient3
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IDirectSound* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IDirectSoundBuffer* pThis);$/;"	E	struct:ma_IDirectSound
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IDirectSoundCapture* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IDirectSoundCaptureBuffer* pThis);$/;"	E	struct:ma_IDirectSoundCapture
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IDirectSoundNotify* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IPropertyStore* pThis);$/;"	E	struct:ma_IActivateAudioInterfaceAsyncOperation
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_IUnknown* pThis);$/;"	E
ULONG	../ext/miniaudio.h	/^    ULONG   (STDMETHODCALLTYPE * Release)       (ma_completion_handler_uwp* pThis);$/;"	E
WAVEFORMATEXTENSIBLE	../ext/miniaudio.h	/^} WAVEFORMATEXTENSIBLE;$/;"	t
WAVE_FORMAT_44M08	../ext/miniaudio.h	/^#define WAVE_FORMAT_44M08 0x00000100$/;"	M
WAVE_FORMAT_44M16	../ext/miniaudio.h	/^#define WAVE_FORMAT_44M16 0x00000400$/;"	M
WAVE_FORMAT_44S08	../ext/miniaudio.h	/^#define WAVE_FORMAT_44S08 0x00000200$/;"	M
WAVE_FORMAT_44S16	../ext/miniaudio.h	/^#define WAVE_FORMAT_44S16 0x00000800$/;"	M
WAVE_FORMAT_48M08	../ext/miniaudio.h	/^#define WAVE_FORMAT_48M08 0x00001000$/;"	M
WAVE_FORMAT_48M16	../ext/miniaudio.h	/^#define WAVE_FORMAT_48M16 0x00004000$/;"	M
WAVE_FORMAT_48S08	../ext/miniaudio.h	/^#define WAVE_FORMAT_48S08 0x00002000$/;"	M
WAVE_FORMAT_48S16	../ext/miniaudio.h	/^#define WAVE_FORMAT_48S16 0x00008000$/;"	M
WAVE_FORMAT_96M08	../ext/miniaudio.h	/^#define WAVE_FORMAT_96M08 0x00010000$/;"	M
WAVE_FORMAT_96M16	../ext/miniaudio.h	/^#define WAVE_FORMAT_96M16 0x00040000$/;"	M
WAVE_FORMAT_96S08	../ext/miniaudio.h	/^#define WAVE_FORMAT_96S08 0x00020000$/;"	M
WAVE_FORMAT_96S16	../ext/miniaudio.h	/^#define WAVE_FORMAT_96S16 0x00080000$/;"	M
WAVE_FORMAT_EXTENSIBLE	../ext/miniaudio.h	/^#define WAVE_FORMAT_EXTENSIBLE  0xFFFE$/;"	M
WAVE_FORMAT_IEEE_FLOAT	../ext/miniaudio.h	/^#define WAVE_FORMAT_IEEE_FLOAT  0x0003$/;"	M
__data	../ext/miniaudio.h	/^        typedef union           ma_pthread_cond_t  { char __data[48]; ma_uint64 __alignment; } m/;"	t
__data	../ext/miniaudio.h	/^        typedef union           ma_pthread_mutex_t { char __data[40]; ma_uint64 __alignment; } m/;"	t
_hasThread	../ext/miniaudio.h	/^    ma_bool32 _hasThread;$/;"	E	struct:ma_job
_inputBuses	../ext/miniaudio.h	/^    ma_node_input_bus _inputBuses[MA_MAX_NODE_LOCAL_BUS_COUNT];$/;"	E	struct:ma_node_base
_ma_channel_position	../ext/miniaudio.h	/^} _ma_channel_position; \/* Do not use `_ma_channel_position` directly. Use `ma_channel` instead/;"	t
_outputBuses	../ext/miniaudio.h	/^    ma_node_output_bus _outputBuses[MA_MAX_NODE_LOCAL_BUS_COUNT];$/;"	E	struct:ma_node_base
_ownsHeap	../ext/miniaudio.h	/^    ma_bool32 _ownsHeap;    \/* If set to true, the node owns the heap allocation and _pHeap wil/;"	E	struct:ma_node_base
_ownsHeap	../ext/miniaudio.h	/^    ma_bool32 _ownsHeap;$/;"	E
_ownsHeap	../ext/miniaudio.h	/^    ma_bool32 _ownsHeap;$/;"	E	struct:ma_encoder
_ownsHeap	../ext/miniaudio.h	/^    ma_bool32 _ownsHeap;$/;"	E	struct:ma_job
_ownsHeap	../ext/miniaudio.h	/^    ma_bool32 _ownsHeap;$/;"	E	struct:ma_resampler_config
_ownsHeap	../ext/miniaudio.h	/^    ma_bool8 _ownsHeap;$/;"	E
_ownsHeap	../ext/miniaudio.h	/^    ma_bool8 _ownsHeap;$/;"	E	struct:ma_resampler_config
_pExtraData	../ext/miniaudio.h	/^    ma_uint8 _pExtraData[1];        \/* For allocating a buffer with the memory located directly/;"	E	struct:ma_device
_pHeap	../ext/miniaudio.h	/^    void* _pHeap;   \/* A heap allocation for internal use only. pInputBuses and\/or pOutputBuse/;"	E	struct:ma_node_base
_pHeap	../ext/miniaudio.h	/^    void* _pHeap;$/;"	E
_pHeap	../ext/miniaudio.h	/^    void* _pHeap;$/;"	E	struct:ma_encoder
_pHeap	../ext/miniaudio.h	/^    void* _pHeap;$/;"	E	struct:ma_job
_pHeap	../ext/miniaudio.h	/^    void* _pHeap;$/;"	E	struct:ma_resampler_config
a	../ext/miniaudio.h	/^    ma_biquad_coefficient a;$/;"	E
a0	../ext/miniaudio.h	/^    double a0;$/;"	E
a1	../ext/miniaudio.h	/^    double a1;$/;"	E
a1	../ext/miniaudio.h	/^    ma_biquad_coefficient a1;$/;"	E
a2	../ext/miniaudio.h	/^    double a2;$/;"	E
a2	../ext/miniaudio.h	/^    ma_biquad_coefficient a2;$/;"	E
aaudio	../ext/miniaudio.h	/^    } aaudio;$/;"	E	struct:ma_device_config
absoluteCursor	../ext/miniaudio.h	/^    MA_ATOMIC(8, ma_uint64) absoluteCursor;     \/* The playback cursor, in absolute position st/;"	E	struct:ma_resource_manager_data_stream
absoluteCursor	../ext/miniaudio.h	/^    ma_uint64 absoluteCursor;$/;"	E	struct:ma_paged_audio_buffer_page
advance	../ext/miniaudio.h	/^    double advance;$/;"	E	struct:ma_encoder
algorithm	../ext/miniaudio.h	/^    ma_resample_algorithm algorithm;    \/* When set to ma_resample_algorithm_custom, pBackendVT/;"	E	struct:ma_resampler_config
allocationCallbacks	../ext/miniaudio.h	/^    ma_allocation_callbacks allocationCallbacks;    \/* Need to store these persistently because/;"	E
allocationCallbacks	../ext/miniaudio.h	/^    ma_allocation_callbacks allocationCallbacks;    \/* Only used for the wchar_t version of ope/;"	E	struct:ma_paged_audio_buffer_page
allocationCallbacks	../ext/miniaudio.h	/^    ma_allocation_callbacks allocationCallbacks;$/;"	E
allocationCallbacks	../ext/miniaudio.h	/^    ma_allocation_callbacks allocationCallbacks;$/;"	E	struct:ma_context_config
allocationCallbacks	../ext/miniaudio.h	/^    ma_allocation_callbacks allocationCallbacks;$/;"	E	struct:ma_decoder
allocationCallbacks	../ext/miniaudio.h	/^    ma_allocation_callbacks allocationCallbacks;$/;"	E	struct:ma_device
allocationCallbacks	../ext/miniaudio.h	/^    ma_allocation_callbacks allocationCallbacks;$/;"	E	struct:ma_resampler_config
allocationCallbacks	../ext/miniaudio.h	/^    ma_allocation_callbacks allocationCallbacks;$/;"	E	struct:ma_sound_inlined
allocator	../ext/miniaudio.h	/^    ma_slot_allocator allocator;$/;"	E	struct:ma_job
allocatorOffset	../ext/miniaudio.h	/^    size_t allocatorOffset;$/;"	E
allowDynamicSampleRate	../ext/miniaudio.h	/^    ma_bool32 allowDynamicSampleRate;$/;"	E	struct:ma_resampler_config
alsa	../ext/miniaudio.h	/^    } alsa;$/;"	E	struct:ma_context_config
alsa	../ext/miniaudio.h	/^    } alsa;$/;"	E	struct:ma_device_config
amplitude	../ext/miniaudio.h	/^    double amplitude;$/;"	E	struct:ma_encoder
atEnd	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_bool32) atEnd;$/;"	E	struct:ma_sound
attenuationModel	../ext/miniaudio.h	/^    ma_attenuation_model attenuationModel;$/;"	E
b0	../ext/miniaudio.h	/^    double b0;$/;"	E
b0	../ext/miniaudio.h	/^    ma_biquad_coefficient b0;$/;"	E
b1	../ext/miniaudio.h	/^    double b1;$/;"	E
b1	../ext/miniaudio.h	/^    ma_biquad_coefficient b1;$/;"	E
b2	../ext/miniaudio.h	/^    double b2;$/;"	E
b2	../ext/miniaudio.h	/^    ma_biquad_coefficient b2;$/;"	E
bIsOffload	../ext/miniaudio.h	/^    BOOL bIsOffload;$/;"	E
backend	../ext/miniaudio.h	/^    } backend;$/;"	E
base	../ext/miniaudio.h	/^    ma_node_base base;$/;"	E
baseNode	../ext/miniaudio.h	/^    ma_node_base baseNode;                              \/* Must be the first member for compati/;"	E
baseNode	../ext/miniaudio.h	/^    ma_node_base baseNode;$/;"	E
biquad	../ext/miniaudio.h	/^    ma_biquad biquad;$/;"	E
biquad	../ext/miniaudio.h	/^    ma_biquad_config biquad;$/;"	E
bitfield	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) bitfield;   \/* Must be used atomically because the allocation and f/;"	E	struct:ma_resampler_config
bpf	../ext/miniaudio.h	/^    ma_bpf bpf;$/;"	E
bpf	../ext/miniaudio.h	/^    ma_bpf_config bpf;$/;"	E
bpf2Count	../ext/miniaudio.h	/^    ma_uint32 bpf2Count;$/;"	E
bq	../ext/miniaudio.h	/^    ma_biquad bq;   \/* The second order band-pass filter is implemented as a biquad filter. *\/$/;"	E
bq	../ext/miniaudio.h	/^    ma_biquad bq;   \/* The second order high-pass filter is implemented as a biquad filter. *\/$/;"	E
bq	../ext/miniaudio.h	/^    ma_biquad bq;   \/* The second order low-pass filter is implemented as a biquad filter. *\/$/;"	E
bq	../ext/miniaudio.h	/^    ma_biquad bq;$/;"	E
bufferSizeInFrames	../ext/miniaudio.h	/^    ma_uint32 bufferSizeInFrames;   \/* The maximum of config.startDelayInFrames and config.feed/;"	E
c89atoimc_flag_load_explicit	../ext/miniaudio.h	/^        #define c89atoimc_flag_load_explicit(ptr, order)            c89atomic_load_explicit_32(p/;"	M
c89atoimc_flag_load_explicit	../ext/miniaudio.h	/^        #define c89atoimc_flag_load_explicit(ptr, order)            c89atomic_load_explicit_8(pt/;"	M
c89atoimc_flag_load_explicit	../ext/miniaudio.h	/^    #define c89atoimc_flag_load_explicit(ptr, order)                c89atomic_load_explicit_8(pt/;"	M
c89atomic_bool	../ext/miniaudio.h	/^typedef unsigned char           c89atomic_bool;$/;"	t
c89atomic_clear_16	../ext/miniaudio.h	/^#define c89atomic_clear_16(ptr)                                         c89atomic_clear_explicit/;"	M
c89atomic_clear_32	../ext/miniaudio.h	/^#define c89atomic_clear_32(ptr)                                         c89atomic_clear_explicit/;"	M
c89atomic_clear_64	../ext/miniaudio.h	/^#define c89atomic_clear_64(ptr)                                         c89atomic_clear_explicit/;"	M
c89atomic_clear_8	../ext/miniaudio.h	/^#define c89atomic_clear_8( ptr)                                         c89atomic_clear_explicit/;"	M
c89atomic_clear_explicit_16	../ext/miniaudio.h	/^        #define c89atomic_clear_explicit_16(dst, order) c89atomic_store_explicit_16(dst, 0, orde/;"	M
c89atomic_clear_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_clear_explicit_16(dst, order)                 __atomic_store_n(dst, 0, ord/;"	M
c89atomic_clear_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_clear_explicit_16(dst, order)                 c89atomic_store_explicit_16(/;"	M
c89atomic_clear_explicit_32	../ext/miniaudio.h	/^        #define c89atomic_clear_explicit_32(dst, order) c89atomic_store_explicit_32(dst, 0, orde/;"	M
c89atomic_clear_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_clear_explicit_32(dst, order)                 __atomic_store_n(dst, 0, ord/;"	M
c89atomic_clear_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_clear_explicit_32(dst, order)                 c89atomic_store_explicit_32(/;"	M
c89atomic_clear_explicit_64	../ext/miniaudio.h	/^        #define c89atomic_clear_explicit_64(dst, order) c89atomic_store_explicit_64(dst, 0, orde/;"	M
c89atomic_clear_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_clear_explicit_64(dst, order)                 __atomic_store_n(dst, 0, ord/;"	M
c89atomic_clear_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_clear_explicit_64(dst, order)                 c89atomic_store_explicit_64(/;"	M
c89atomic_clear_explicit_8	../ext/miniaudio.h	/^        #define c89atomic_clear_explicit_8( dst, order) c89atomic_store_explicit_8 (dst, 0, orde/;"	M
c89atomic_clear_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_clear_explicit_8( dst, order)                 __atomic_store_n(dst, 0, ord/;"	M
c89atomic_clear_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_clear_explicit_8( dst, order)                 c89atomic_store_explicit_8 (/;"	M
c89atomic_clear_explicit_f32	../ext/miniaudio.h	/^#define c89atomic_clear_explicit_f32(ptr, order)                        c89atomic_clear_explicit/;"	M
c89atomic_clear_explicit_f64	../ext/miniaudio.h	/^#define c89atomic_clear_explicit_f64(ptr, order)                        c89atomic_clear_explicit/;"	M
c89atomic_clear_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_clear_explicit_i16(ptr, order)                        c89atomic_clear_explicit/;"	M
c89atomic_clear_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_clear_explicit_i32(ptr, order)                        c89atomic_clear_explicit/;"	M
c89atomic_clear_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_clear_explicit_i64(ptr, order)                        c89atomic_clear_explicit/;"	M
c89atomic_clear_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_clear_explicit_i8( ptr, order)                        c89atomic_clear_explicit/;"	M
c89atomic_clear_f32	../ext/miniaudio.h	/^#define c89atomic_clear_f32(ptr)                                        (float )c89atomic_clear_/;"	M
c89atomic_clear_f64	../ext/miniaudio.h	/^#define c89atomic_clear_f64(ptr)                                        (double)c89atomic_clear_/;"	M
c89atomic_clear_i16	../ext/miniaudio.h	/^#define c89atomic_clear_i16(ptr)                                        c89atomic_clear_explicit/;"	M
c89atomic_clear_i32	../ext/miniaudio.h	/^#define c89atomic_clear_i32(ptr)                                        c89atomic_clear_explicit/;"	M
c89atomic_clear_i64	../ext/miniaudio.h	/^#define c89atomic_clear_i64(ptr)                                        c89atomic_clear_explicit/;"	M
c89atomic_clear_i8	../ext/miniaudio.h	/^#define c89atomic_clear_i8( ptr)                                        c89atomic_clear_explicit/;"	M
c89atomic_compare_and_swap_16	../ext/miniaudio.h	/^            #define c89atomic_compare_and_swap_16(dst, expected, desired) (c89atomic_uint16)_Int/;"	M
c89atomic_compare_and_swap_16	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint16 __stdcall c89atomic_compare_and_swap_16(vol/;"	f
c89atomic_compare_and_swap_16	../ext/miniaudio.h	/^        #define c89atomic_compare_and_swap_16(dst, expected, desired)   __sync_val_compare_and_s/;"	M
c89atomic_compare_and_swap_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 c89atomic_compare_and_swap_16(volatile c89atomi/;"	f
c89atomic_compare_and_swap_16	../ext/miniaudio.h	/^    #define c89atomic_compare_and_swap_16(dst, expected, desired)   __sync_val_compare_and_swap(/;"	M
c89atomic_compare_and_swap_32	../ext/miniaudio.h	/^            #define c89atomic_compare_and_swap_32(dst, expected, desired) (c89atomic_uint32)_Int/;"	M
c89atomic_compare_and_swap_32	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint32 __stdcall c89atomic_compare_and_swap_32(vol/;"	f
c89atomic_compare_and_swap_32	../ext/miniaudio.h	/^        #define c89atomic_compare_and_swap_32(dst, expected, desired)   __sync_val_compare_and_s/;"	M
c89atomic_compare_and_swap_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 c89atomic_compare_and_swap_32(volatile c89atomi/;"	f
c89atomic_compare_and_swap_32	../ext/miniaudio.h	/^    #define c89atomic_compare_and_swap_32(dst, expected, desired)   __sync_val_compare_and_swap(/;"	M
c89atomic_compare_and_swap_64	../ext/miniaudio.h	/^            #define c89atomic_compare_and_swap_64(dst, expected, desired) (c89atomic_uint64)_Int/;"	M
c89atomic_compare_and_swap_64	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint64 __stdcall c89atomic_compare_and_swap_64(vol/;"	f
c89atomic_compare_and_swap_64	../ext/miniaudio.h	/^        #define c89atomic_compare_and_swap_64(dst, expected, desired)   __sync_val_compare_and_s/;"	M
c89atomic_compare_and_swap_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 c89atomic_compare_and_swap_64(volatile c89atomi/;"	f
c89atomic_compare_and_swap_64	../ext/miniaudio.h	/^    #define c89atomic_compare_and_swap_64(dst, expected, desired)   __sync_val_compare_and_swap(/;"	M
c89atomic_compare_and_swap_8	../ext/miniaudio.h	/^            #define c89atomic_compare_and_swap_8( dst, expected, desired) (c89atomic_uint8 )_Int/;"	M
c89atomic_compare_and_swap_8	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint8 __stdcall c89atomic_compare_and_swap_8(volat/;"	f
c89atomic_compare_and_swap_8	../ext/miniaudio.h	/^        #define c89atomic_compare_and_swap_8( dst, expected, desired)   __sync_val_compare_and_s/;"	M
c89atomic_compare_and_swap_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 c89atomic_compare_and_swap_8(volatile c89atomic_/;"	f
c89atomic_compare_and_swap_8	../ext/miniaudio.h	/^    #define c89atomic_compare_and_swap_8 (dst, expected, desired)   __sync_val_compare_and_swap(/;"	M
c89atomic_compare_and_swap_i16	../ext/miniaudio.h	/^#define c89atomic_compare_and_swap_i16(dst, expected, dedsired)         (c89atomic_int16)c89atom/;"	M
c89atomic_compare_and_swap_i32	../ext/miniaudio.h	/^#define c89atomic_compare_and_swap_i32(dst, expected, dedsired)         (c89atomic_int32)c89atom/;"	M
c89atomic_compare_and_swap_i64	../ext/miniaudio.h	/^#define c89atomic_compare_and_swap_i64(dst, expected, dedsired)         (c89atomic_int64)c89atom/;"	M
c89atomic_compare_and_swap_i8	../ext/miniaudio.h	/^#define c89atomic_compare_and_swap_i8( dst, expected, dedsired)         (c89atomic_int8 )c89atom/;"	M
c89atomic_compare_and_swap_ptr	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE void* c89atomic_compare_and_swap_ptr(volatile void** dst, void* expe/;"	f
c89atomic_compare_exchange_strong_16	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_16(dst, expected, desired)    c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_strong_32	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_32(dst, expected, desired)    c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_strong_64	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_64(dst, expected, desired)    c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_strong_8	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_8( dst, expected, desired)    c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_strong_explicit_16	../ext/miniaudio.h	/^        c89atomic_bool c89atomic_compare_exchange_strong_explicit_16(volatile c89atomic_uint16* /;"	f
c89atomic_compare_exchange_strong_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_compare_exchange_strong_explicit_16(dst, expected, desired, successOrder, /;"	M
c89atomic_compare_exchange_strong_explicit_32	../ext/miniaudio.h	/^        c89atomic_bool c89atomic_compare_exchange_strong_explicit_32(volatile c89atomic_uint32* /;"	f
c89atomic_compare_exchange_strong_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_compare_exchange_strong_explicit_32(dst, expected, desired, successOrder, /;"	M
c89atomic_compare_exchange_strong_explicit_64	../ext/miniaudio.h	/^        c89atomic_bool c89atomic_compare_exchange_strong_explicit_64(volatile c89atomic_uint64* /;"	f
c89atomic_compare_exchange_strong_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_compare_exchange_strong_explicit_64(dst, expected, desired, successOrder, /;"	M
c89atomic_compare_exchange_strong_explicit_8	../ext/miniaudio.h	/^        c89atomic_bool c89atomic_compare_exchange_strong_explicit_8(volatile c89atomic_uint8* ds/;"	f
c89atomic_compare_exchange_strong_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_compare_exchange_strong_explicit_8( dst, expected, desired, successOrder, /;"	M
c89atomic_compare_exchange_strong_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_explicit_i16(dst, expected, desired, successOrder, fai/;"	M
c89atomic_compare_exchange_strong_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_explicit_i32(dst, expected, desired, successOrder, fai/;"	M
c89atomic_compare_exchange_strong_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_explicit_i64(dst, expected, desired, successOrder, fai/;"	M
c89atomic_compare_exchange_strong_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_explicit_i8( dst, expected, desired, successOrder, fai/;"	M
c89atomic_compare_exchange_strong_explicit_ptr	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_bool c89atomic_compare_exchange_strong_explicit_ptr(volati/;"	f
c89atomic_compare_exchange_strong_i16	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_i16(dst, expected, desired)   c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_strong_i32	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_i32(dst, expected, desired)   c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_strong_i64	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_i64(dst, expected, desired)   c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_strong_i8	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_i8( dst, expected, desired)   c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_strong_ptr	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_strong_ptr(dst, expected, desired)   c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_weak_16	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_16( dst, expected, desired)     c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_weak_32	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_32( dst, expected, desired)     c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_weak_64	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_64( dst, expected, desired)     c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_weak_8	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_8(  dst, expected, desired)     c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_weak_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_compare_exchange_weak_explicit_16(dst, expected, desired, successOrder, fa/;"	M
c89atomic_compare_exchange_weak_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_compare_exchange_weak_explicit_32(dst, expected, desired, successOrder, fa/;"	M
c89atomic_compare_exchange_weak_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_compare_exchange_weak_explicit_64(dst, expected, desired, successOrder, fa/;"	M
c89atomic_compare_exchange_weak_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_compare_exchange_weak_explicit_8( dst, expected, desired, successOrder, fa/;"	M
c89atomic_compare_exchange_weak_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_explicit_i16(dst, expected, desired, successOrder, failu/;"	M
c89atomic_compare_exchange_weak_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_explicit_i32(dst, expected, desired, successOrder, failu/;"	M
c89atomic_compare_exchange_weak_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_explicit_i64(dst, expected, desired, successOrder, failu/;"	M
c89atomic_compare_exchange_weak_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_explicit_i8( dst, expected, desired, successOrder, failu/;"	M
c89atomic_compare_exchange_weak_explicit_ptr	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_bool c89atomic_compare_exchange_weak_explicit_ptr(volatile/;"	f
c89atomic_compare_exchange_weak_i16	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_i16(dst, expected, desired)     c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_weak_i32	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_i32(dst, expected, desired)     c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_weak_i64	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_i64(dst, expected, desired)     c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_weak_i8	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_i8( dst, expected, desired)     c89atomic_compare_exchan/;"	M
c89atomic_compare_exchange_weak_ptr	../ext/miniaudio.h	/^#define c89atomic_compare_exchange_weak_ptr(dst, expected, desired)     c89atomic_compare_exchan/;"	M
c89atomic_compiler_fence	../ext/miniaudio.h	/^    #define c89atomic_compiler_fence()                              __asm__ __volatile__("":::"m/;"	M
c89atomic_compiler_fence	../ext/miniaudio.h	/^    #define c89atomic_compiler_fence()      c89atomic_thread_fence(c89atomic_memory_order_seq_cs/;"	M
c89atomic_compiler_fence	../ext/miniaudio.h	/^    #define c89atomic_compiler_fence() __asm__ __volatile__("":::"memory")$/;"	M
c89atomic_exchange_16	../ext/miniaudio.h	/^#define c89atomic_exchange_16(dst, src)                                 c89atomic_exchange_expli/;"	M
c89atomic_exchange_32	../ext/miniaudio.h	/^#define c89atomic_exchange_32(dst, src)                                 c89atomic_exchange_expli/;"	M
c89atomic_exchange_64	../ext/miniaudio.h	/^#define c89atomic_exchange_64(dst, src)                                 c89atomic_exchange_expli/;"	M
c89atomic_exchange_8	../ext/miniaudio.h	/^#define c89atomic_exchange_8( dst, src)                                 c89atomic_exchange_expli/;"	M
c89atomic_exchange_explicit_16	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint16 __stdcall c89atomic_exchange_explicit_16(vo/;"	f
c89atomic_exchange_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 c89atomic_exchange_explicit_16(volatile c89atom/;"	f
c89atomic_exchange_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_exchange_explicit_16(dst, src, order)         __atomic_exchange_n(dst, src/;"	M
c89atomic_exchange_explicit_32	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint32 __stdcall c89atomic_exchange_explicit_32(vo/;"	f
c89atomic_exchange_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 c89atomic_exchange_explicit_32(volatile c89atom/;"	f
c89atomic_exchange_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_exchange_explicit_32(dst, src, order)         __atomic_exchange_n(dst, src/;"	M
c89atomic_exchange_explicit_64	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint64 __stdcall c89atomic_exchange_explicit_64(vo/;"	f
c89atomic_exchange_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 __stdcall c89atomic_exchange_explicit_64(volati/;"	f
c89atomic_exchange_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 c89atomic_exchange_explicit_64(volatile c89atom/;"	f
c89atomic_exchange_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_exchange_explicit_64(dst, src, order)         __atomic_exchange_n(dst, src/;"	M
c89atomic_exchange_explicit_8	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint8 __stdcall c89atomic_exchange_explicit_8(vola/;"	f
c89atomic_exchange_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 c89atomic_exchange_explicit_8(volatile c89atomic/;"	f
c89atomic_exchange_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_exchange_explicit_8( dst, src, order)         __atomic_exchange_n(dst, src/;"	M
c89atomic_exchange_explicit_f32	../ext/miniaudio.h	/^static C89ATOMIC_INLINE float c89atomic_exchange_explicit_f32(volatile float* dst, float src, c8/;"	f
c89atomic_exchange_explicit_f64	../ext/miniaudio.h	/^static C89ATOMIC_INLINE double c89atomic_exchange_explicit_f64(volatile double* dst, double src,/;"	f
c89atomic_exchange_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_exchange_explicit_i16(dst, src, order)                (c89atomic_int16)c89atom/;"	M
c89atomic_exchange_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_exchange_explicit_i32(dst, src, order)                (c89atomic_int32)c89atom/;"	M
c89atomic_exchange_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_exchange_explicit_i64(dst, src, order)                (c89atomic_int64)c89atom/;"	M
c89atomic_exchange_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_exchange_explicit_i8( dst, src, order)                (c89atomic_int8 )c89atom/;"	M
c89atomic_exchange_explicit_ptr	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE void* c89atomic_exchange_explicit_ptr(volatile void** dst, void* src/;"	f
c89atomic_exchange_f32	../ext/miniaudio.h	/^#define c89atomic_exchange_f32(dst, src)                                (float )c89atomic_exchan/;"	M
c89atomic_exchange_f64	../ext/miniaudio.h	/^#define c89atomic_exchange_f64(dst, src)                                (double)c89atomic_exchan/;"	M
c89atomic_exchange_i16	../ext/miniaudio.h	/^#define c89atomic_exchange_i16(dst, src)                                c89atomic_exchange_expli/;"	M
c89atomic_exchange_i32	../ext/miniaudio.h	/^#define c89atomic_exchange_i32(dst, src)                                c89atomic_exchange_expli/;"	M
c89atomic_exchange_i64	../ext/miniaudio.h	/^#define c89atomic_exchange_i64(dst, src)                                c89atomic_exchange_expli/;"	M
c89atomic_exchange_i8	../ext/miniaudio.h	/^#define c89atomic_exchange_i8( dst, src)                                c89atomic_exchange_expli/;"	M
c89atomic_exchange_ptr	../ext/miniaudio.h	/^#define c89atomic_exchange_ptr(dst, src)                                c89atomic_exchange_expli/;"	M
c89atomic_fetch_add_16	../ext/miniaudio.h	/^#define c89atomic_fetch_add_16(dst, src)                                c89atomic_fetch_add_expl/;"	M
c89atomic_fetch_add_32	../ext/miniaudio.h	/^#define c89atomic_fetch_add_32(dst, src)                                c89atomic_fetch_add_expl/;"	M
c89atomic_fetch_add_64	../ext/miniaudio.h	/^#define c89atomic_fetch_add_64(dst, src)                                c89atomic_fetch_add_expl/;"	M
c89atomic_fetch_add_8	../ext/miniaudio.h	/^#define c89atomic_fetch_add_8( dst, src)                                c89atomic_fetch_add_expl/;"	M
c89atomic_fetch_add_explicit_16	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint16 __stdcall c89atomic_fetch_add_explicit_16(v/;"	f
c89atomic_fetch_add_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 c89atomic_fetch_add_explicit_16(volatile c89ato/;"	f
c89atomic_fetch_add_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_fetch_add_explicit_16(dst, src, order)        __atomic_fetch_add(dst, src,/;"	M
c89atomic_fetch_add_explicit_32	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint32 __stdcall c89atomic_fetch_add_explicit_32(v/;"	f
c89atomic_fetch_add_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 c89atomic_fetch_add_explicit_32(volatile c89ato/;"	f
c89atomic_fetch_add_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_fetch_add_explicit_32(dst, src, order)        __atomic_fetch_add(dst, src,/;"	M
c89atomic_fetch_add_explicit_64	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint64 __stdcall c89atomic_fetch_add_explicit_64(v/;"	f
c89atomic_fetch_add_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 __stdcall c89atomic_fetch_add_explicit_64(volat/;"	f
c89atomic_fetch_add_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 c89atomic_fetch_add_explicit_64(volatile c89ato/;"	f
c89atomic_fetch_add_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_fetch_add_explicit_64(dst, src, order)        __atomic_fetch_add(dst, src,/;"	M
c89atomic_fetch_add_explicit_8	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE c89atomic_uint8 __stdcall c89atomic_fetch_add_explicit_8(vol/;"	f
c89atomic_fetch_add_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 c89atomic_fetch_add_explicit_8(volatile c89atomi/;"	f
c89atomic_fetch_add_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_fetch_add_explicit_8( dst, src, order)        __atomic_fetch_add(dst, src,/;"	M
c89atomic_fetch_add_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_add_explicit_i16(dst, src, order)               (c89atomic_int16)c89atom/;"	M
c89atomic_fetch_add_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_add_explicit_i32(dst, src, order)               (c89atomic_int32)c89atom/;"	M
c89atomic_fetch_add_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_add_explicit_i64(dst, src, order)               (c89atomic_int64)c89atom/;"	M
c89atomic_fetch_add_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_add_explicit_i8( dst, src, order)               (c89atomic_int8 )c89atom/;"	M
c89atomic_fetch_add_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_add_i16(dst, src)                               c89atomic_fetch_add_expl/;"	M
c89atomic_fetch_add_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_add_i32(dst, src)                               c89atomic_fetch_add_expl/;"	M
c89atomic_fetch_add_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_add_i64(dst, src)                               c89atomic_fetch_add_expl/;"	M
c89atomic_fetch_add_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_add_i8( dst, src)                               c89atomic_fetch_add_expl/;"	M
c89atomic_fetch_and_16	../ext/miniaudio.h	/^#define c89atomic_fetch_and_16(dst, src)                                c89atomic_fetch_and_expl/;"	M
c89atomic_fetch_and_32	../ext/miniaudio.h	/^#define c89atomic_fetch_and_32(dst, src)                                c89atomic_fetch_and_expl/;"	M
c89atomic_fetch_and_64	../ext/miniaudio.h	/^#define c89atomic_fetch_and_64(dst, src)                                c89atomic_fetch_and_expl/;"	M
c89atomic_fetch_and_8	../ext/miniaudio.h	/^#define c89atomic_fetch_and_8( dst, src)                                c89atomic_fetch_and_expl/;"	M
c89atomic_fetch_and_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 __stdcall c89atomic_fetch_and_explicit_16(volat/;"	f
c89atomic_fetch_and_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 c89atomic_fetch_and_explicit_16(volatile c89ato/;"	f
c89atomic_fetch_and_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_fetch_and_explicit_16(dst, src, order)        __atomic_fetch_and(dst, src,/;"	M
c89atomic_fetch_and_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 __stdcall c89atomic_fetch_and_explicit_32(volat/;"	f
c89atomic_fetch_and_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 c89atomic_fetch_and_explicit_32(volatile c89ato/;"	f
c89atomic_fetch_and_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_fetch_and_explicit_32(dst, src, order)        __atomic_fetch_and(dst, src,/;"	M
c89atomic_fetch_and_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 __stdcall c89atomic_fetch_and_explicit_64(volat/;"	f
c89atomic_fetch_and_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 c89atomic_fetch_and_explicit_64(volatile c89ato/;"	f
c89atomic_fetch_and_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_fetch_and_explicit_64(dst, src, order)        __atomic_fetch_and(dst, src,/;"	M
c89atomic_fetch_and_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 __stdcall c89atomic_fetch_and_explicit_8(volatil/;"	f
c89atomic_fetch_and_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 c89atomic_fetch_and_explicit_8(volatile c89atomi/;"	f
c89atomic_fetch_and_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_fetch_and_explicit_8( dst, src, order)        __atomic_fetch_and(dst, src,/;"	M
c89atomic_fetch_and_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_and_explicit_i16(dst, src, order)               (c89atomic_int16)c89atom/;"	M
c89atomic_fetch_and_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_and_explicit_i32(dst, src, order)               (c89atomic_int32)c89atom/;"	M
c89atomic_fetch_and_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_and_explicit_i64(dst, src, order)               (c89atomic_int64)c89atom/;"	M
c89atomic_fetch_and_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_and_explicit_i8( dst, src, order)               (c89atomic_int8 )c89atom/;"	M
c89atomic_fetch_and_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_and_i16(dst, src)                               c89atomic_fetch_and_expl/;"	M
c89atomic_fetch_and_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_and_i32(dst, src)                               c89atomic_fetch_and_expl/;"	M
c89atomic_fetch_and_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_and_i64(dst, src)                               c89atomic_fetch_and_expl/;"	M
c89atomic_fetch_and_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_and_i8( dst, src)                               c89atomic_fetch_and_expl/;"	M
c89atomic_fetch_or_16	../ext/miniaudio.h	/^#define c89atomic_fetch_or_16(dst, src)                                 c89atomic_fetch_or_expli/;"	M
c89atomic_fetch_or_32	../ext/miniaudio.h	/^#define c89atomic_fetch_or_32(dst, src)                                 c89atomic_fetch_or_expli/;"	M
c89atomic_fetch_or_64	../ext/miniaudio.h	/^#define c89atomic_fetch_or_64(dst, src)                                 c89atomic_fetch_or_expli/;"	M
c89atomic_fetch_or_8	../ext/miniaudio.h	/^#define c89atomic_fetch_or_8( dst, src)                                 c89atomic_fetch_or_expli/;"	M
c89atomic_fetch_or_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 __stdcall c89atomic_fetch_or_explicit_16(volati/;"	f
c89atomic_fetch_or_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 c89atomic_fetch_or_explicit_16(volatile c89atom/;"	f
c89atomic_fetch_or_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_fetch_or_explicit_16(dst, src, order)         __atomic_fetch_or(dst, src, /;"	M
c89atomic_fetch_or_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 __stdcall c89atomic_fetch_or_explicit_32(volati/;"	f
c89atomic_fetch_or_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 c89atomic_fetch_or_explicit_32(volatile c89atom/;"	f
c89atomic_fetch_or_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_fetch_or_explicit_32(dst, src, order)         __atomic_fetch_or(dst, src, /;"	M
c89atomic_fetch_or_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 __stdcall c89atomic_fetch_or_explicit_64(volati/;"	f
c89atomic_fetch_or_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 c89atomic_fetch_or_explicit_64(volatile c89atom/;"	f
c89atomic_fetch_or_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_fetch_or_explicit_64(dst, src, order)         __atomic_fetch_or(dst, src, /;"	M
c89atomic_fetch_or_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 __stdcall c89atomic_fetch_or_explicit_8(volatile/;"	f
c89atomic_fetch_or_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 c89atomic_fetch_or_explicit_8(volatile c89atomic/;"	f
c89atomic_fetch_or_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_fetch_or_explicit_8( dst, src, order)         __atomic_fetch_or(dst, src, /;"	M
c89atomic_fetch_or_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_or_explicit_i16(dst, src, order)                (c89atomic_int16)c89atom/;"	M
c89atomic_fetch_or_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_or_explicit_i32(dst, src, order)                (c89atomic_int32)c89atom/;"	M
c89atomic_fetch_or_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_or_explicit_i64(dst, src, order)                (c89atomic_int64)c89atom/;"	M
c89atomic_fetch_or_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_or_explicit_i8( dst, src, order)                (c89atomic_int8 )c89atom/;"	M
c89atomic_fetch_or_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_or_i16(dst, src)                                c89atomic_fetch_or_expli/;"	M
c89atomic_fetch_or_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_or_i32(dst, src)                                c89atomic_fetch_or_expli/;"	M
c89atomic_fetch_or_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_or_i64(dst, src)                                c89atomic_fetch_or_expli/;"	M
c89atomic_fetch_or_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_or_i8( dst, src)                                c89atomic_fetch_or_expli/;"	M
c89atomic_fetch_sub_16	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_16(dst, src)                                c89atomic_fetch_sub_expl/;"	M
c89atomic_fetch_sub_32	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_32(dst, src)                                c89atomic_fetch_sub_expl/;"	M
c89atomic_fetch_sub_64	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_64(dst, src)                                c89atomic_fetch_sub_expl/;"	M
c89atomic_fetch_sub_8	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_8( dst, src)                                c89atomic_fetch_sub_expl/;"	M
c89atomic_fetch_sub_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 __stdcall c89atomic_fetch_sub_explicit_16(volat/;"	f
c89atomic_fetch_sub_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 c89atomic_fetch_sub_explicit_16(volatile c89ato/;"	f
c89atomic_fetch_sub_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_fetch_sub_explicit_16(dst, src, order)        __atomic_fetch_sub(dst, src,/;"	M
c89atomic_fetch_sub_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 __stdcall c89atomic_fetch_sub_explicit_32(volat/;"	f
c89atomic_fetch_sub_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 c89atomic_fetch_sub_explicit_32(volatile c89ato/;"	f
c89atomic_fetch_sub_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_fetch_sub_explicit_32(dst, src, order)        __atomic_fetch_sub(dst, src,/;"	M
c89atomic_fetch_sub_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 __stdcall c89atomic_fetch_sub_explicit_64(volat/;"	f
c89atomic_fetch_sub_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 c89atomic_fetch_sub_explicit_64(volatile c89ato/;"	f
c89atomic_fetch_sub_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_fetch_sub_explicit_64(dst, src, order)        __atomic_fetch_sub(dst, src,/;"	M
c89atomic_fetch_sub_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 __stdcall c89atomic_fetch_sub_explicit_8(volatil/;"	f
c89atomic_fetch_sub_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 c89atomic_fetch_sub_explicit_8(volatile c89atomi/;"	f
c89atomic_fetch_sub_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_fetch_sub_explicit_8( dst, src, order)        __atomic_fetch_sub(dst, src,/;"	M
c89atomic_fetch_sub_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_explicit_i16(dst, src, order)               (c89atomic_int16)c89atom/;"	M
c89atomic_fetch_sub_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_explicit_i32(dst, src, order)               (c89atomic_int32)c89atom/;"	M
c89atomic_fetch_sub_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_explicit_i64(dst, src, order)               (c89atomic_int64)c89atom/;"	M
c89atomic_fetch_sub_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_explicit_i8( dst, src, order)               (c89atomic_int8 )c89atom/;"	M
c89atomic_fetch_sub_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_i16(dst, src)                               c89atomic_fetch_sub_expl/;"	M
c89atomic_fetch_sub_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_i32(dst, src)                               c89atomic_fetch_sub_expl/;"	M
c89atomic_fetch_sub_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_i64(dst, src)                               c89atomic_fetch_sub_expl/;"	M
c89atomic_fetch_sub_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_sub_i8( dst, src)                               c89atomic_fetch_sub_expl/;"	M
c89atomic_fetch_xor_16	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_16(dst, src)                                c89atomic_fetch_xor_expl/;"	M
c89atomic_fetch_xor_32	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_32(dst, src)                                c89atomic_fetch_xor_expl/;"	M
c89atomic_fetch_xor_64	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_64(dst, src)                                c89atomic_fetch_xor_expl/;"	M
c89atomic_fetch_xor_8	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_8( dst, src)                                c89atomic_fetch_xor_expl/;"	M
c89atomic_fetch_xor_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 __stdcall c89atomic_fetch_xor_explicit_16(volat/;"	f
c89atomic_fetch_xor_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 c89atomic_fetch_xor_explicit_16(volatile c89ato/;"	f
c89atomic_fetch_xor_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_fetch_xor_explicit_16(dst, src, order)        __atomic_fetch_xor(dst, src,/;"	M
c89atomic_fetch_xor_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 __stdcall c89atomic_fetch_xor_explicit_32(volat/;"	f
c89atomic_fetch_xor_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 c89atomic_fetch_xor_explicit_32(volatile c89ato/;"	f
c89atomic_fetch_xor_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_fetch_xor_explicit_32(dst, src, order)        __atomic_fetch_xor(dst, src,/;"	M
c89atomic_fetch_xor_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 __stdcall c89atomic_fetch_xor_explicit_64(volat/;"	f
c89atomic_fetch_xor_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 c89atomic_fetch_xor_explicit_64(volatile c89ato/;"	f
c89atomic_fetch_xor_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_fetch_xor_explicit_64(dst, src, order)        __atomic_fetch_xor(dst, src,/;"	M
c89atomic_fetch_xor_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 __stdcall c89atomic_fetch_xor_explicit_8(volatil/;"	f
c89atomic_fetch_xor_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 c89atomic_fetch_xor_explicit_8(volatile c89atomi/;"	f
c89atomic_fetch_xor_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_fetch_xor_explicit_8( dst, src, order)        __atomic_fetch_xor(dst, src,/;"	M
c89atomic_fetch_xor_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_explicit_i16(dst, src, order)               (c89atomic_int16)c89atom/;"	M
c89atomic_fetch_xor_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_explicit_i32(dst, src, order)               (c89atomic_int32)c89atom/;"	M
c89atomic_fetch_xor_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_explicit_i64(dst, src, order)               (c89atomic_int64)c89atom/;"	M
c89atomic_fetch_xor_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_explicit_i8( dst, src, order)               (c89atomic_int8 )c89atom/;"	M
c89atomic_fetch_xor_i16	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_i16(dst, src)                               c89atomic_fetch_xor_expl/;"	M
c89atomic_fetch_xor_i32	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_i32(dst, src)                               c89atomic_fetch_xor_expl/;"	M
c89atomic_fetch_xor_i64	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_i64(dst, src)                               c89atomic_fetch_xor_expl/;"	M
c89atomic_fetch_xor_i8	../ext/miniaudio.h	/^#define c89atomic_fetch_xor_i8( dst, src)                               c89atomic_fetch_xor_expl/;"	M
c89atomic_flag	../ext/miniaudio.h	/^        typedef c89atomic_uint32 c89atomic_flag;$/;"	t
c89atomic_flag	../ext/miniaudio.h	/^        typedef c89atomic_uint8 c89atomic_flag;$/;"	t
c89atomic_flag	../ext/miniaudio.h	/^    typedef c89atomic_uint8 c89atomic_flag;$/;"	t
c89atomic_flag_clear	../ext/miniaudio.h	/^#define c89atomic_flag_clear(ptr)                                       c89atomic_flag_clear_exp/;"	M
c89atomic_flag_clear_explicit	../ext/miniaudio.h	/^        #define c89atomic_flag_clear_explicit(ptr, order)           c89atomic_clear_explicit_32(/;"	M
c89atomic_flag_clear_explicit	../ext/miniaudio.h	/^        #define c89atomic_flag_clear_explicit(ptr, order)           c89atomic_clear_explicit_8(p/;"	M
c89atomic_flag_clear_explicit	../ext/miniaudio.h	/^    #define c89atomic_flag_clear_explicit(dst, order)               __atomic_clear(dst, order)$/;"	M
c89atomic_flag_clear_explicit	../ext/miniaudio.h	/^    #define c89atomic_flag_clear_explicit(ptr, order)               c89atomic_clear_explicit_8(p/;"	M
c89atomic_flag_test_and_set	../ext/miniaudio.h	/^#define c89atomic_flag_test_and_set(ptr)                                c89atomic_flag_test_and_/;"	M
c89atomic_flag_test_and_set_explicit	../ext/miniaudio.h	/^        #define c89atomic_flag_test_and_set_explicit(ptr, order)    (c89atomic_bool)c89atomic_te/;"	M
c89atomic_flag_test_and_set_explicit	../ext/miniaudio.h	/^    #define c89atomic_flag_test_and_set_explicit(dst, order)        (c89atomic_bool)__atomic_tes/;"	M
c89atomic_flag_test_and_set_explicit	../ext/miniaudio.h	/^    #define c89atomic_flag_test_and_set_explicit(ptr, order)        (c89atomic_bool)c89atomic_te/;"	M
c89atomic_h	../ext/miniaudio.h	/^#define c89atomic_h$/;"	M
c89atomic_int16	../ext/miniaudio.h	/^typedef   signed short          c89atomic_int16;$/;"	t
c89atomic_int32	../ext/miniaudio.h	/^typedef   signed int            c89atomic_int32;$/;"	t
c89atomic_int64	../ext/miniaudio.h	/^    typedef   signed __int64    c89atomic_int64;$/;"	t
c89atomic_int64	../ext/miniaudio.h	/^    typedef   signed long long  c89atomic_int64;$/;"	t
c89atomic_int8	../ext/miniaudio.h	/^typedef   signed char           c89atomic_int8;$/;"	t
c89atomic_is_lock_free_16	../ext/miniaudio.h	/^    #define c89atomic_is_lock_free_16(ptr)                          __atomic_is_lock_free(2, ptr/;"	M
c89atomic_is_lock_free_16	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_bool c89atomic_is_lock_free_16(volatile void* ptr)$/;"	f
c89atomic_is_lock_free_32	../ext/miniaudio.h	/^    #define c89atomic_is_lock_free_32(ptr)                          __atomic_is_lock_free(4, ptr/;"	M
c89atomic_is_lock_free_32	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_bool c89atomic_is_lock_free_32(volatile void* ptr)$/;"	f
c89atomic_is_lock_free_64	../ext/miniaudio.h	/^    #define c89atomic_is_lock_free_64(ptr)                          __atomic_is_lock_free(8, ptr/;"	M
c89atomic_is_lock_free_64	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_bool c89atomic_is_lock_free_64(volatile void* ptr)$/;"	f
c89atomic_is_lock_free_8	../ext/miniaudio.h	/^    #define c89atomic_is_lock_free_8(ptr)                           __atomic_is_lock_free(1, ptr/;"	M
c89atomic_is_lock_free_8	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_bool c89atomic_is_lock_free_8(volatile void* ptr)$/;"	f
c89atomic_is_lock_free_ptr	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_bool c89atomic_is_lock_free_ptr(volatile void** ptr)$/;"	f
c89atomic_load_16	../ext/miniaudio.h	/^#define c89atomic_load_16(ptr)                                          c89atomic_load_explicit_/;"	M
c89atomic_load_32	../ext/miniaudio.h	/^#define c89atomic_load_32(ptr)                                          c89atomic_load_explicit_/;"	M
c89atomic_load_64	../ext/miniaudio.h	/^#define c89atomic_load_64(ptr)                                          c89atomic_load_explicit_/;"	M
c89atomic_load_8	../ext/miniaudio.h	/^#define c89atomic_load_8( ptr)                                          c89atomic_load_explicit_/;"	M
c89atomic_load_explicit_16	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint16 c89atomic_load_explicit_16(volatile const c89at/;"	f
c89atomic_load_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_load_explicit_16(dst, order)                  __atomic_load_n(dst, order)$/;"	M
c89atomic_load_explicit_16	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_uint16 c89atomic_load_explicit_16(volatile const c89atomic/;"	f
c89atomic_load_explicit_32	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint32 c89atomic_load_explicit_32(volatile const c89at/;"	f
c89atomic_load_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_load_explicit_32(dst, order)                  __atomic_load_n(dst, order)$/;"	M
c89atomic_load_explicit_32	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_uint32 c89atomic_load_explicit_32(volatile const c89atomic/;"	f
c89atomic_load_explicit_64	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint64 c89atomic_load_explicit_64(volatile const c89at/;"	f
c89atomic_load_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_load_explicit_64(dst, order)                  __atomic_load_n(dst, order)$/;"	M
c89atomic_load_explicit_64	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_uint64 c89atomic_load_explicit_64(volatile const c89atomic/;"	f
c89atomic_load_explicit_8	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE c89atomic_uint8 c89atomic_load_explicit_8(volatile const c89atom/;"	f
c89atomic_load_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_load_explicit_8( dst, order)                  __atomic_load_n(dst, order)$/;"	M
c89atomic_load_explicit_8	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE c89atomic_uint8 c89atomic_load_explicit_8(volatile const c89atomic_u/;"	f
c89atomic_load_explicit_f32	../ext/miniaudio.h	/^static C89ATOMIC_INLINE float c89atomic_load_explicit_f32(volatile const float* ptr, c89atomic_m/;"	f
c89atomic_load_explicit_f64	../ext/miniaudio.h	/^static C89ATOMIC_INLINE double c89atomic_load_explicit_f64(volatile const double* ptr, c89atomic/;"	f
c89atomic_load_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_load_explicit_i16(ptr, order)                         (c89atomic_int16)c89atom/;"	M
c89atomic_load_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_load_explicit_i32(ptr, order)                         (c89atomic_int32)c89atom/;"	M
c89atomic_load_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_load_explicit_i64(ptr, order)                         (c89atomic_int64)c89atom/;"	M
c89atomic_load_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_load_explicit_i8( ptr, order)                         (c89atomic_int8 )c89atom/;"	M
c89atomic_load_explicit_ptr	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE void* c89atomic_load_explicit_ptr(volatile void** ptr, c89atomic_mem/;"	f
c89atomic_load_f32	../ext/miniaudio.h	/^#define c89atomic_load_f32(ptr)                                         (float )c89atomic_load_e/;"	M
c89atomic_load_f64	../ext/miniaudio.h	/^#define c89atomic_load_f64(ptr)                                         (double)c89atomic_load_e/;"	M
c89atomic_load_i16	../ext/miniaudio.h	/^#define c89atomic_load_i16(ptr)                                         c89atomic_load_explicit_/;"	M
c89atomic_load_i32	../ext/miniaudio.h	/^#define c89atomic_load_i32(ptr)                                         c89atomic_load_explicit_/;"	M
c89atomic_load_i64	../ext/miniaudio.h	/^#define c89atomic_load_i64(ptr)                                         c89atomic_load_explicit_/;"	M
c89atomic_load_i8	../ext/miniaudio.h	/^#define c89atomic_load_i8( ptr)                                         c89atomic_load_explicit_/;"	M
c89atomic_load_ptr	../ext/miniaudio.h	/^#define c89atomic_load_ptr(ptr)                                         c89atomic_load_explicit_/;"	M
c89atomic_memory_order	../ext/miniaudio.h	/^typedef int                     c89atomic_memory_order;$/;"	t
c89atomic_memory_order_acq_rel	../ext/miniaudio.h	/^    #define c89atomic_memory_order_acq_rel                          __ATOMIC_ACQ_REL$/;"	M
c89atomic_memory_order_acq_rel	../ext/miniaudio.h	/^    #define c89atomic_memory_order_acq_rel  4$/;"	M
c89atomic_memory_order_acq_rel	../ext/miniaudio.h	/^    #define c89atomic_memory_order_acq_rel  5$/;"	M
c89atomic_memory_order_acquire	../ext/miniaudio.h	/^    #define c89atomic_memory_order_acquire                          __ATOMIC_ACQUIRE$/;"	M
c89atomic_memory_order_acquire	../ext/miniaudio.h	/^    #define c89atomic_memory_order_acquire  2$/;"	M
c89atomic_memory_order_acquire	../ext/miniaudio.h	/^    #define c89atomic_memory_order_acquire  3$/;"	M
c89atomic_memory_order_consume	../ext/miniaudio.h	/^    #define c89atomic_memory_order_consume                          __ATOMIC_CONSUME$/;"	M
c89atomic_memory_order_consume	../ext/miniaudio.h	/^    #define c89atomic_memory_order_consume  1$/;"	M
c89atomic_memory_order_consume	../ext/miniaudio.h	/^    #define c89atomic_memory_order_consume  2$/;"	M
c89atomic_memory_order_relaxed	../ext/miniaudio.h	/^    #define c89atomic_memory_order_relaxed                          __ATOMIC_RELAXED$/;"	M
c89atomic_memory_order_relaxed	../ext/miniaudio.h	/^    #define c89atomic_memory_order_relaxed  0$/;"	M
c89atomic_memory_order_relaxed	../ext/miniaudio.h	/^    #define c89atomic_memory_order_relaxed  1$/;"	M
c89atomic_memory_order_release	../ext/miniaudio.h	/^    #define c89atomic_memory_order_release                          __ATOMIC_RELEASE$/;"	M
c89atomic_memory_order_release	../ext/miniaudio.h	/^    #define c89atomic_memory_order_release  3$/;"	M
c89atomic_memory_order_release	../ext/miniaudio.h	/^    #define c89atomic_memory_order_release  4$/;"	M
c89atomic_memory_order_seq_cst	../ext/miniaudio.h	/^    #define c89atomic_memory_order_seq_cst                          __ATOMIC_SEQ_CST$/;"	M
c89atomic_memory_order_seq_cst	../ext/miniaudio.h	/^    #define c89atomic_memory_order_seq_cst  5$/;"	M
c89atomic_memory_order_seq_cst	../ext/miniaudio.h	/^    #define c89atomic_memory_order_seq_cst  6$/;"	M
c89atomic_signal_fence	../ext/miniaudio.h	/^    #define c89atomic_signal_fence(order)                           __atomic_signal_fence(order)$/;"	M
c89atomic_signal_fence	../ext/miniaudio.h	/^    #define c89atomic_signal_fence(order)                           c89atomic_thread_fence(order/;"	M
c89atomic_signal_fence	../ext/miniaudio.h	/^    #define c89atomic_signal_fence(order)   c89atomic_thread_fence(order)$/;"	M
c89atomic_spinlock	../ext/miniaudio.h	/^typedef c89atomic_flag c89atomic_spinlock;$/;"	t
c89atomic_spinlock_lock	../ext/miniaudio.h	/^static C89ATOMIC_INLINE void c89atomic_spinlock_lock(volatile c89atomic_spinlock* pSpinlock)$/;"	f
c89atomic_spinlock_unlock	../ext/miniaudio.h	/^static C89ATOMIC_INLINE void c89atomic_spinlock_unlock(volatile c89atomic_spinlock* pSpinlock)$/;"	f
c89atomic_store_16	../ext/miniaudio.h	/^#define c89atomic_store_16(dst, src)                                    c89atomic_store_explicit/;"	M
c89atomic_store_32	../ext/miniaudio.h	/^#define c89atomic_store_32(dst, src)                                    c89atomic_store_explicit/;"	M
c89atomic_store_64	../ext/miniaudio.h	/^#define c89atomic_store_64(dst, src)                                    c89atomic_store_explicit/;"	M
c89atomic_store_8	../ext/miniaudio.h	/^#define c89atomic_store_8( dst, src)                                    c89atomic_store_explicit/;"	M
c89atomic_store_explicit_16	../ext/miniaudio.h	/^        #define c89atomic_store_explicit_16(dst, src, order) (void)c89atomic_exchange_explicit_1/;"	M
c89atomic_store_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_store_explicit_16(dst, src, order)            (void)c89atomic_exchange_exp/;"	M
c89atomic_store_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_store_explicit_16(dst, src, order)            __atomic_store_n(dst, src, o/;"	M
c89atomic_store_explicit_32	../ext/miniaudio.h	/^        #define c89atomic_store_explicit_32(dst, src, order) (void)c89atomic_exchange_explicit_3/;"	M
c89atomic_store_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_store_explicit_32(dst, src, order)            (void)c89atomic_exchange_exp/;"	M
c89atomic_store_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_store_explicit_32(dst, src, order)            __atomic_store_n(dst, src, o/;"	M
c89atomic_store_explicit_64	../ext/miniaudio.h	/^        #define c89atomic_store_explicit_64(dst, src, order) (void)c89atomic_exchange_explicit_6/;"	M
c89atomic_store_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_store_explicit_64(dst, src, order)            (void)c89atomic_exchange_exp/;"	M
c89atomic_store_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_store_explicit_64(dst, src, order)            __atomic_store_n(dst, src, o/;"	M
c89atomic_store_explicit_8	../ext/miniaudio.h	/^        #define c89atomic_store_explicit_8( dst, src, order) (void)c89atomic_exchange_explicit_8/;"	M
c89atomic_store_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_store_explicit_8( dst, src, order)            (void)c89atomic_exchange_exp/;"	M
c89atomic_store_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_store_explicit_8( dst, src, order)            __atomic_store_n(dst, src, o/;"	M
c89atomic_store_explicit_f32	../ext/miniaudio.h	/^static C89ATOMIC_INLINE void c89atomic_store_explicit_f32(volatile float* dst, float src, c89ato/;"	f
c89atomic_store_explicit_f64	../ext/miniaudio.h	/^static C89ATOMIC_INLINE void c89atomic_store_explicit_f64(volatile double* dst, double src, c89a/;"	f
c89atomic_store_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_store_explicit_i16(dst, src, order)                   (c89atomic_int16)c89atom/;"	M
c89atomic_store_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_store_explicit_i32(dst, src, order)                   (c89atomic_int32)c89atom/;"	M
c89atomic_store_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_store_explicit_i64(dst, src, order)                   (c89atomic_int64)c89atom/;"	M
c89atomic_store_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_store_explicit_i8( dst, src, order)                   (c89atomic_int8 )c89atom/;"	M
c89atomic_store_explicit_ptr	../ext/miniaudio.h	/^    static C89ATOMIC_INLINE void c89atomic_store_explicit_ptr(volatile void** dst, void* src, c8/;"	f
c89atomic_store_f32	../ext/miniaudio.h	/^#define c89atomic_store_f32(dst, src)                                   c89atomic_store_explicit/;"	M
c89atomic_store_f64	../ext/miniaudio.h	/^#define c89atomic_store_f64(dst, src)                                   c89atomic_store_explicit/;"	M
c89atomic_store_i16	../ext/miniaudio.h	/^#define c89atomic_store_i16(dst, src)                                   c89atomic_store_explicit/;"	M
c89atomic_store_i32	../ext/miniaudio.h	/^#define c89atomic_store_i32(dst, src)                                   c89atomic_store_explicit/;"	M
c89atomic_store_i64	../ext/miniaudio.h	/^#define c89atomic_store_i64(dst, src)                                   c89atomic_store_explicit/;"	M
c89atomic_store_i8	../ext/miniaudio.h	/^#define c89atomic_store_i8( dst, src)                                   c89atomic_store_explicit/;"	M
c89atomic_store_ptr	../ext/miniaudio.h	/^#define c89atomic_store_ptr(dst, src)                                   c89atomic_store_explicit/;"	M
c89atomic_test_and_set_16	../ext/miniaudio.h	/^#define c89atomic_test_and_set_16(ptr)                                  c89atomic_test_and_set_e/;"	M
c89atomic_test_and_set_32	../ext/miniaudio.h	/^#define c89atomic_test_and_set_32(ptr)                                  c89atomic_test_and_set_e/;"	M
c89atomic_test_and_set_64	../ext/miniaudio.h	/^#define c89atomic_test_and_set_64(ptr)                                  c89atomic_test_and_set_e/;"	M
c89atomic_test_and_set_8	../ext/miniaudio.h	/^#define c89atomic_test_and_set_8( ptr)                                  c89atomic_test_and_set_e/;"	M
c89atomic_test_and_set_explicit_16	../ext/miniaudio.h	/^        #define c89atomic_test_and_set_explicit_16(dst, order) c89atomic_exchange_explicit_16(ds/;"	M
c89atomic_test_and_set_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_test_and_set_explicit_16(dst, order)          __atomic_exchange_n(dst, 1, /;"	M
c89atomic_test_and_set_explicit_16	../ext/miniaudio.h	/^    #define c89atomic_test_and_set_explicit_16(dst, order)          c89atomic_exchange_explicit_/;"	M
c89atomic_test_and_set_explicit_32	../ext/miniaudio.h	/^        #define c89atomic_test_and_set_explicit_32(dst, order) c89atomic_exchange_explicit_32(ds/;"	M
c89atomic_test_and_set_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_test_and_set_explicit_32(dst, order)          __atomic_exchange_n(dst, 1, /;"	M
c89atomic_test_and_set_explicit_32	../ext/miniaudio.h	/^    #define c89atomic_test_and_set_explicit_32(dst, order)          c89atomic_exchange_explicit_/;"	M
c89atomic_test_and_set_explicit_64	../ext/miniaudio.h	/^        #define c89atomic_test_and_set_explicit_64(dst, order) c89atomic_exchange_explicit_64(ds/;"	M
c89atomic_test_and_set_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_test_and_set_explicit_64(dst, order)          __atomic_exchange_n(dst, 1, /;"	M
c89atomic_test_and_set_explicit_64	../ext/miniaudio.h	/^    #define c89atomic_test_and_set_explicit_64(dst, order)          c89atomic_exchange_explicit_/;"	M
c89atomic_test_and_set_explicit_8	../ext/miniaudio.h	/^        #define c89atomic_test_and_set_explicit_8( dst, order) c89atomic_exchange_explicit_8 (ds/;"	M
c89atomic_test_and_set_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_test_and_set_explicit_8( dst, order)          __atomic_exchange_n(dst, 1, /;"	M
c89atomic_test_and_set_explicit_8	../ext/miniaudio.h	/^    #define c89atomic_test_and_set_explicit_8( dst, order)          c89atomic_exchange_explicit_/;"	M
c89atomic_test_and_set_explicit_i16	../ext/miniaudio.h	/^#define c89atomic_test_and_set_explicit_i16(ptr, order)                 (c89atomic_int16)c89atom/;"	M
c89atomic_test_and_set_explicit_i32	../ext/miniaudio.h	/^#define c89atomic_test_and_set_explicit_i32(ptr, order)                 (c89atomic_int32)c89atom/;"	M
c89atomic_test_and_set_explicit_i64	../ext/miniaudio.h	/^#define c89atomic_test_and_set_explicit_i64(ptr, order)                 (c89atomic_int64)c89atom/;"	M
c89atomic_test_and_set_explicit_i8	../ext/miniaudio.h	/^#define c89atomic_test_and_set_explicit_i8( ptr, order)                 (c89atomic_int8 )c89atom/;"	M
c89atomic_test_and_set_i16	../ext/miniaudio.h	/^#define c89atomic_test_and_set_i16(ptr)                                 c89atomic_test_and_set_e/;"	M
c89atomic_test_and_set_i32	../ext/miniaudio.h	/^#define c89atomic_test_and_set_i32(ptr)                                 c89atomic_test_and_set_e/;"	M
c89atomic_test_and_set_i64	../ext/miniaudio.h	/^#define c89atomic_test_and_set_i64(ptr)                                 c89atomic_test_and_set_e/;"	M
c89atomic_test_and_set_i8	../ext/miniaudio.h	/^#define c89atomic_test_and_set_i8( ptr)                                 c89atomic_test_and_set_e/;"	M
c89atomic_thread_fence	../ext/miniaudio.h	/^            #define c89atomic_thread_fence(order)   __faststorefence(), (void)order$/;"	M
c89atomic_thread_fence	../ext/miniaudio.h	/^            #define c89atomic_thread_fence(order) __asm__ __volatile__("lock; addl $0, (%%esp)" /;"	M
c89atomic_thread_fence	../ext/miniaudio.h	/^            #define c89atomic_thread_fence(order) __asm__ __volatile__("lock; addq $0, (%%rsp)" /;"	M
c89atomic_thread_fence	../ext/miniaudio.h	/^            static C89ATOMIC_INLINE void c89atomic_thread_fence(c89atomic_memory_order order)$/;"	f
c89atomic_thread_fence	../ext/miniaudio.h	/^        #define c89atomic_thread_fence(order) __sync_synchronize(), (void)order$/;"	M
c89atomic_thread_fence	../ext/miniaudio.h	/^        static C89ATOMIC_INLINE void __stdcall c89atomic_thread_fence(c89atomic_memory_order ord/;"	f
c89atomic_thread_fence	../ext/miniaudio.h	/^    #define c89atomic_thread_fence(order)                           __atomic_thread_fence(order)$/;"	M
c89atomic_uint16	../ext/miniaudio.h	/^typedef unsigned short          c89atomic_uint16;$/;"	t
c89atomic_uint32	../ext/miniaudio.h	/^typedef unsigned int            c89atomic_uint32;$/;"	t
c89atomic_uint64	../ext/miniaudio.h	/^    typedef unsigned __int64    c89atomic_uint64;$/;"	t
c89atomic_uint64	../ext/miniaudio.h	/^    typedef unsigned long long  c89atomic_uint64;$/;"	t
c89atomic_uint8	../ext/miniaudio.h	/^typedef unsigned char           c89atomic_uint8;$/;"	t
cachedDataCapInFramesPerBus	../ext/miniaudio.h	/^    ma_uint16 cachedDataCapInFramesPerBus;  \/* The capacity of the input data cache in frames, /;"	E	struct:ma_node_base
cachedFrameCountIn	../ext/miniaudio.h	/^    ma_uint16 cachedFrameCountIn;$/;"	E	struct:ma_node_base
cachedFrameCountOut	../ext/miniaudio.h	/^    ma_uint16 cachedFrameCountOut;$/;"	E	struct:ma_node_base
callback	../ext/miniaudio.h	/^    ma_enum_devices_callback_proc callback;$/;"	E	struct:ma_IDirectSoundNotify
callbackCount	../ext/miniaudio.h	/^    ma_uint32 callbackCount;$/;"	E
callbacks	../ext/miniaudio.h	/^    ma_log_callback callbacks[MA_MAX_LOG_CALLBACKS];$/;"	E
capacity	../ext/miniaudio.h	/^    ma_uint32 capacity;             \/* The maximum number of jobs that can fit in the queue at /;"	E	struct:ma_job
capacity	../ext/miniaudio.h	/^    ma_uint32 capacity;    \/* The number of slots to make available. *\/$/;"	E	struct:ma_resampler_config
capacity	../ext/miniaudio.h	/^    ma_uint32 capacity; \/* The maximum number of jobs that can fit in the queue at a time. *\/$/;"	E	struct:ma_job
capacity	../ext/miniaudio.h	/^    ma_uint32 capacity;$/;"	E	struct:ma_resampler_config
capture	../ext/miniaudio.h	/^    } capture;$/;"	E	struct:ma_device
capture	../ext/miniaudio.h	/^    } capture;$/;"	E	struct:ma_device_config
cb	../ext/miniaudio.h	/^    ma_async_notification_callbacks cb;$/;"	E	struct:ma_resampler_config
cb	../ext/miniaudio.h	/^    ma_vfs_callbacks cb;$/;"	E	struct:ma_paged_audio_buffer_page
cbSize	../ext/miniaudio.h	/^    ma_uint32 cbSize;$/;"	E
cbwh	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveInAddBuffer)(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);$/;"	t	struct:ma_IDirectSoundNotify
cbwh	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveInPrepareHeader)(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);$/;"	t	struct:ma_IDirectSoundNotify
cbwh	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveInUnprepareHeader)(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);$/;"	t	struct:ma_IDirectSoundNotify
cbwh	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveOutPrepareHeader)(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);$/;"	t	struct:ma_IDirectSoundNotify
cbwh	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveOutUnprepareHeader)(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh/;"	t	struct:ma_IDirectSoundNotify
cbwh	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveOutWrite)(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);$/;"	t	struct:ma_IDirectSoundNotify
cbwic	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveInGetDevCapsA)(ma_uintptr uDeviceID, LPWAVEINCAPSA pwic, U/;"	t	struct:ma_IDirectSoundNotify
cbwoc	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveOutGetDevCapsA)(ma_uintptr uDeviceID, LPWAVEOUTCAPSA pwoc,/;"	t	struct:ma_IDirectSoundNotify
cchMax	../ext/miniaudio.h	/^typedef int     (WINAPI * MA_PFN_StringFromGUID2)(const GUID* const rguid, LPOLESTR lpsz, int cc/;"	t
channelConverter	../ext/miniaudio.h	/^    ma_channel_converter channelConverter;$/;"	E	struct:ma_resampler_config
channelMap	../ext/miniaudio.h	/^    ma_channel channelMap[MA_MAX_CHANNELS];$/;"	E	struct:ma_device_config
channelMapIn	../ext/miniaudio.h	/^    ma_channel channelMapIn[MA_MAX_CHANNELS];$/;"	E	struct:ma_completion_handler_uwp
channelMapOut	../ext/miniaudio.h	/^    ma_channel channelMapOut[MA_MAX_CHANNELS];$/;"	E	struct:ma_completion_handler_uwp
channelMixMode	../ext/miniaudio.h	/^    ma_channel_mix_mode channelMixMode;$/;"	E
channelMixMode	../ext/miniaudio.h	/^    ma_channel_mix_mode channelMixMode;$/;"	E	struct:ma_resampler_config
channels	../ext/miniaudio.h	/^    ma_uint32 channels;                         \/* The number of channels to use when mixing an/;"	E	struct:ma_sound_inlined
channels	../ext/miniaudio.h	/^    ma_uint32 channels;    \/* Set to 0 to use the stream's internal channels. *\/$/;"	E
channels	../ext/miniaudio.h	/^    ma_uint32 channels;$/;"	E
channels	../ext/miniaudio.h	/^    ma_uint32 channels;$/;"	E	struct:ma_device
channels	../ext/miniaudio.h	/^    ma_uint32 channels;$/;"	E	struct:ma_device_config
channels	../ext/miniaudio.h	/^    ma_uint32 channels;$/;"	E	struct:ma_encoder
channels	../ext/miniaudio.h	/^    ma_uint32 channels;$/;"	E	struct:ma_node_base
channels	../ext/miniaudio.h	/^    ma_uint32 channels;$/;"	E	struct:ma_paged_audio_buffer_page
channels	../ext/miniaudio.h	/^    ma_uint32 channels;$/;"	E	struct:ma_resampler_config
channels	../ext/miniaudio.h	/^    ma_uint8 channels;                                      \/* The number of channels in the au/;"	E	struct:ma_node_output_bus
channels	../ext/miniaudio.h	/^    ma_uint8 channels;                  \/* The number of channels in the audio stream for this /;"	E	struct:ma_node_input_bus
channelsIn	../ext/miniaudio.h	/^    ma_uint32 channelsIn;                       \/* Ignored if using a data source as input (the/;"	E
channelsIn	../ext/miniaudio.h	/^    ma_uint32 channelsIn;$/;"	E
channelsIn	../ext/miniaudio.h	/^    ma_uint32 channelsIn;$/;"	E	struct:ma_completion_handler_uwp
channelsIn	../ext/miniaudio.h	/^    ma_uint32 channelsIn;$/;"	E	struct:ma_resampler_config
channelsOut	../ext/miniaudio.h	/^    ma_uint32 channelsOut;                      \/* Set this to 0 (default) to use the engine's /;"	E
channelsOut	../ext/miniaudio.h	/^    ma_uint32 channelsOut;$/;"	E
channelsOut	../ext/miniaudio.h	/^    ma_uint32 channelsOut;$/;"	E	struct:ma_completion_handler_uwp
channelsOut	../ext/miniaudio.h	/^    ma_uint32 channelsOut;$/;"	E	struct:ma_resampler_config
clearOnWriteAcquire	../ext/miniaudio.h	/^    ma_bool8 clearOnWriteAcquire;               \/* When set, clears the acquired write buffer b/;"	E	struct:ma_resampler_config
code	../ext/miniaudio.h	/^    int code;$/;"	E	struct:ma_context_config
cond	../ext/miniaudio.h	/^    ma_pthread_cond_t cond;$/;"	E
coneInnerAngleInRadians	../ext/miniaudio.h	/^    float coneInnerAngleInRadians;$/;"	E
coneOuterAngleInRadians	../ext/miniaudio.h	/^    float coneOuterAngleInRadians;$/;"	E
coneOuterGain	../ext/miniaudio.h	/^    float coneOuterGain;$/;"	E
config	../ext/miniaudio.h	/^    ma_delay_config config;$/;"	E
config	../ext/miniaudio.h	/^    ma_encoder_config config;$/;"	E	struct:ma_encoder
config	../ext/miniaudio.h	/^    ma_fader_config config;$/;"	E
config	../ext/miniaudio.h	/^    ma_gainer_config config;$/;"	E
config	../ext/miniaudio.h	/^    ma_linear_resampler_config config;$/;"	E
config	../ext/miniaudio.h	/^    ma_noise_config config;$/;"	E	struct:ma_encoder
config	../ext/miniaudio.h	/^    ma_resource_manager_config config;$/;"	E	struct:ma_resource_manager
config	../ext/miniaudio.h	/^    ma_spatializer_listener_config config;$/;"	E
config	../ext/miniaudio.h	/^    ma_waveform_config config;$/;"	E	struct:ma_encoder
consumedFrameCountIn	../ext/miniaudio.h	/^    ma_uint16 consumedFrameCountIn;$/;"	E	struct:ma_node_base
conversionPath	../ext/miniaudio.h	/^    ma_channel_conversion_path conversionPath;$/;"	E	struct:ma_resampler_config
converter	../ext/miniaudio.h	/^    ma_data_converter converter;    \/* Data conversion is achieved by running frames through th/;"	E	struct:ma_decoder
coreaudio	../ext/miniaudio.h	/^    } coreaudio;$/;"	E	struct:ma_context_config
coreaudio	../ext/miniaudio.h	/^    } coreaudio;$/;"	E	struct:ma_device_config
count	../ext/miniaudio.h	/^    ma_uint32 count;                    \/* Allocation count. *\/$/;"	E	struct:ma_resampler_config
counter	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) counter;$/;"	E	struct:ma_completion_handler_uwp
counter	../ext/miniaudio.h	/^    ma_int64 counter;$/;"	t
counter	../ext/miniaudio.h	/^    ma_uint32 counter;$/;"	E	struct:ma_job
counter	../ext/miniaudio.h	/^    ma_uint32 counter;$/;"	E	struct:ma_resampler_config
currentPageIndex	../ext/miniaudio.h	/^    ma_uint32 currentPageIndex;                 \/* Toggles between 0 and 1. Index 0 is the firs/;"	E	struct:ma_resource_manager_data_stream
cursor	../ext/miniaudio.h	/^    ma_uint32 cursor;               \/* Feedback is written to this cursor. Always equal or in f/;"	E
cursor	../ext/miniaudio.h	/^    ma_uint64 cursor;$/;"	E	struct:ma_device
cursorInFrames	../ext/miniaudio.h	/^    ma_uint64 cursorInFrames;   \/* The current time in frames. Incremented by ma_fader_process_/;"	E
custom	../ext/miniaudio.h	/^    ma_backend_callbacks custom;$/;"	E	struct:ma_context_config
customBackendCount	../ext/miniaudio.h	/^    ma_uint32 customBackendCount;$/;"	E
customDecodingBackendCount	../ext/miniaudio.h	/^    ma_uint32 customDecodingBackendCount;$/;"	E
cutoffFrequency	../ext/miniaudio.h	/^    double cutoffFrequency;$/;"	E
data	../ext/miniaudio.h	/^    ma_resource_manager_data_supply data;$/;"	E	struct:ma_resource_manager_data_buffer_node
data	../ext/miniaudio.h	/^    } data;$/;"	E	struct:ma_context_config
data	../ext/miniaudio.h	/^    } data;$/;"	E	struct:ma_decoder
data	../ext/miniaudio.h	/^    } data;$/;"	E	struct:ma_encoder
data	../ext/miniaudio.h	/^    } data;$/;"	E	struct:ma_job
dataBufferBSTLock	../ext/miniaudio.h	/^    ma_mutex dataBufferBSTLock;                                     \/* For synchronizing access/;"	E	struct:ma_resource_manager
dataCallback	../ext/miniaudio.h	/^    ma_device_data_proc dataCallback;$/;"	E	struct:ma_device_config
decay	../ext/miniaudio.h	/^    float decay;                \/* 0..1. Default = 0 (no feedback). Feedback decay. Use this fo/;"	E
decodedChannels	../ext/miniaudio.h	/^    ma_uint32 decodedChannels;      \/* The decoded channel count to use. Set to 0 (default) to /;"	E
decodedFormat	../ext/miniaudio.h	/^    ma_format decodedFormat;        \/* The decoded format to use. Set to ma_format_unknown (def/;"	E
decodedSampleRate	../ext/miniaudio.h	/^    ma_uint32 decodedSampleRate;    \/* the decoded sample rate to use. Set to 0 (default) to us/;"	E
decoder	../ext/miniaudio.h	/^    ma_decoder decoder;                         \/* Used for filling pages with data. This is on/;"	E	struct:ma_resource_manager_data_stream
defaultVFS	../ext/miniaudio.h	/^    ma_default_vfs defaultVFS;                                      \/* Only used if a custom VF/;"	E	struct:ma_resource_manager
delay	../ext/miniaudio.h	/^    ma_delay delay;$/;"	E
delay	../ext/miniaudio.h	/^    ma_delay_config delay;$/;"	E
delayInFrames	../ext/miniaudio.h	/^    ma_uint32 delayInFrames;$/;"	E
delayStart	../ext/miniaudio.h	/^    ma_bool32 delayStart;       \/* Set to true to delay the start of the output; false otherwis/;"	E
deviceName	../ext/miniaudio.h	/^    char deviceName[256];$/;"	E	struct:ma_completion_handler_uwp
deviceType	../ext/miniaudio.h	/^    ma_device_type deviceType;$/;"	E	struct:ma_IDirectSoundNotify
deviceType	../ext/miniaudio.h	/^    ma_device_type deviceType;$/;"	E	struct:ma_device_config
direction	../ext/miniaudio.h	/^    ma_vec3f direction; \/* The direction the listener is facing. The world up vector is config./;"	E
direction	../ext/miniaudio.h	/^    ma_vec3f direction;$/;"	E
directionalAttenuationFactor	../ext/miniaudio.h	/^    float directionalAttenuationFactor; \/* Set to 0 to disable directional attenuation. *\/$/;"	E
ditherMode	../ext/miniaudio.h	/^    ma_dither_mode ditherMode;$/;"	E
ditherMode	../ext/miniaudio.h	/^    ma_dither_mode ditherMode;$/;"	E	struct:ma_resampler_config
done	../ext/miniaudio.h	/^    ma_resource_manager_pipeline_stage_notification done;    \/* Decoding fully completed. *\/$/;"	E
dopplerFactor	../ext/miniaudio.h	/^    float dopplerFactor;                \/* Set to 0 to disable doppler effect. *\/$/;"	E
dopplerPitch	../ext/miniaudio.h	/^    float dopplerPitch; \/* Will be updated by ma_spatializer_process_pcm_frames() and can be us/;"	E
dry	../ext/miniaudio.h	/^    float dry;                  \/* 0..1. Default = 1. *\/$/;"	E
ds	../ext/miniaudio.h	/^    ma_data_source_base ds;                     \/* Base data source. A data stream is a data so/;"	E	struct:ma_resource_manager_data_stream
ds	../ext/miniaudio.h	/^    ma_data_source_base ds;$/;"	E	struct:ma_decoder
ds	../ext/miniaudio.h	/^    ma_data_source_base ds;$/;"	E	struct:ma_device
ds	../ext/miniaudio.h	/^    ma_data_source_base ds;$/;"	E	struct:ma_encoder
ds	../ext/miniaudio.h	/^    ma_data_source_base ds;$/;"	E	struct:ma_paged_audio_buffer_page
ds	../ext/miniaudio.h	/^    ma_data_source_vtable ds;$/;"	E	struct:ma_encoder
duplexRB	../ext/miniaudio.h	/^    ma_duplex_rb duplexRB;                      \/* Intermediary buffer for duplex device on asy/;"	E	struct:ma_device
duplicateChannels	../ext/miniaudio.h	/^    ma_bool32 duplicateChannels;$/;"	E	struct:ma_encoder
dwBufferBytes	../ext/miniaudio.h	/^    DWORD dwBufferBytes;$/;"	E	struct:ma_completion_handler_uwp
dwBuildNumber	../ext/miniaudio.h	/^    DWORD dwBuildNumber;$/;"	E
dwChannelMask	../ext/miniaudio.h	/^    DWORD dwChannelMask;$/;"	E
dwChannels	../ext/miniaudio.h	/^    DWORD dwChannels;$/;"	E	struct:ma_completion_handler_uwp
dwCoInit	../ext/miniaudio.h	/^typedef HRESULT (WINAPI * MA_PFN_CoInitializeEx)(LPVOID pvReserved, DWORD  dwCoInit);$/;"	t
dwConditionMask	../ext/miniaudio.h	/^typedef ULONGLONG (WINAPI * ma_PFNVerSetConditionMask)(ULONGLONG dwlConditionMask, DWORD dwTypeB/;"	t
dwFXCount	../ext/miniaudio.h	/^    DWORD dwFXCount;$/;"	E	struct:ma_completion_handler_uwp
dwFlags	../ext/miniaudio.h	/^    DWORD dwFlags;$/;"	E	struct:ma_completion_handler_uwp
dwFormats	../ext/miniaudio.h	/^    DWORD dwFormats;$/;"	E	struct:ma_IDirectSoundNotify
dwFormats	../ext/miniaudio.h	/^    DWORD dwFormats;$/;"	E	struct:ma_completion_handler_uwp
dwFreeHw3DAllBuffers	../ext/miniaudio.h	/^    DWORD dwFreeHw3DAllBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwFreeHw3DStaticBuffers	../ext/miniaudio.h	/^    DWORD dwFreeHw3DStaticBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwFreeHw3DStreamingBuffers	../ext/miniaudio.h	/^    DWORD dwFreeHw3DStreamingBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwFreeHwMemBytes	../ext/miniaudio.h	/^    DWORD dwFreeHwMemBytes;$/;"	E	struct:ma_completion_handler_uwp
dwFreeHwMixingAllBuffers	../ext/miniaudio.h	/^    DWORD dwFreeHwMixingAllBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwFreeHwMixingStaticBuffers	../ext/miniaudio.h	/^    DWORD dwFreeHwMixingStaticBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwFreeHwMixingStreamingBuffers	../ext/miniaudio.h	/^    DWORD dwFreeHwMixingStreamingBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwMajorVersion	../ext/miniaudio.h	/^    DWORD dwMajorVersion;$/;"	E
dwMaxContigFreeHwMemBytes	../ext/miniaudio.h	/^    DWORD dwMaxContigFreeHwMemBytes;$/;"	E	struct:ma_completion_handler_uwp
dwMaxHw3DAllBuffers	../ext/miniaudio.h	/^    DWORD dwMaxHw3DAllBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwMaxHw3DStaticBuffers	../ext/miniaudio.h	/^    DWORD dwMaxHw3DStaticBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwMaxHw3DStreamingBuffers	../ext/miniaudio.h	/^    DWORD dwMaxHw3DStreamingBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwMaxHwMixingAllBuffers	../ext/miniaudio.h	/^    DWORD dwMaxHwMixingAllBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwMaxHwMixingStaticBuffers	../ext/miniaudio.h	/^    DWORD dwMaxHwMixingStaticBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwMaxHwMixingStreamingBuffers	../ext/miniaudio.h	/^    DWORD dwMaxHwMixingStreamingBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwMaxSecondarySampleRate	../ext/miniaudio.h	/^    DWORD dwMaxSecondarySampleRate;$/;"	E	struct:ma_completion_handler_uwp
dwMinSecondarySampleRate	../ext/miniaudio.h	/^    DWORD dwMinSecondarySampleRate;$/;"	E	struct:ma_completion_handler_uwp
dwMinorVersion	../ext/miniaudio.h	/^    DWORD dwMinorVersion;$/;"	E
dwOSVersionInfoSize	../ext/miniaudio.h	/^    DWORD dwOSVersionInfoSize;$/;"	E
dwOffset	../ext/miniaudio.h	/^    DWORD  dwOffset;$/;"	E	struct:ma_completion_handler_uwp
dwPlatformId	../ext/miniaudio.h	/^    DWORD dwPlatformId;$/;"	E
dwPlayCpuOverhead	../ext/miniaudio.h	/^    DWORD dwPlayCpuOverhead;$/;"	E	struct:ma_completion_handler_uwp
dwPlayCpuOverheadSwBuffers	../ext/miniaudio.h	/^    DWORD dwPlayCpuOverheadSwBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwPrimaryBuffers	../ext/miniaudio.h	/^    DWORD dwPrimaryBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwReserved	../ext/miniaudio.h	/^    DWORD dwReserved;$/;"	E	struct:ma_completion_handler_uwp
dwReserved1	../ext/miniaudio.h	/^    DWORD dwReserved1;$/;"	E	struct:ma_completion_handler_uwp
dwReserved2	../ext/miniaudio.h	/^    DWORD dwReserved2;$/;"	E	struct:ma_completion_handler_uwp
dwSize	../ext/miniaudio.h	/^    DWORD dwSize;$/;"	E	struct:ma_completion_handler_uwp
dwSupport	../ext/miniaudio.h	/^    DWORD dwSupport;$/;"	E	struct:ma_IDirectSoundNotify
dwTotalHwMemBytes	../ext/miniaudio.h	/^    DWORD dwTotalHwMemBytes;$/;"	E	struct:ma_completion_handler_uwp
dwUnlockTransferRate	../ext/miniaudio.h	/^    DWORD dwUnlockTransferRate;$/;"	E	struct:ma_completion_handler_uwp
dwUnlockTransferRateHwBuffers	../ext/miniaudio.h	/^    DWORD dwUnlockTransferRateHwBuffers;$/;"	E	struct:ma_completion_handler_uwp
dwlConditionMask	../ext/miniaudio.h	/^typedef BOOL      (WINAPI * ma_PFNVerifyVersionInfoW) (ma_OSVERSIONINFOEXW* lpVersionInfo, DWORD/;"	t
e	../ext/miniaudio.h	/^    ma_event e;$/;"	E	struct:ma_resampler_config
eCategory	../ext/miniaudio.h	/^    MA_AUDIO_STREAM_CATEGORY eCategory;$/;"	E
encodedReadOffset	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) encodedReadOffset;  \/* Most significant bit is the loop flag. Lower/;"	E	struct:ma_resampler_config
encodedWriteOffset	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) encodedWriteOffset; \/* Most significant bit is the loop flag. Lower/;"	E	struct:ma_resampler_config
encodingFormat	../ext/miniaudio.h	/^    ma_encoding_format encodingFormat;$/;"	E
engineNode	../ext/miniaudio.h	/^    ma_engine_node engineNode;          \/* Must be the first member for compatibility with the /;"	E	struct:ma_sound
entryProc	../ext/miniaudio.h	/^    ma_thread_entry_proc entryProc;$/;"	E
executionCounter	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) executionCounter;       \/* For allocating execution orders for jobs/;"	E	struct:ma_resource_manager_data_buffer_node
executionCounter	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) executionCounter;   \/* For allocating execution orders for jobs. *\/$/;"	E	struct:ma_resource_manager_data_stream
executionPath	../ext/miniaudio.h	/^    ma_data_converter_execution_path executionPath; \/* The execution path the data converter wi/;"	E	struct:ma_resampler_config
executionPointer	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) executionPointer;       \/* For managing the order of execution for /;"	E	struct:ma_resource_manager_data_buffer_node
executionPointer	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) executionPointer;   \/* For managing the order of execution for asyn/;"	E	struct:ma_resource_manager_data_stream
f32	../ext/miniaudio.h	/^    float    f32;$/;"	t
fader	../ext/miniaudio.h	/^    ma_fader fader;$/;"	E
fdwOpen	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveInOpen)(LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pw/;"	t	struct:ma_IDirectSoundNotify
fdwOpen	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveOutOpen)(LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX /;"	t	struct:ma_IDirectSoundNotify
flags	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) flags;                          \/* Some state flags for tracking th/;"	E	struct:ma_node_output_bus
flags	../ext/miniaudio.h	/^    ma_uint32 flags;                            \/* A combination of MA_SOUND_FLAG_* flags. *\/$/;"	E
flags	../ext/miniaudio.h	/^    ma_uint32 flags;                            \/* The flags that were passed used to initializ/;"	E	struct:ma_resource_manager_data_stream
flags	../ext/miniaudio.h	/^    ma_uint32 flags;                \/* Flags passed in at initialization time. *\/$/;"	E	struct:ma_job
flags	../ext/miniaudio.h	/^    ma_uint32 flags;$/;"	E
flags	../ext/miniaudio.h	/^    ma_uint32 flags;$/;"	E	struct:ma_device
flags	../ext/miniaudio.h	/^    ma_uint32 flags;$/;"	E	struct:ma_job
fmtid	../ext/miniaudio.h	/^    GUID fmtid;$/;"	E
format	../ext/miniaudio.h	/^    ma_format format;      \/* Set to 0 or ma_format_unknown to use the stream's internal format/;"	E
format	../ext/miniaudio.h	/^    ma_format format;   \/* Must be either ma_format_f32 or ma_format_s16. *\/$/;"	E	struct:ma_resampler_config
format	../ext/miniaudio.h	/^    ma_format format;$/;"	E
format	../ext/miniaudio.h	/^    ma_format format;$/;"	E	struct:ma_device
format	../ext/miniaudio.h	/^    ma_format format;$/;"	E	struct:ma_device_config
format	../ext/miniaudio.h	/^    ma_format format;$/;"	E	struct:ma_encoder
format	../ext/miniaudio.h	/^    ma_format format;$/;"	E	struct:ma_paged_audio_buffer_page
format	../ext/miniaudio.h	/^    ma_format format;$/;"	E	struct:ma_resampler_config
formatIn	../ext/miniaudio.h	/^    ma_format formatIn;$/;"	E	struct:ma_completion_handler_uwp
formatIn	../ext/miniaudio.h	/^    ma_format formatIn;$/;"	E	struct:ma_resampler_config
formatOut	../ext/miniaudio.h	/^    ma_format formatOut;$/;"	E	struct:ma_completion_handler_uwp
formatOut	../ext/miniaudio.h	/^    ma_format formatOut;$/;"	E	struct:ma_resampler_config
found	../ext/miniaudio.h	/^    ma_bool32 found;$/;"	E	struct:ma_IDirectSoundNotify
frameCount	../ext/miniaudio.h	/^typedef void (* ma_device_data_proc)(ma_device* pDevice, void* pOutput, const void* pInput, ma_u/;"	t	struct:ma_job
frequency	../ext/miniaudio.h	/^    double frequency;$/;"	E
frequency	../ext/miniaudio.h	/^    double frequency;$/;"	E	struct:ma_encoder
gainDB	../ext/miniaudio.h	/^    double gainDB;$/;"	E
gainSmoothTimeInFrames	../ext/miniaudio.h	/^    ma_uint32 gainSmoothTimeInFrames;           \/* The number of frames to interpolate the gain/;"	E	struct:ma_sound_inlined
gainSmoothTimeInFrames	../ext/miniaudio.h	/^    ma_uint32 gainSmoothTimeInFrames;   \/* When the gain of a channel changes during spatializa/;"	E
gainSmoothTimeInMilliseconds	../ext/miniaudio.h	/^    ma_uint32 gainSmoothTimeInMilliseconds;     \/* When set to 0, gainSmoothTimeInFrames will b/;"	E	struct:ma_sound_inlined
gainer	../ext/miniaudio.h	/^    ma_gainer gainer;   \/* For smooth gain transitions. *\/$/;"	E
groupsOffset	../ext/miniaudio.h	/^    size_t groupsOffset;$/;"	E
guid3DAlgorithm	../ext/miniaudio.h	/^    GUID guid3DAlgorithm;$/;"	E	struct:ma_completion_handler_uwp
hEvent	../ext/miniaudio.h	/^    HANDLE hEvent;$/;"	E	struct:ma_completion_handler_uwp
hEventNotify	../ext/miniaudio.h	/^    HANDLE hEventNotify;$/;"	E	struct:ma_completion_handler_uwp
hKey	../ext/miniaudio.h	/^typedef LONG (WINAPI * MA_PFN_RegCloseKey)(HKEY hKey);$/;"	t
handedness	../ext/miniaudio.h	/^    ma_handedness handedness;           \/* Defaults to right. Forward is -1 on the Z axis. In a/;"	E
handedness	../ext/miniaudio.h	/^    ma_handedness handedness;   \/* Defaults to right. Forward is -1 on the Z axis. In a left ha/;"	E
hasChannelConverter	../ext/miniaudio.h	/^    ma_bool8 hasChannelConverter;$/;"	E	struct:ma_resampler_config
hasPostFormatConversion	../ext/miniaudio.h	/^    ma_bool8 hasPostFormatConversion;$/;"	E	struct:ma_resampler_config
hasPreFormatConversion	../ext/miniaudio.h	/^    ma_bool8 hasPreFormatConversion;$/;"	E	struct:ma_resampler_config
hasResampler	../ext/miniaudio.h	/^    ma_bool8 hasResampler;$/;"	E	struct:ma_resampler_config
hashedName32	../ext/miniaudio.h	/^    ma_uint32 hashedName32;                         \/* The hashed name. This is the key. *\/$/;"	E	struct:ma_resource_manager_data_buffer_node
head	../ext/miniaudio.h	/^    MA_ATOMIC(8, ma_uint64) head;   \/* The first item in the list. Required for removing from t/;"	E	struct:ma_job
head	../ext/miniaudio.h	/^    ma_node_output_bus head;                \/* Dummy head node for simplifying some lock-free t/;"	E	struct:ma_node_input_bus
head	../ext/miniaudio.h	/^    ma_paged_audio_buffer_page head;                                \/* Dummy head for the lock-/;"	E	struct:ma_paged_audio_buffer_page
hishelf	../ext/miniaudio.h	/^    ma_hishelf2 hishelf;$/;"	E
hishelf	../ext/miniaudio.h	/^    ma_hishelf_config hishelf;$/;"	E
hpf	../ext/miniaudio.h	/^    ma_hpf hpf;$/;"	E
hpf	../ext/miniaudio.h	/^    ma_hpf_config hpf;$/;"	E
hpf1Count	../ext/miniaudio.h	/^    ma_uint32 hpf1Count;$/;"	E
hpf2Count	../ext/miniaudio.h	/^    ma_uint32 hpf2Count;$/;"	E
hwi	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveInClose)(HWAVEIN hwi);$/;"	t	struct:ma_IDirectSoundNotify
hwi	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveInReset)(HWAVEIN hwi);$/;"	t	struct:ma_IDirectSoundNotify
hwi	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveInStart)(HWAVEIN hwi);$/;"	t	struct:ma_IDirectSoundNotify
hwo	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveOutClose)(HWAVEOUT hwo);$/;"	t	struct:ma_IDirectSoundNotify
hwo	../ext/miniaudio.h	/^typedef MMRESULT (WINAPI * MA_PFN_waveOutReset)(HWAVEOUT hwo);$/;"	t	struct:ma_IDirectSoundNotify
i	../ext/miniaudio.h	/^    c89atomic_uint32 i;$/;"	t
i	../ext/miniaudio.h	/^    c89atomic_uint64 i;$/;"	t
id	../ext/miniaudio.h	/^    ma_device_id id;$/;"	E
id	../ext/miniaudio.h	/^    ma_device_id id;$/;"	E	struct:ma_completion_handler_uwp
inAdvanceFrac	../ext/miniaudio.h	/^    ma_uint32 inAdvanceFrac;$/;"	E
inAdvanceInt	../ext/miniaudio.h	/^    ma_uint32 inAdvanceInt;$/;"	E
inTimeFrac	../ext/miniaudio.h	/^    ma_uint32 inTimeFrac;$/;"	E
inTimeInt	../ext/miniaudio.h	/^    ma_uint32 inTimeInt;$/;"	E
init	../ext/miniaudio.h	/^    ma_resource_manager_pipeline_stage_notification init;    \/* Initialization of the decoder. /;"	E
initialAttachmentInputBusIndex	../ext/miniaudio.h	/^    ma_uint32 initialAttachmentInputBusIndex;   \/* The index of the input bus of pInitialAttach/;"	E
initialSeekPointInPCMFrames	../ext/miniaudio.h	/^    ma_uint64 initialSeekPointInPCMFrames;      \/* Initializes the sound such that it's seeked /;"	E
initialSeekPointInPCMFrames	../ext/miniaudio.h	/^    ma_uint64 initialSeekPointInPCMFrames;$/;"	E
initialState	../ext/miniaudio.h	/^    ma_node_state initialState;         \/* Defaults to ma_node_state_started. *\/$/;"	E
inputBusCount	../ext/miniaudio.h	/^    ma_uint32 inputBusCount;            \/* Only used if the vtable specifies an input bus count/;"	E
inputBusCount	../ext/miniaudio.h	/^    ma_uint32 inputBusCount;$/;"	E	struct:ma_node_base
inputBusCount	../ext/miniaudio.h	/^    ma_uint8 inputBusCount;$/;"	E
inputCacheCap	../ext/miniaudio.h	/^    ma_uint64 inputCacheCap;        \/* The capacity of the input cache. *\/$/;"	E	struct:ma_decoder
inputCacheConsumed	../ext/miniaudio.h	/^    ma_uint64 inputCacheConsumed;   \/* The number of frames that have been consumed in the cach/;"	E	struct:ma_decoder
inputCacheRemaining	../ext/miniaudio.h	/^    ma_uint64 inputCacheRemaining;  \/* The number of valid frames remaining in the cahce. *\/$/;"	E	struct:ma_decoder
inputNodeInputBusIndex	../ext/miniaudio.h	/^    MA_ATOMIC(1, ma_uint8) inputNodeInputBusIndex;          \/* The index of the input bus on th/;"	E	struct:ma_node_output_bus
isAttached	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_bool32) isAttached;                     \/* This is used to prevent iteratio/;"	E	struct:ma_node_output_bus
isDataOwnedByResourceManager	../ext/miniaudio.h	/^    ma_bool32 isDataOwnedByResourceManager;         \/* Set to true when the underlying data buf/;"	E	struct:ma_resource_manager_data_buffer_node
isDecoderAtEnd	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_bool32) isDecoderAtEnd;     \/* Whether or not the decoder has reached the e/;"	E	struct:ma_resource_manager_data_stream
isDecoderInitialized	../ext/miniaudio.h	/^    ma_bool32 isDecoderInitialized;             \/* Required for determining whether or not the /;"	E	struct:ma_resource_manager_data_stream
isDefault	../ext/miniaudio.h	/^    ma_bool32 isDefault;$/;"	E
isEnabled	../ext/miniaudio.h	/^    ma_bool32 isEnabled;$/;"	E
isLooping	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_bool32) isLooping;          \/* Whether or not the stream is looping. It's i/;"	E	struct:ma_resource_manager_data_stream
isLooping	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_bool32) isLooping;$/;"	E	struct:ma_device
isLooping	../ext/miniaudio.h	/^    ma_bool32 isLooping;$/;"	E
isOwnerOfContext	../ext/miniaudio.h	/^    ma_bool8 isOwnerOfContext;                  \/* When set to true, uninitializing the device /;"	E	struct:ma_device
isPageValid	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_bool32) isPageValid[2];     \/* Booleans to indicate whether or not a page i/;"	E	struct:ma_resource_manager_data_stream
isPassthrough	../ext/miniaudio.h	/^    ma_bool8 isPassthrough;$/;"	E	struct:ma_resampler_config
isPitchDisabled	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_bool32) isPitchDisabled;            \/* When set to true, pitching will be d/;"	E
isPitchDisabled	../ext/miniaudio.h	/^    ma_bool8 isPitchDisabled;           \/* Pitching can be explicitly disable with MA_SOUND_FLA/;"	E
isSpatializationDisabled	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_bool32) isSpatializationDisabled;   \/* Set to false by default. When set to/;"	E
isSpatializationDisabled	../ext/miniaudio.h	/^    ma_bool8 isSpatializationDisabled;  \/* Spatialization can be explicitly disabled with MA_SO/;"	E
jack	../ext/miniaudio.h	/^    } jack;$/;"	E	struct:ma_context_config
jobQueue	../ext/miniaudio.h	/^    ma_job_queue jobQueue;                                          \/* Multi-consumer, multi-pr/;"	E	struct:ma_resource_manager
jobQueue	../ext/miniaudio.h	/^    ma_job_queue jobQueue;$/;"	E	struct:ma_job
jobQueueCapacity	../ext/miniaudio.h	/^    ma_uint32 jobQueueCapacity;     \/* The maximum number of jobs that can fit in the queue at /;"	E
jobQueueCapacity	../ext/miniaudio.h	/^    ma_uint32 jobQueueCapacity;$/;"	E	struct:ma_job
jobQueueFlags	../ext/miniaudio.h	/^    ma_uint32 jobQueueFlags;$/;"	E	struct:ma_job
jobThreadCount	../ext/miniaudio.h	/^    ma_uint32 jobThreadCount;       \/* Set to 0 if you want to self-manage your job threads. De/;"	E
jobThreads	../ext/miniaudio.h	/^    ma_thread jobThreads[MA_RESOURCE_MANAGER_MAX_JOB_THREAD_COUNT]; \/* The threads for executin/;"	E	struct:ma_resource_manager
jobsOffset	../ext/miniaudio.h	/^    size_t jobsOffset;$/;"	E
lcg	../ext/miniaudio.h	/^    ma_lcg lcg;$/;"	E	struct:ma_encoder
lengthInFrames	../ext/miniaudio.h	/^    ma_uint64 lengthInFrames;   \/* The total length of the fade. *\/$/;"	E
linear	../ext/miniaudio.h	/^    } linear;$/;"	E	struct:ma_resampler_config
listenerCount	../ext/miniaudio.h	/^    ma_uint32 listenerCount;                    \/* Must be between 1 and MA_ENGINE_MAX_LISTENER/;"	E	struct:ma_sound_inlined
localTime	../ext/miniaudio.h	/^    MA_ATOMIC(8, ma_uint64) localTime;      \/* The node's local clock. This is just a running s/;"	E	struct:ma_node_base
lock	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_spinlock) lock;                         \/* Unfortunate lock, but significan/;"	E	struct:ma_node_output_bus
lock	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_spinlock) lock;         \/* Unfortunate lock, but significantly simplifies t/;"	E	struct:ma_node_input_bus
lock	../ext/miniaudio.h	/^    ma_mutex lock;  \/* For thread safety just to make it easier and safer for the logging imple/;"	E
lock	../ext/miniaudio.h	/^    ma_pthread_mutex_t lock;$/;"	E
lock	../ext/miniaudio.h	/^    ma_spinlock lock;$/;"	E	struct:ma_job
log	../ext/miniaudio.h	/^    ma_log log;                                                     \/* Only used if no log was /;"	E	struct:ma_resource_manager
loopBegInFrames	../ext/miniaudio.h	/^    ma_uint64 loopBegInFrames;              \/* Relative to rangeBegInFrames. *\/$/;"	E	struct:ma_device
loopEndInFrames	../ext/miniaudio.h	/^    ma_uint64 loopEndInFrames;              \/* Relative to rangeBegInFrames. Set to -1 for the /;"	E	struct:ma_device
loopPointBegInPCMFrames	../ext/miniaudio.h	/^    ma_uint64 loopPointBegInPCMFrames;$/;"	E
loopPointEndInPCMFrames	../ext/miniaudio.h	/^    ma_uint64 loopPointEndInPCMFrames;$/;"	E
loshelf	../ext/miniaudio.h	/^    ma_loshelf2 loshelf;$/;"	E
loshelf	../ext/miniaudio.h	/^    ma_loshelf_config loshelf;$/;"	E
lpDSCFXDesc	../ext/miniaudio.h	/^    void* lpDSCFXDesc;  \/* <-- miniaudio doesn't use this, so set to void*. *\/$/;"	E	struct:ma_completion_handler_uwp
lpVtbl	../ext/miniaudio.h	/^        ma_IActivateAudioInterfaceAsyncOperationVtbl* lpVtbl;$/;"	E	struct:ma_IActivateAudioInterfaceAsyncOperation
lpVtbl	../ext/miniaudio.h	/^        ma_IMMDeviceCollectionVtbl* lpVtbl;$/;"	E	struct:ma_IMMDeviceCollection
lpVtbl	../ext/miniaudio.h	/^    ma_IAudioCaptureClientVtbl* lpVtbl;$/;"	E	struct:ma_IAudioCaptureClient
lpVtbl	../ext/miniaudio.h	/^    ma_IAudioClient3Vtbl* lpVtbl;$/;"	E	struct:ma_IAudioClient3
lpVtbl	../ext/miniaudio.h	/^    ma_IAudioClientVtbl* lpVtbl;$/;"	E	struct:ma_IAudioClient
lpVtbl	../ext/miniaudio.h	/^    ma_IDirectSoundCaptureVtbl* lpVtbl;$/;"	E	struct:ma_IDirectSoundCapture
lpVtbl	../ext/miniaudio.h	/^    ma_IDirectSoundNotifyVtbl* lpVtbl;$/;"	E	struct:ma_IDirectSoundNotify
lpVtbl	../ext/miniaudio.h	/^    ma_IDirectSoundVtbl* lpVtbl;$/;"	E	struct:ma_IDirectSound
lpVtbl	../ext/miniaudio.h	/^    ma_IUnknownVtbl* lpVtbl;$/;"	E	struct:ma_IUnknown
lpVtbl	../ext/miniaudio.h	/^    ma_completion_handler_uwp_vtbl* lpVtbl;$/;"	E	struct:ma_completion_handler_uwp
lpVtbl	../ext/miniaudio.h	/^    void* lpVtbl;$/;"	E	struct:ma_job
lpcbData	../ext/miniaudio.h	/^typedef LONG (WINAPI * MA_PFN_RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserve/;"	t
lpf	../ext/miniaudio.h	/^    ma_lpf lpf;$/;"	E
lpf	../ext/miniaudio.h	/^    ma_lpf_config lpf;$/;"	E
lpf1Count	../ext/miniaudio.h	/^    ma_uint32 lpf1Count;$/;"	E
lpf2Count	../ext/miniaudio.h	/^    ma_uint32 lpf2Count;$/;"	E
lpfNyquistFactor	../ext/miniaudio.h	/^    double    lpfNyquistFactor; \/* 0..1. Defaults to 1. 1 = Half the sampling frequency (Nyquis/;"	E
lpfOrder	../ext/miniaudio.h	/^    ma_uint32 lpfOrder;         \/* The low-pass filter order. Setting this to 0 will disable lo/;"	E
lpwfxFormat	../ext/miniaudio.h	/^    WAVEFORMATEX* lpwfxFormat;$/;"	E	struct:ma_completion_handler_uwp
ma_AudioClientProperties	../ext/miniaudio.h	/^} ma_AudioClientProperties;$/;"	t
ma_CoCreateInstance	../ext/miniaudio.h	/^    #define ma_CoCreateInstance(pContext, rclsid, pUnkOuter, dwClsContext, riid, ppv)  ((MA_PFN_/;"	M
ma_CoCreateInstance	../ext/miniaudio.h	/^    #define ma_CoCreateInstance(pContext, rclsid, pUnkOuter, dwClsContext, riid, ppv)  CoCreateI/;"	M
ma_CoInitializeEx	../ext/miniaudio.h	/^    #define ma_CoInitializeEx(pContext, pvReserved, dwCoInit)                          ((MA_PFN_/;"	M
ma_CoInitializeEx	../ext/miniaudio.h	/^    #define ma_CoInitializeEx(pContext, pvReserved, dwCoInit)                          CoInitial/;"	M
ma_CoTaskMemFree	../ext/miniaudio.h	/^    #define ma_CoTaskMemFree(pContext, pv)                                             ((MA_PFN_/;"	M
ma_CoTaskMemFree	../ext/miniaudio.h	/^    #define ma_CoTaskMemFree(pContext, pv)                                             CoTaskMem/;"	M
ma_CoUninitialize	../ext/miniaudio.h	/^    #define ma_CoUninitialize(pContext)                                                ((MA_PFN_/;"	M
ma_CoUninitialize	../ext/miniaudio.h	/^    #define ma_CoUninitialize(pContext)                                                CoUniniti/;"	M
ma_EDataFlow	../ext/miniaudio.h	/^} ma_EDataFlow;$/;"	t
ma_ERole	../ext/miniaudio.h	/^} ma_ERole;$/;"	t
ma_IActivateAudioInterfaceAsyncOperation	../ext/miniaudio.h	/^    struct ma_IActivateAudioInterfaceAsyncOperation$/;"	s
ma_IActivateAudioInterfaceAsyncOperation	../ext/miniaudio.h	/^typedef struct ma_IActivateAudioInterfaceAsyncOperation    ma_IActivateAudioInterfaceAsyncOperat/;"	s
ma_IActivateAudioInterfaceAsyncOperation	../ext/miniaudio.h	/^typedef struct ma_IActivateAudioInterfaceAsyncOperation    ma_IActivateAudioInterfaceAsyncOperat/;"	t
ma_IActivateAudioInterfaceAsyncOperationVtbl	../ext/miniaudio.h	/^    } ma_IActivateAudioInterfaceAsyncOperationVtbl;$/;"	t
ma_IActivateAudioInterfaceAsyncOperation_AddRef	../ext/miniaudio.h	/^    static MA_INLINE ULONG   ma_IActivateAudioInterfaceAsyncOperation_AddRef(ma_IActivateAudioIn/;"	f	struct:ma_IActivateAudioInterfaceAsyncOperation
ma_IActivateAudioInterfaceAsyncOperation_GetActivateResult	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IActivateAudioInterfaceAsyncOperation_GetActivateResult(ma_IActi/;"	f	struct:ma_IActivateAudioInterfaceAsyncOperation
ma_IActivateAudioInterfaceAsyncOperation_QueryInterface	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IActivateAudioInterfaceAsyncOperation_QueryInterface(ma_IActivat/;"	f	struct:ma_IActivateAudioInterfaceAsyncOperation
ma_IActivateAudioInterfaceAsyncOperation_Release	../ext/miniaudio.h	/^    static MA_INLINE ULONG   ma_IActivateAudioInterfaceAsyncOperation_Release(ma_IActivateAudioI/;"	f	struct:ma_IActivateAudioInterfaceAsyncOperation
ma_IActivateAudioInterfaceCompletionHandler	../ext/miniaudio.h	/^typedef struct ma_IActivateAudioInterfaceCompletionHandler ma_IActivateAudioInterfaceCompletionH/;"	s
ma_IActivateAudioInterfaceCompletionHandler	../ext/miniaudio.h	/^typedef struct ma_IActivateAudioInterfaceCompletionHandler ma_IActivateAudioInterfaceCompletionH/;"	t
ma_IAudioCaptureClient	../ext/miniaudio.h	/^struct ma_IAudioCaptureClient$/;"	s
ma_IAudioCaptureClient	../ext/miniaudio.h	/^typedef struct ma_IAudioCaptureClient                      ma_IAudioCaptureClient;$/;"	s
ma_IAudioCaptureClient	../ext/miniaudio.h	/^typedef struct ma_IAudioCaptureClient                      ma_IAudioCaptureClient;$/;"	t
ma_IAudioCaptureClientVtbl	../ext/miniaudio.h	/^} ma_IAudioCaptureClientVtbl;$/;"	t
ma_IAudioCaptureClient_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioCaptureClient_AddRef(ma_IAudioCaptureClient* pThis)           /;"	f	struct:ma_IAudioCaptureClient
ma_IAudioCaptureClient_GetBuffer	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioCaptureClient_GetBuffer(ma_IAudioCaptureClient* pThis, BYTE** /;"	f	struct:ma_IAudioCaptureClient
ma_IAudioCaptureClient_GetNextPacketSize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioCaptureClient_GetNextPacketSize(ma_IAudioCaptureClient* pThis,/;"	f	struct:ma_IAudioCaptureClient
ma_IAudioCaptureClient_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioCaptureClient_QueryInterface(ma_IAudioCaptureClient* pThis, co/;"	f	struct:ma_IAudioCaptureClient
ma_IAudioCaptureClient_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioCaptureClient_Release(ma_IAudioCaptureClient* pThis)          /;"	f	struct:ma_IAudioCaptureClient
ma_IAudioCaptureClient_ReleaseBuffer	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioCaptureClient_ReleaseBuffer(ma_IAudioCaptureClient* pThis, ma_/;"	f	struct:ma_IAudioCaptureClient
ma_IAudioClient	../ext/miniaudio.h	/^struct ma_IAudioClient$/;"	s
ma_IAudioClient	../ext/miniaudio.h	/^typedef struct ma_IAudioClient                             ma_IAudioClient;$/;"	s
ma_IAudioClient	../ext/miniaudio.h	/^typedef struct ma_IAudioClient                             ma_IAudioClient;$/;"	t
ma_IAudioClient2	../ext/miniaudio.h	/^typedef struct ma_IAudioClient2                            ma_IAudioClient2;$/;"	s
ma_IAudioClient2	../ext/miniaudio.h	/^typedef struct ma_IAudioClient2                            ma_IAudioClient2;$/;"	t
ma_IAudioClient2Vtbl	../ext/miniaudio.h	/^} ma_IAudioClient2Vtbl;$/;"	t	struct:ma_IAudioClient
ma_IAudioClient2_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioClient2_AddRef(ma_IAudioClient2* pThis)                       /;"	f
ma_IAudioClient2_GetBufferSize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_GetBufferSize(ma_IAudioClient2* pThis, ma_uint32* pNum/;"	f
ma_IAudioClient2_GetBufferSizeLimits	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_GetBufferSizeLimits(ma_IAudioClient2* pThis, const WAV/;"	f
ma_IAudioClient2_GetCurrentPadding	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_GetCurrentPadding(ma_IAudioClient2* pThis, ma_uint32* /;"	f
ma_IAudioClient2_GetDevicePeriod	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_GetDevicePeriod(ma_IAudioClient2* pThis, MA_REFERENCE_/;"	f
ma_IAudioClient2_GetMixFormat	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_GetMixFormat(ma_IAudioClient2* pThis, WAVEFORMATEX** p/;"	f
ma_IAudioClient2_GetService	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_GetService(ma_IAudioClient2* pThis, const IID* const r/;"	f
ma_IAudioClient2_GetStreamLatency	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_GetStreamLatency(ma_IAudioClient2* pThis, MA_REFERENCE/;"	f
ma_IAudioClient2_Initialize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_Initialize(ma_IAudioClient2* pThis, MA_AUDCLNT_SHAREMO/;"	f
ma_IAudioClient2_IsFormatSupported	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_IsFormatSupported(ma_IAudioClient2* pThis, MA_AUDCLNT_/;"	f
ma_IAudioClient2_IsOffloadCapable	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_IsOffloadCapable(ma_IAudioClient2* pThis, MA_AUDIO_STR/;"	f
ma_IAudioClient2_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_QueryInterface(ma_IAudioClient2* pThis, const IID* con/;"	f
ma_IAudioClient2_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioClient2_Release(ma_IAudioClient2* pThis)                      /;"	f
ma_IAudioClient2_Reset	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_Reset(ma_IAudioClient2* pThis)                        /;"	f
ma_IAudioClient2_SetClientProperties	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_SetClientProperties(ma_IAudioClient2* pThis, const ma_/;"	f
ma_IAudioClient2_SetEventHandle	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_SetEventHandle(ma_IAudioClient2* pThis, HANDLE eventHa/;"	f
ma_IAudioClient2_Start	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_Start(ma_IAudioClient2* pThis)                        /;"	f
ma_IAudioClient2_Stop	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient2_Stop(ma_IAudioClient2* pThis)                         /;"	f
ma_IAudioClient3	../ext/miniaudio.h	/^struct ma_IAudioClient3$/;"	s
ma_IAudioClient3	../ext/miniaudio.h	/^typedef struct ma_IAudioClient3                            ma_IAudioClient3;$/;"	s
ma_IAudioClient3	../ext/miniaudio.h	/^typedef struct ma_IAudioClient3                            ma_IAudioClient3;$/;"	t
ma_IAudioClient3Vtbl	../ext/miniaudio.h	/^} ma_IAudioClient3Vtbl;$/;"	t
ma_IAudioClient3_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioClient3_AddRef(ma_IAudioClient3* pThis)                       /;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_GetBufferSize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_GetBufferSize(ma_IAudioClient3* pThis, ma_uint32* pNum/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_GetBufferSizeLimits	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_GetBufferSizeLimits(ma_IAudioClient3* pThis, const WAV/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_GetCurrentPadding	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_GetCurrentPadding(ma_IAudioClient3* pThis, ma_uint32* /;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_GetCurrentSharedModeEnginePeriod	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_GetCurrentSharedModeEnginePeriod(ma_IAudioClient3* pTh/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_GetDevicePeriod	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_GetDevicePeriod(ma_IAudioClient3* pThis, MA_REFERENCE_/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_GetMixFormat	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_GetMixFormat(ma_IAudioClient3* pThis, WAVEFORMATEX** p/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_GetService	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_GetService(ma_IAudioClient3* pThis, const IID* const r/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_GetSharedModeEnginePeriod	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_GetSharedModeEnginePeriod(ma_IAudioClient3* pThis, con/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_GetStreamLatency	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_GetStreamLatency(ma_IAudioClient3* pThis, MA_REFERENCE/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_Initialize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_Initialize(ma_IAudioClient3* pThis, MA_AUDCLNT_SHAREMO/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_InitializeSharedAudioStream	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_InitializeSharedAudioStream(ma_IAudioClient3* pThis, D/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_IsFormatSupported	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_IsFormatSupported(ma_IAudioClient3* pThis, MA_AUDCLNT_/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_IsOffloadCapable	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_IsOffloadCapable(ma_IAudioClient3* pThis, MA_AUDIO_STR/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_QueryInterface(ma_IAudioClient3* pThis, const IID* con/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioClient3_Release(ma_IAudioClient3* pThis)                      /;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_Reset	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_Reset(ma_IAudioClient3* pThis)                        /;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_SetClientProperties	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_SetClientProperties(ma_IAudioClient3* pThis, const ma_/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_SetEventHandle	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_SetEventHandle(ma_IAudioClient3* pThis, HANDLE eventHa/;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_Start	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_Start(ma_IAudioClient3* pThis)                        /;"	f	struct:ma_IAudioClient3
ma_IAudioClient3_Stop	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient3_Stop(ma_IAudioClient3* pThis)                         /;"	f	struct:ma_IAudioClient3
ma_IAudioClientVtbl	../ext/miniaudio.h	/^} ma_IAudioClientVtbl;$/;"	t
ma_IAudioClient_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioClient_AddRef(ma_IAudioClient* pThis)                         /;"	f	struct:ma_IAudioClient
ma_IAudioClient_GetBufferSize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_GetBufferSize(ma_IAudioClient* pThis, ma_uint32* pNumBu/;"	f	struct:ma_IAudioClient
ma_IAudioClient_GetCurrentPadding	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_GetCurrentPadding(ma_IAudioClient* pThis, ma_uint32* pN/;"	f	struct:ma_IAudioClient
ma_IAudioClient_GetDevicePeriod	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_GetDevicePeriod(ma_IAudioClient* pThis, MA_REFERENCE_TI/;"	f	struct:ma_IAudioClient
ma_IAudioClient_GetMixFormat	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_GetMixFormat(ma_IAudioClient* pThis, WAVEFORMATEX** ppD/;"	f	struct:ma_IAudioClient
ma_IAudioClient_GetService	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_GetService(ma_IAudioClient* pThis, const IID* const rii/;"	f	struct:ma_IAudioClient
ma_IAudioClient_GetStreamLatency	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_GetStreamLatency(ma_IAudioClient* pThis, MA_REFERENCE_T/;"	f	struct:ma_IAudioClient
ma_IAudioClient_Initialize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_Initialize(ma_IAudioClient* pThis, MA_AUDCLNT_SHAREMODE/;"	f	struct:ma_IAudioClient
ma_IAudioClient_IsFormatSupported	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_IsFormatSupported(ma_IAudioClient* pThis, MA_AUDCLNT_SH/;"	f	struct:ma_IAudioClient
ma_IAudioClient_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_QueryInterface(ma_IAudioClient* pThis, const IID* const/;"	f	struct:ma_IAudioClient
ma_IAudioClient_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioClient_Release(ma_IAudioClient* pThis)                        /;"	f	struct:ma_IAudioClient
ma_IAudioClient_Reset	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_Reset(ma_IAudioClient* pThis)                          /;"	f	struct:ma_IAudioClient
ma_IAudioClient_SetEventHandle	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_SetEventHandle(ma_IAudioClient* pThis, HANDLE eventHand/;"	f	struct:ma_IAudioClient
ma_IAudioClient_Start	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_Start(ma_IAudioClient* pThis)                          /;"	f	struct:ma_IAudioClient
ma_IAudioClient_Stop	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioClient_Stop(ma_IAudioClient* pThis)                           /;"	f	struct:ma_IAudioClient
ma_IAudioRenderClient	../ext/miniaudio.h	/^typedef struct ma_IAudioRenderClient                       ma_IAudioRenderClient;$/;"	s
ma_IAudioRenderClient	../ext/miniaudio.h	/^typedef struct ma_IAudioRenderClient                       ma_IAudioRenderClient;$/;"	t
ma_IAudioRenderClientVtbl	../ext/miniaudio.h	/^} ma_IAudioRenderClientVtbl;$/;"	t	struct:ma_IAudioClient3
ma_IAudioRenderClient_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioRenderClient_AddRef(ma_IAudioRenderClient* pThis)             /;"	f
ma_IAudioRenderClient_GetBuffer	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioRenderClient_GetBuffer(ma_IAudioRenderClient* pThis, ma_uint32/;"	f
ma_IAudioRenderClient_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioRenderClient_QueryInterface(ma_IAudioRenderClient* pThis, cons/;"	f
ma_IAudioRenderClient_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IAudioRenderClient_Release(ma_IAudioRenderClient* pThis)            /;"	f
ma_IAudioRenderClient_ReleaseBuffer	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IAudioRenderClient_ReleaseBuffer(ma_IAudioRenderClient* pThis, ma_ui/;"	f
ma_IDirectSound	../ext/miniaudio.h	/^struct ma_IDirectSound$/;"	s
ma_IDirectSound	../ext/miniaudio.h	/^typedef struct ma_IDirectSound              ma_IDirectSound;$/;"	t
ma_IDirectSoundBuffer	../ext/miniaudio.h	/^typedef struct ma_IDirectSoundBuffer        ma_IDirectSoundBuffer;$/;"	s
ma_IDirectSoundBuffer	../ext/miniaudio.h	/^typedef struct ma_IDirectSoundBuffer        ma_IDirectSoundBuffer;$/;"	t
ma_IDirectSoundBufferVtbl	../ext/miniaudio.h	/^} ma_IDirectSoundBufferVtbl;$/;"	t	struct:ma_IDirectSound
ma_IDirectSoundBuffer_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSoundBuffer_AddRef(ma_IDirectSoundBuffer* pThis)             /;"	f
ma_IDirectSoundBuffer_GetCaps	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_GetCaps(ma_IDirectSoundBuffer* pThis, MA_DSBCAPS*/;"	f
ma_IDirectSoundBuffer_GetCurrentPosition	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_GetCurrentPosition(ma_IDirectSoundBuffer* pThis, /;"	f
ma_IDirectSoundBuffer_GetFormat	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_GetFormat(ma_IDirectSoundBuffer* pThis, WAVEFORMA/;"	f
ma_IDirectSoundBuffer_GetFrequency	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_GetFrequency(ma_IDirectSoundBuffer* pThis, DWORD*/;"	f
ma_IDirectSoundBuffer_GetPan	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_GetPan(ma_IDirectSoundBuffer* pThis, LONG* pPan) /;"	f
ma_IDirectSoundBuffer_GetStatus	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_GetStatus(ma_IDirectSoundBuffer* pThis, DWORD* pS/;"	f
ma_IDirectSoundBuffer_GetVolume	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_GetVolume(ma_IDirectSoundBuffer* pThis, LONG* pVo/;"	f
ma_IDirectSoundBuffer_Initialize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_Initialize(ma_IDirectSoundBuffer* pThis, ma_IDire/;"	f
ma_IDirectSoundBuffer_Lock	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_Lock(ma_IDirectSoundBuffer* pThis, DWORD dwOffset/;"	f
ma_IDirectSoundBuffer_Play	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_Play(ma_IDirectSoundBuffer* pThis, DWORD dwReserv/;"	f
ma_IDirectSoundBuffer_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_QueryInterface(ma_IDirectSoundBuffer* pThis, cons/;"	f
ma_IDirectSoundBuffer_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSoundBuffer_Release(ma_IDirectSoundBuffer* pThis)            /;"	f
ma_IDirectSoundBuffer_Restore	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_Restore(ma_IDirectSoundBuffer* pThis)            /;"	f
ma_IDirectSoundBuffer_SetCurrentPosition	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_SetCurrentPosition(ma_IDirectSoundBuffer* pThis, /;"	f
ma_IDirectSoundBuffer_SetFormat	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_SetFormat(ma_IDirectSoundBuffer* pThis, const WAV/;"	f
ma_IDirectSoundBuffer_SetFrequency	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_SetFrequency(ma_IDirectSoundBuffer* pThis, DWORD /;"	f
ma_IDirectSoundBuffer_SetPan	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_SetPan(ma_IDirectSoundBuffer* pThis, LONG pan)   /;"	f
ma_IDirectSoundBuffer_SetVolume	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_SetVolume(ma_IDirectSoundBuffer* pThis, LONG volu/;"	f
ma_IDirectSoundBuffer_Stop	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_Stop(ma_IDirectSoundBuffer* pThis)               /;"	f
ma_IDirectSoundBuffer_Unlock	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundBuffer_Unlock(ma_IDirectSoundBuffer* pThis, void* pAudio/;"	f
ma_IDirectSoundCapture	../ext/miniaudio.h	/^struct ma_IDirectSoundCapture$/;"	s
ma_IDirectSoundCapture	../ext/miniaudio.h	/^typedef struct ma_IDirectSoundCapture       ma_IDirectSoundCapture;$/;"	s
ma_IDirectSoundCapture	../ext/miniaudio.h	/^typedef struct ma_IDirectSoundCapture       ma_IDirectSoundCapture;$/;"	t
ma_IDirectSoundCaptureBuffer	../ext/miniaudio.h	/^typedef struct ma_IDirectSoundCaptureBuffer ma_IDirectSoundCaptureBuffer;$/;"	s
ma_IDirectSoundCaptureBuffer	../ext/miniaudio.h	/^typedef struct ma_IDirectSoundCaptureBuffer ma_IDirectSoundCaptureBuffer;$/;"	t
ma_IDirectSoundCaptureBufferVtbl	../ext/miniaudio.h	/^} ma_IDirectSoundCaptureBufferVtbl;$/;"	t	struct:ma_IDirectSoundCapture
ma_IDirectSoundCaptureBuffer_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSoundCaptureBuffer_AddRef(ma_IDirectSoundCaptureBuffer* pThis/;"	f
ma_IDirectSoundCaptureBuffer_GetCaps	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_GetCaps(ma_IDirectSoundCaptureBuffer* pThi/;"	f
ma_IDirectSoundCaptureBuffer_GetCurrentPosition	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_GetCurrentPosition(ma_IDirectSoundCaptureB/;"	f
ma_IDirectSoundCaptureBuffer_GetFormat	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_GetFormat(ma_IDirectSoundCaptureBuffer* pT/;"	f
ma_IDirectSoundCaptureBuffer_GetStatus	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_GetStatus(ma_IDirectSoundCaptureBuffer* pT/;"	f
ma_IDirectSoundCaptureBuffer_Initialize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_Initialize(ma_IDirectSoundCaptureBuffer* p/;"	f
ma_IDirectSoundCaptureBuffer_Lock	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_Lock(ma_IDirectSoundCaptureBuffer* pThis, /;"	f
ma_IDirectSoundCaptureBuffer_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_QueryInterface(ma_IDirectSoundCaptureBuffe/;"	f
ma_IDirectSoundCaptureBuffer_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSoundCaptureBuffer_Release(ma_IDirectSoundCaptureBuffer* pThi/;"	f
ma_IDirectSoundCaptureBuffer_Start	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_Start(ma_IDirectSoundCaptureBuffer* pThis,/;"	f
ma_IDirectSoundCaptureBuffer_Stop	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_Stop(ma_IDirectSoundCaptureBuffer* pThis) /;"	f
ma_IDirectSoundCaptureBuffer_Unlock	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCaptureBuffer_Unlock(ma_IDirectSoundCaptureBuffer* pThis/;"	f
ma_IDirectSoundCaptureVtbl	../ext/miniaudio.h	/^} ma_IDirectSoundCaptureVtbl;$/;"	t
ma_IDirectSoundCapture_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSoundCapture_AddRef             (ma_IDirectSoundCapture* pThi/;"	f	struct:ma_IDirectSoundCapture
ma_IDirectSoundCapture_CreateCaptureBuffer	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCapture_CreateCaptureBuffer(ma_IDirectSoundCapture* pThi/;"	f	struct:ma_IDirectSoundCapture
ma_IDirectSoundCapture_GetCaps	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCapture_GetCaps            (ma_IDirectSoundCapture* pThi/;"	f	struct:ma_IDirectSoundCapture
ma_IDirectSoundCapture_Initialize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCapture_Initialize         (ma_IDirectSoundCapture* pThi/;"	f	struct:ma_IDirectSoundCapture
ma_IDirectSoundCapture_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundCapture_QueryInterface     (ma_IDirectSoundCapture* pThi/;"	f	struct:ma_IDirectSoundCapture
ma_IDirectSoundCapture_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSoundCapture_Release            (ma_IDirectSoundCapture* pThi/;"	f	struct:ma_IDirectSoundCapture
ma_IDirectSoundNotify	../ext/miniaudio.h	/^struct ma_IDirectSoundNotify$/;"	s
ma_IDirectSoundNotify	../ext/miniaudio.h	/^typedef struct ma_IDirectSoundNotify        ma_IDirectSoundNotify;$/;"	s
ma_IDirectSoundNotify	../ext/miniaudio.h	/^typedef struct ma_IDirectSoundNotify        ma_IDirectSoundNotify;$/;"	t
ma_IDirectSoundNotifyVtbl	../ext/miniaudio.h	/^} ma_IDirectSoundNotifyVtbl;$/;"	t
ma_IDirectSoundNotify_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSoundNotify_AddRef(ma_IDirectSoundNotify* pThis)             /;"	f	struct:ma_IDirectSoundNotify
ma_IDirectSoundNotify_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundNotify_QueryInterface(ma_IDirectSoundNotify* pThis, cons/;"	f	struct:ma_IDirectSoundNotify
ma_IDirectSoundNotify_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSoundNotify_Release(ma_IDirectSoundNotify* pThis)            /;"	f	struct:ma_IDirectSoundNotify
ma_IDirectSoundNotify_SetNotificationPositions	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSoundNotify_SetNotificationPositions(ma_IDirectSoundNotify* p/;"	f	struct:ma_IDirectSoundNotify
ma_IDirectSoundVtbl	../ext/miniaudio.h	/^} ma_IDirectSoundVtbl;$/;"	t
ma_IDirectSound_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSound_AddRef(ma_IDirectSound* pThis)                         /;"	f	struct:ma_IDirectSound
ma_IDirectSound_Compact	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSound_Compact(ma_IDirectSound* pThis)                        /;"	f	struct:ma_IDirectSound
ma_IDirectSound_CreateSoundBuffer	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSound_CreateSoundBuffer(ma_IDirectSound* pThis, const MA_DSBU/;"	f	struct:ma_IDirectSound
ma_IDirectSound_DuplicateSoundBuffer	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSound_DuplicateSoundBuffer(ma_IDirectSound* pThis, ma_IDirect/;"	f	struct:ma_IDirectSound
ma_IDirectSound_GetCaps	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSound_GetCaps(ma_IDirectSound* pThis, MA_DSCAPS* pDSCaps)    /;"	f	struct:ma_IDirectSound
ma_IDirectSound_GetSpeakerConfig	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSound_GetSpeakerConfig(ma_IDirectSound* pThis, DWORD* pSpeake/;"	f	struct:ma_IDirectSound
ma_IDirectSound_Initialize	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSound_Initialize(ma_IDirectSound* pThis, const GUID* pGuidDev/;"	f	struct:ma_IDirectSound
ma_IDirectSound_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSound_QueryInterface(ma_IDirectSound* pThis, const IID* const/;"	f	struct:ma_IDirectSound
ma_IDirectSound_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IDirectSound_Release(ma_IDirectSound* pThis)                        /;"	f	struct:ma_IDirectSound
ma_IDirectSound_SetCooperativeLevel	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSound_SetCooperativeLevel(ma_IDirectSound* pThis, HWND hwnd, /;"	f	struct:ma_IDirectSound
ma_IDirectSound_SetSpeakerConfig	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IDirectSound_SetSpeakerConfig(ma_IDirectSound* pThis, DWORD dwSpeake/;"	f	struct:ma_IDirectSound
ma_IMMDevice	../ext/miniaudio.h	/^typedef struct ma_IMMDevice                                ma_IMMDevice;$/;"	s
ma_IMMDevice	../ext/miniaudio.h	/^typedef struct ma_IMMDevice                                ma_IMMDevice;$/;"	t
ma_IMMDeviceCollection	../ext/miniaudio.h	/^    struct ma_IMMDeviceCollection$/;"	s
ma_IMMDeviceCollection	../ext/miniaudio.h	/^typedef struct ma_IMMDeviceCollection                      ma_IMMDeviceCollection;$/;"	s
ma_IMMDeviceCollection	../ext/miniaudio.h	/^typedef struct ma_IMMDeviceCollection                      ma_IMMDeviceCollection;$/;"	t
ma_IMMDeviceCollectionVtbl	../ext/miniaudio.h	/^    } ma_IMMDeviceCollectionVtbl;$/;"	t
ma_IMMDeviceCollection_AddRef	../ext/miniaudio.h	/^    static MA_INLINE ULONG   ma_IMMDeviceCollection_AddRef(ma_IMMDeviceCollection* pThis)       /;"	f	struct:ma_IMMDeviceCollection
ma_IMMDeviceCollection_GetCount	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDeviceCollection_GetCount(ma_IMMDeviceCollection* pThis, UINT/;"	f	struct:ma_IMMDeviceCollection
ma_IMMDeviceCollection_Item	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDeviceCollection_Item(ma_IMMDeviceCollection* pThis, UINT nDe/;"	f	struct:ma_IMMDeviceCollection
ma_IMMDeviceCollection_QueryInterface	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDeviceCollection_QueryInterface(ma_IMMDeviceCollection* pThis/;"	f	struct:ma_IMMDeviceCollection
ma_IMMDeviceCollection_Release	../ext/miniaudio.h	/^    static MA_INLINE ULONG   ma_IMMDeviceCollection_Release(ma_IMMDeviceCollection* pThis)      /;"	f	struct:ma_IMMDeviceCollection
ma_IMMDeviceEnumerator	../ext/miniaudio.h	/^typedef struct ma_IMMDeviceEnumerator                      ma_IMMDeviceEnumerator;$/;"	s
ma_IMMDeviceEnumerator	../ext/miniaudio.h	/^typedef struct ma_IMMDeviceEnumerator                      ma_IMMDeviceEnumerator;$/;"	t
ma_IMMDeviceEnumeratorVtbl	../ext/miniaudio.h	/^    } ma_IMMDeviceEnumeratorVtbl;$/;"	t	struct:ma_IUnknown
ma_IMMDeviceEnumerator_AddRef	../ext/miniaudio.h	/^    static MA_INLINE ULONG   ma_IMMDeviceEnumerator_AddRef(ma_IMMDeviceEnumerator* pThis)       /;"	f
ma_IMMDeviceEnumerator_EnumAudioEndpoints	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDeviceEnumerator_EnumAudioEndpoints(ma_IMMDeviceEnumerator* p/;"	f
ma_IMMDeviceEnumerator_GetDefaultAudioEndpoint	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDeviceEnumerator_GetDefaultAudioEndpoint(ma_IMMDeviceEnumerat/;"	f
ma_IMMDeviceEnumerator_GetDevice	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDeviceEnumerator_GetDevice(ma_IMMDeviceEnumerator* pThis, LPC/;"	f
ma_IMMDeviceEnumerator_QueryInterface	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDeviceEnumerator_QueryInterface(ma_IMMDeviceEnumerator* pThis/;"	f
ma_IMMDeviceEnumerator_RegisterEndpointNotificationCallback	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDeviceEnumerator_RegisterEndpointNotificationCallback(ma_IMMD/;"	f
ma_IMMDeviceEnumerator_Release	../ext/miniaudio.h	/^    static MA_INLINE ULONG   ma_IMMDeviceEnumerator_Release(ma_IMMDeviceEnumerator* pThis)      /;"	f
ma_IMMDeviceEnumerator_UnregisterEndpointNotificationCallback	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDeviceEnumerator_UnregisterEndpointNotificationCallback(ma_IM/;"	f
ma_IMMDeviceVtbl	../ext/miniaudio.h	/^    } ma_IMMDeviceVtbl;$/;"	t	struct:ma_IMMDeviceCollection
ma_IMMDevice_Activate	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDevice_Activate(ma_IMMDevice* pThis, const IID* const iid, DW/;"	f
ma_IMMDevice_AddRef	../ext/miniaudio.h	/^    static MA_INLINE ULONG   ma_IMMDevice_AddRef(ma_IMMDevice* pThis)                           /;"	f
ma_IMMDevice_GetId	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDevice_GetId(ma_IMMDevice* pThis, LPWSTR *pID)               /;"	f
ma_IMMDevice_GetState	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDevice_GetState(ma_IMMDevice* pThis, DWORD *pState)          /;"	f
ma_IMMDevice_OpenPropertyStore	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDevice_OpenPropertyStore(ma_IMMDevice* pThis, DWORD stgmAcces/;"	f
ma_IMMDevice_QueryInterface	../ext/miniaudio.h	/^    static MA_INLINE HRESULT ma_IMMDevice_QueryInterface(ma_IMMDevice* pThis, const IID* const r/;"	f
ma_IMMDevice_Release	../ext/miniaudio.h	/^    static MA_INLINE ULONG   ma_IMMDevice_Release(ma_IMMDevice* pThis)                          /;"	f
ma_IMMNotificationClient	../ext/miniaudio.h	/^} ma_IMMNotificationClient;$/;"	t	struct:ma_job
ma_IMMNotificationClientVtbl	../ext/miniaudio.h	/^    } ma_IMMNotificationClientVtbl;$/;"	t	struct:ma_IUnknown
ma_IMMNotificationClient_AddRef	../ext/miniaudio.h	/^static ULONG STDMETHODCALLTYPE ma_IMMNotificationClient_AddRef(ma_IMMNotificationClient* pThis)$/;"	f	struct:ma_completion_handler_uwp
ma_IMMNotificationClient_OnDefaultDeviceChanged	../ext/miniaudio.h	/^static HRESULT STDMETHODCALLTYPE ma_IMMNotificationClient_OnDefaultDeviceChanged(ma_IMMNotificat/;"	f	struct:ma_completion_handler_uwp
ma_IMMNotificationClient_OnDeviceAdded	../ext/miniaudio.h	/^static HRESULT STDMETHODCALLTYPE ma_IMMNotificationClient_OnDeviceAdded(ma_IMMNotificationClient/;"	f	struct:ma_completion_handler_uwp
ma_IMMNotificationClient_OnDeviceRemoved	../ext/miniaudio.h	/^static HRESULT STDMETHODCALLTYPE ma_IMMNotificationClient_OnDeviceRemoved(ma_IMMNotificationClie/;"	f	struct:ma_completion_handler_uwp
ma_IMMNotificationClient_OnDeviceStateChanged	../ext/miniaudio.h	/^static HRESULT STDMETHODCALLTYPE ma_IMMNotificationClient_OnDeviceStateChanged(ma_IMMNotificatio/;"	f	struct:ma_completion_handler_uwp
ma_IMMNotificationClient_OnPropertyValueChanged	../ext/miniaudio.h	/^static HRESULT STDMETHODCALLTYPE ma_IMMNotificationClient_OnPropertyValueChanged(ma_IMMNotificat/;"	f	struct:ma_completion_handler_uwp
ma_IMMNotificationClient_QueryInterface	../ext/miniaudio.h	/^static HRESULT STDMETHODCALLTYPE ma_IMMNotificationClient_QueryInterface(ma_IMMNotificationClien/;"	f	struct:ma_completion_handler_uwp
ma_IMMNotificationClient_Release	../ext/miniaudio.h	/^static ULONG STDMETHODCALLTYPE ma_IMMNotificationClient_Release(ma_IMMNotificationClient* pThis)$/;"	f	struct:ma_completion_handler_uwp
ma_IPropertyStore	../ext/miniaudio.h	/^typedef struct ma_IPropertyStore                           ma_IPropertyStore;$/;"	s
ma_IPropertyStore	../ext/miniaudio.h	/^typedef struct ma_IPropertyStore                           ma_IPropertyStore;$/;"	t
ma_IPropertyStoreVtbl	../ext/miniaudio.h	/^} ma_IPropertyStoreVtbl;$/;"	t	struct:ma_IActivateAudioInterfaceAsyncOperation
ma_IPropertyStore_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IPropertyStore_AddRef(ma_IPropertyStore* pThis)                     /;"	f
ma_IPropertyStore_Commit	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IPropertyStore_Commit(ma_IPropertyStore* pThis)                     /;"	f
ma_IPropertyStore_GetAt	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IPropertyStore_GetAt(ma_IPropertyStore* pThis, DWORD propIndex, PROP/;"	f
ma_IPropertyStore_GetCount	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IPropertyStore_GetCount(ma_IPropertyStore* pThis, DWORD* pPropCount)/;"	f
ma_IPropertyStore_GetValue	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IPropertyStore_GetValue(ma_IPropertyStore* pThis, const PROPERTYKEY*/;"	f
ma_IPropertyStore_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IPropertyStore_QueryInterface(ma_IPropertyStore* pThis, const IID* c/;"	f
ma_IPropertyStore_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IPropertyStore_Release(ma_IPropertyStore* pThis)                    /;"	f
ma_IPropertyStore_SetValue	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IPropertyStore_SetValue(ma_IPropertyStore* pThis, const PROPERTYKEY*/;"	f
ma_IUnknown	../ext/miniaudio.h	/^struct ma_IUnknown$/;"	s
ma_IUnknown	../ext/miniaudio.h	/^typedef struct ma_IUnknown                                 ma_IUnknown;$/;"	s
ma_IUnknown	../ext/miniaudio.h	/^typedef struct ma_IUnknown                                 ma_IUnknown;$/;"	t
ma_IUnknownVtbl	../ext/miniaudio.h	/^} ma_IUnknownVtbl;$/;"	t
ma_IUnknown_AddRef	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IUnknown_AddRef(ma_IUnknown* pThis)                                 /;"	f	struct:ma_IUnknown
ma_IUnknown_QueryInterface	../ext/miniaudio.h	/^static MA_INLINE HRESULT ma_IUnknown_QueryInterface(ma_IUnknown* pThis, const IID* const riid, v/;"	f	struct:ma_IUnknown
ma_IUnknown_Release	../ext/miniaudio.h	/^static MA_INLINE ULONG   ma_IUnknown_Release(ma_IUnknown* pThis)                                /;"	f	struct:ma_IUnknown
ma_OSVERSIONINFOEXW	../ext/miniaudio.h	/^} ma_OSVERSIONINFOEXW;$/;"	t
ma_PropVariantClear	../ext/miniaudio.h	/^    #define ma_PropVariantClear(pContext, pvar)                                        ((MA_PFN_/;"	M
ma_PropVariantClear	../ext/miniaudio.h	/^    #define ma_PropVariantClear(pContext, pvar)                                        PropVaria/;"	M
ma_PropVariantInit	../ext/miniaudio.h	/^static MA_INLINE void ma_PropVariantInit(PROPVARIANT* pProp)$/;"	f
ma_WASAPIDeviceInterface	../ext/miniaudio.h	/^typedef ma_IMMDevice ma_WASAPIDeviceInterface;$/;"	t	struct:ma_completion_handler_uwp
ma_WASAPIDeviceInterface	../ext/miniaudio.h	/^typedef ma_IUnknown ma_WASAPIDeviceInterface;$/;"	t	struct:ma_completion_handler_uwp
ma__free_default	../ext/miniaudio.h	/^static void ma__free_default(void* p, void* pUserData)$/;"	f
ma__malloc_default	../ext/miniaudio.h	/^static void* ma__malloc_default(size_t sz, void* pUserData)$/;"	f
ma__realloc_default	../ext/miniaudio.h	/^static void* ma__realloc_default(void* p, size_t sz, void* pUserData)$/;"	f
ma_aaudio_content_type	../ext/miniaudio.h	/^} ma_aaudio_content_type;$/;"	t
ma_aaudio_content_type_default	../ext/miniaudio.h	/^    ma_aaudio_content_type_default = 0,             \/* Leaves the content type unset. *\/$/;"	e
ma_aaudio_content_type_movie	../ext/miniaudio.h	/^    ma_aaudio_content_type_movie,                   \/* AAUDIO_CONTENT_TYPE_MOVIE *\/$/;"	e
ma_aaudio_content_type_music	../ext/miniaudio.h	/^    ma_aaudio_content_type_music,                   \/* AAUDIO_CONTENT_TYPE_MUSIC *\/$/;"	e
ma_aaudio_content_type_sonification	../ext/miniaudio.h	/^    ma_aaudio_content_type_sonification,            \/* AAUDIO_CONTENT_TYPE_SONIFICATION *\/$/;"	e
ma_aaudio_content_type_speech	../ext/miniaudio.h	/^    ma_aaudio_content_type_speech                   \/* AAUDIO_CONTENT_TYPE_SPEECH *\/$/;"	e
ma_aaudio_input_preset	../ext/miniaudio.h	/^} ma_aaudio_input_preset;$/;"	t
ma_aaudio_input_preset_camcorder	../ext/miniaudio.h	/^    ma_aaudio_input_preset_camcorder,               \/* AAUDIO_INPUT_PRESET_CAMCORDER *\/$/;"	e
ma_aaudio_input_preset_default	../ext/miniaudio.h	/^    ma_aaudio_input_preset_default = 0,             \/* Leaves the input preset unset. *\/$/;"	e
ma_aaudio_input_preset_generic	../ext/miniaudio.h	/^    ma_aaudio_input_preset_generic,                 \/* AAUDIO_INPUT_PRESET_GENERIC *\/$/;"	e
ma_aaudio_input_preset_unprocessed	../ext/miniaudio.h	/^    ma_aaudio_input_preset_unprocessed,             \/* AAUDIO_INPUT_PRESET_UNPROCESSED *\/$/;"	e
ma_aaudio_input_preset_voice_communication	../ext/miniaudio.h	/^    ma_aaudio_input_preset_voice_communication,     \/* AAUDIO_INPUT_PRESET_VOICE_COMMUNICATION /;"	e
ma_aaudio_input_preset_voice_performance	../ext/miniaudio.h	/^    ma_aaudio_input_preset_voice_performance        \/* AAUDIO_INPUT_PRESET_VOICE_PERFORMANCE *\/$/;"	e
ma_aaudio_input_preset_voice_recognition	../ext/miniaudio.h	/^    ma_aaudio_input_preset_voice_recognition,       \/* AAUDIO_INPUT_PRESET_VOICE_RECOGNITION *\/$/;"	e
ma_aaudio_usage	../ext/miniaudio.h	/^} ma_aaudio_usage;$/;"	t
ma_aaudio_usage_alarm	../ext/miniaudio.h	/^    ma_aaudio_usage_alarm,                          \/* AAUDIO_USAGE_ALARM *\/$/;"	e
ma_aaudio_usage_announcement	../ext/miniaudio.h	/^    ma_aaudio_usage_announcement,                   \/* AAUDIO_SYSTEM_USAGE_ANNOUNCEMENT *\/$/;"	e
ma_aaudio_usage_assistance_accessibility	../ext/miniaudio.h	/^    ma_aaudio_usage_assistance_accessibility,       \/* AAUDIO_USAGE_ASSISTANCE_ACCESSIBILITY *\/$/;"	e
ma_aaudio_usage_assistance_navigation_guidance	../ext/miniaudio.h	/^    ma_aaudio_usage_assistance_navigation_guidance, \/* AAUDIO_USAGE_ASSISTANCE_NAVIGATION_GUIDA/;"	e
ma_aaudio_usage_assistance_sonification	../ext/miniaudio.h	/^    ma_aaudio_usage_assistance_sonification,        \/* AAUDIO_USAGE_ASSISTANCE_SONIFICATION *\/$/;"	e
ma_aaudio_usage_assitant	../ext/miniaudio.h	/^    ma_aaudio_usage_assitant,                       \/* AAUDIO_USAGE_ASSISTANT *\/$/;"	e
ma_aaudio_usage_default	../ext/miniaudio.h	/^    ma_aaudio_usage_default = 0,                    \/* Leaves the usage type unset. *\/$/;"	e
ma_aaudio_usage_emergency	../ext/miniaudio.h	/^    ma_aaudio_usage_emergency,                      \/* AAUDIO_SYSTEM_USAGE_EMERGENCY *\/$/;"	e
ma_aaudio_usage_game	../ext/miniaudio.h	/^    ma_aaudio_usage_game,                           \/* AAUDIO_USAGE_GAME *\/$/;"	e
ma_aaudio_usage_media	../ext/miniaudio.h	/^    ma_aaudio_usage_media,                          \/* AAUDIO_USAGE_MEDIA *\/$/;"	e
ma_aaudio_usage_notification	../ext/miniaudio.h	/^    ma_aaudio_usage_notification,                   \/* AAUDIO_USAGE_NOTIFICATION *\/$/;"	e
ma_aaudio_usage_notification_event	../ext/miniaudio.h	/^    ma_aaudio_usage_notification_event,             \/* AAUDIO_USAGE_NOTIFICATION_EVENT *\/$/;"	e
ma_aaudio_usage_notification_ringtone	../ext/miniaudio.h	/^    ma_aaudio_usage_notification_ringtone,          \/* AAUDIO_USAGE_NOTIFICATION_RINGTONE *\/$/;"	e
ma_aaudio_usage_safety	../ext/miniaudio.h	/^    ma_aaudio_usage_safety,                         \/* AAUDIO_SYSTEM_USAGE_SAFETY *\/$/;"	e
ma_aaudio_usage_vehicle_status	../ext/miniaudio.h	/^    ma_aaudio_usage_vehicle_status,                 \/* AAUDIO_SYSTEM_USAGE_VEHICLE_STATUS *\/$/;"	e
ma_aaudio_usage_voice_communication	../ext/miniaudio.h	/^    ma_aaudio_usage_voice_communication,            \/* AAUDIO_USAGE_VOICE_COMMUNICATION *\/$/;"	e
ma_aaudio_usage_voice_communication_signalling	../ext/miniaudio.h	/^    ma_aaudio_usage_voice_communication_signalling  \/* AAUDIO_USAGE_VOICE_COMMUNICATION_SIGNALL/;"	e
ma_abs	../ext/miniaudio.h	/^#define ma_abs(x)                   (((x) > 0) ? (x) : -(x))$/;"	M
ma_add_native_data_format_to_device_info_from_WAVEFORMATEX	../ext/miniaudio.h	/^static void ma_add_native_data_format_to_device_info_from_WAVEFORMATEX(const WAVEFORMATEX* pWF, /;"	f	struct:ma_completion_handler_uwp
ma_align	../ext/miniaudio.h	/^#define ma_align(x, a)              ((x + (a-1)) & ~(a-1))$/;"	M
ma_align_64	../ext/miniaudio.h	/^#define ma_align_64(x)              ma_align(x, 8)$/;"	M
ma_aligned_free	../ext/miniaudio.h	/^MA_API void ma_aligned_free(void* p, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f	struct:ma_resampler_config
ma_aligned_malloc	../ext/miniaudio.h	/^MA_API void* ma_aligned_malloc(size_t sz, size_t alignment, const ma_allocation_callbacks* pAllo/;"	f	struct:ma_resampler_config
ma_allocation_callbacks	../ext/miniaudio.h	/^} ma_allocation_callbacks;$/;"	t
ma_allocation_callbacks_init_copy	../ext/miniaudio.h	/^static ma_result ma_allocation_callbacks_init_copy(ma_allocation_callbacks* pDst, const ma_alloc/;"	f
ma_allocation_callbacks_init_default	../ext/miniaudio.h	/^static ma_allocation_callbacks ma_allocation_callbacks_init_default(void)$/;"	f
ma_apply_volume_factor_f32	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_f32(float* pSamples, ma_uint64 sampleCount, float factor);$/;"	f	struct:ma_device
ma_apply_volume_factor_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_pcm_frames(void* pFrames, ma_uint64 frameCount, ma_format for/;"	f	struct:ma_device
ma_apply_volume_factor_pcm_frames_f32	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_pcm_frames_f32(float* pFrames, ma_uint64 frameCount, ma_uint3/;"	f	struct:ma_device
ma_apply_volume_factor_pcm_frames_s16	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_pcm_frames_s16(ma_int16* pFrames, ma_uint64 frameCount, ma_ui/;"	f	struct:ma_device
ma_apply_volume_factor_pcm_frames_s24	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_pcm_frames_s24(void* pFrames, ma_uint64 frameCount, ma_uint32/;"	f	struct:ma_device
ma_apply_volume_factor_pcm_frames_s32	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_pcm_frames_s32(ma_int32* pFrames, ma_uint64 frameCount, ma_ui/;"	f	struct:ma_device
ma_apply_volume_factor_pcm_frames_u8	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_pcm_frames_u8(ma_uint8* pFrames, ma_uint64 frameCount, ma_uin/;"	f	struct:ma_device
ma_apply_volume_factor_s16	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_s16(ma_int16* pSamples, ma_uint64 sampleCount, float factor);$/;"	f	struct:ma_device
ma_apply_volume_factor_s24	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_s24(void* pSamples, ma_uint64 sampleCount, float factor);$/;"	f	struct:ma_device
ma_apply_volume_factor_s32	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_s32(ma_int32* pSamples, ma_uint64 sampleCount, float factor);$/;"	f	struct:ma_device
ma_apply_volume_factor_u8	../ext/miniaudio.h	/^MA_API void ma_apply_volume_factor_u8(ma_uint8* pSamples, ma_uint64 sampleCount, float factor);$/;"	f	struct:ma_device
ma_async_notification	../ext/miniaudio.h	/^typedef void ma_async_notification;$/;"	t	struct:ma_resampler_config
ma_async_notification_callbacks	../ext/miniaudio.h	/^} ma_async_notification_callbacks;$/;"	t	struct:ma_resampler_config
ma_async_notification_event	../ext/miniaudio.h	/^} ma_async_notification_event;$/;"	t	struct:ma_resampler_config
ma_async_notification_event__on_signal	../ext/miniaudio.h	/^static void ma_async_notification_event__on_signal(ma_async_notification* pNotification)$/;"	f
ma_async_notification_event_init	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_event_init(ma_async_notification_event* pNotificationEven/;"	f
ma_async_notification_event_init	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_event_init(ma_async_notification_event* pNotificationEven/;"	f	struct:ma_resampler_config
ma_async_notification_event_signal	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_event_signal(ma_async_notification_event* pNotificationEv/;"	f
ma_async_notification_event_signal	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_event_signal(ma_async_notification_event* pNotificationEv/;"	f	struct:ma_resampler_config
ma_async_notification_event_uninit	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_event_uninit(ma_async_notification_event* pNotificationEv/;"	f
ma_async_notification_event_uninit	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_event_uninit(ma_async_notification_event* pNotificationEv/;"	f	struct:ma_resampler_config
ma_async_notification_event_wait	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_event_wait(ma_async_notification_event* pNotificationEven/;"	f
ma_async_notification_event_wait	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_event_wait(ma_async_notification_event* pNotificationEven/;"	f	struct:ma_resampler_config
ma_async_notification_poll	../ext/miniaudio.h	/^} ma_async_notification_poll;$/;"	t	struct:ma_resampler_config
ma_async_notification_poll__on_signal	../ext/miniaudio.h	/^static void ma_async_notification_poll__on_signal(ma_async_notification* pNotification)$/;"	f
ma_async_notification_poll_init	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_poll_init(ma_async_notification_poll* pNotificationPoll)$/;"	f
ma_async_notification_poll_init	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_poll_init(ma_async_notification_poll* pNotificationPoll);$/;"	f	struct:ma_resampler_config
ma_async_notification_poll_is_signalled	../ext/miniaudio.h	/^MA_API ma_bool32 ma_async_notification_poll_is_signalled(const ma_async_notification_poll* pNoti/;"	f
ma_async_notification_poll_is_signalled	../ext/miniaudio.h	/^MA_API ma_bool32 ma_async_notification_poll_is_signalled(const ma_async_notification_poll* pNoti/;"	f	struct:ma_resampler_config
ma_async_notification_signal	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_signal(ma_async_notification* pNotification)$/;"	f
ma_async_notification_signal	../ext/miniaudio.h	/^MA_API ma_result ma_async_notification_signal(ma_async_notification* pNotification);$/;"	f	struct:ma_resampler_config
ma_attenuation_model	../ext/miniaudio.h	/^} ma_attenuation_model;$/;"	t
ma_attenuation_model_exponential	../ext/miniaudio.h	/^    ma_attenuation_model_exponential    \/* Exponential attenuation. Equivalent to OpenAL's AL_E/;"	e
ma_attenuation_model_inverse	../ext/miniaudio.h	/^    ma_attenuation_model_inverse,       \/* Equivalent to OpenAL's AL_INVERSE_DISTANCE_CLAMPED. /;"	e
ma_attenuation_model_linear	../ext/miniaudio.h	/^    ma_attenuation_model_linear,        \/* Linear attenuation. Equivalent to OpenAL's AL_LINEAR/;"	e
ma_attenuation_model_none	../ext/miniaudio.h	/^    ma_attenuation_model_none,          \/* No distance attenuation and no spatialization. *\/$/;"	e
ma_audio_buffer	../ext/miniaudio.h	/^} ma_audio_buffer;$/;"	t	struct:ma_device
ma_audio_buffer_alloc_and_init	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_alloc_and_init(const ma_audio_buffer_config* pConfig, ma_audio_/;"	f	struct:ma_device
ma_audio_buffer_at_end	../ext/miniaudio.h	/^MA_API ma_bool32 ma_audio_buffer_at_end(const ma_audio_buffer* pAudioBuffer);$/;"	f	struct:ma_device
ma_audio_buffer_config	../ext/miniaudio.h	/^} ma_audio_buffer_config;$/;"	t	struct:ma_device
ma_audio_buffer_config_init	../ext/miniaudio.h	/^MA_API ma_audio_buffer_config ma_audio_buffer_config_init(ma_format format, ma_uint32 channels, /;"	f	struct:ma_device
ma_audio_buffer_get_available_frames	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_get_available_frames(const ma_audio_buffer* pAudioBuffer, ma_ui/;"	f	struct:ma_device
ma_audio_buffer_get_cursor_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_get_cursor_in_pcm_frames(const ma_audio_buffer* pAudioBuffer, m/;"	f	struct:ma_device
ma_audio_buffer_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_get_length_in_pcm_frames(const ma_audio_buffer* pAudioBuffer, m/;"	f	struct:ma_device
ma_audio_buffer_init	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_init(const ma_audio_buffer_config* pConfig, ma_audio_buffer* pA/;"	f	struct:ma_device
ma_audio_buffer_init_copy	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_init_copy(const ma_audio_buffer_config* pConfig, ma_audio_buffe/;"	f	struct:ma_device
ma_audio_buffer_map	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_map(ma_audio_buffer* pAudioBuffer, void** ppFramesOut, ma_uint6/;"	f	struct:ma_device
ma_audio_buffer_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_uint64 ma_audio_buffer_read_pcm_frames(ma_audio_buffer* pAudioBuffer, void* pFramesOut/;"	f	struct:ma_device
ma_audio_buffer_ref	../ext/miniaudio.h	/^} ma_audio_buffer_ref;$/;"	t	struct:ma_device
ma_audio_buffer_ref_at_end	../ext/miniaudio.h	/^MA_API ma_bool32 ma_audio_buffer_ref_at_end(const ma_audio_buffer_ref* pAudioBufferRef);$/;"	f	struct:ma_device
ma_audio_buffer_ref_get_available_frames	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_ref_get_available_frames(const ma_audio_buffer_ref* pAudioBuffe/;"	f	struct:ma_device
ma_audio_buffer_ref_get_cursor_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_ref_get_cursor_in_pcm_frames(const ma_audio_buffer_ref* pAudioB/;"	f	struct:ma_device
ma_audio_buffer_ref_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_ref_get_length_in_pcm_frames(const ma_audio_buffer_ref* pAudioB/;"	f	struct:ma_device
ma_audio_buffer_ref_init	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_ref_init(ma_format format, ma_uint32 channels, const void* pDat/;"	f	struct:ma_device
ma_audio_buffer_ref_map	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_ref_map(ma_audio_buffer_ref* pAudioBufferRef, void** ppFramesOu/;"	f	struct:ma_device
ma_audio_buffer_ref_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_uint64 ma_audio_buffer_ref_read_pcm_frames(ma_audio_buffer_ref* pAudioBufferRef, void*/;"	f	struct:ma_device
ma_audio_buffer_ref_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_ref_seek_to_pcm_frame(ma_audio_buffer_ref* pAudioBufferRef, ma_/;"	f	struct:ma_device
ma_audio_buffer_ref_set_data	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_ref_set_data(ma_audio_buffer_ref* pAudioBufferRef, const void* /;"	f	struct:ma_device
ma_audio_buffer_ref_uninit	../ext/miniaudio.h	/^MA_API void ma_audio_buffer_ref_uninit(ma_audio_buffer_ref* pAudioBufferRef);$/;"	f	struct:ma_device
ma_audio_buffer_ref_unmap	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_ref_unmap(ma_audio_buffer_ref* pAudioBufferRef, ma_uint64 frame/;"	f	struct:ma_device
ma_audio_buffer_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_seek_to_pcm_frame(ma_audio_buffer* pAudioBuffer, ma_uint64 fram/;"	f	struct:ma_device
ma_audio_buffer_uninit	../ext/miniaudio.h	/^MA_API void ma_audio_buffer_uninit(ma_audio_buffer* pAudioBuffer);$/;"	f	struct:ma_device
ma_audio_buffer_uninit_and_free	../ext/miniaudio.h	/^MA_API void ma_audio_buffer_uninit_and_free(ma_audio_buffer* pAudioBuffer);$/;"	f	struct:ma_device
ma_audio_buffer_unmap	../ext/miniaudio.h	/^MA_API ma_result ma_audio_buffer_unmap(ma_audio_buffer* pAudioBuffer, ma_uint64 frameCount);    /;"	f	struct:ma_device
ma_backend	../ext/miniaudio.h	/^} ma_backend;$/;"	t	struct:ma_job
ma_backend_aaudio	../ext/miniaudio.h	/^    ma_backend_aaudio,$/;"	e	struct:ma_job
ma_backend_alsa	../ext/miniaudio.h	/^    ma_backend_alsa,$/;"	e	struct:ma_job
ma_backend_audio4	../ext/miniaudio.h	/^    ma_backend_audio4,$/;"	e	struct:ma_job
ma_backend_callbacks	../ext/miniaudio.h	/^typedef struct ma_backend_callbacks ma_backend_callbacks;$/;"	s
ma_backend_callbacks	../ext/miniaudio.h	/^typedef struct ma_backend_callbacks ma_backend_callbacks;$/;"	t
ma_backend_coreaudio	../ext/miniaudio.h	/^    ma_backend_coreaudio,$/;"	e	struct:ma_job
ma_backend_custom	../ext/miniaudio.h	/^    ma_backend_custom,  \/* <-- Custom backend, with callbacks defined by the context config. *\/$/;"	e	struct:ma_job
ma_backend_dsound	../ext/miniaudio.h	/^    ma_backend_dsound,$/;"	e	struct:ma_job
ma_backend_jack	../ext/miniaudio.h	/^    ma_backend_jack,$/;"	e	struct:ma_job
ma_backend_null	../ext/miniaudio.h	/^    ma_backend_null     \/* <-- Must always be the last item. Lowest priority, and used as the t/;"	e	struct:ma_job
ma_backend_opensl	../ext/miniaudio.h	/^    ma_backend_opensl,$/;"	e	struct:ma_job
ma_backend_oss	../ext/miniaudio.h	/^    ma_backend_oss,$/;"	e	struct:ma_job
ma_backend_pulseaudio	../ext/miniaudio.h	/^    ma_backend_pulseaudio,$/;"	e	struct:ma_job
ma_backend_sndio	../ext/miniaudio.h	/^    ma_backend_sndio,$/;"	e	struct:ma_job
ma_backend_wasapi	../ext/miniaudio.h	/^    ma_backend_wasapi,$/;"	e	struct:ma_job
ma_backend_webaudio	../ext/miniaudio.h	/^    ma_backend_webaudio,$/;"	e	struct:ma_job
ma_backend_winmm	../ext/miniaudio.h	/^    ma_backend_winmm,$/;"	e	struct:ma_job
ma_biquad	../ext/miniaudio.h	/^} ma_biquad;$/;"	t
ma_biquad_clear_cache	../ext/miniaudio.h	/^MA_API ma_result ma_biquad_clear_cache(ma_biquad* pBQ);$/;"	f
ma_biquad_config	../ext/miniaudio.h	/^} ma_biquad_config;$/;"	t
ma_biquad_config_init	../ext/miniaudio.h	/^MA_API ma_biquad_config ma_biquad_config_init(ma_format format, ma_uint32 channels, double b0, d/;"	f
ma_biquad_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_biquad_get_heap_size(const ma_biquad_config* pConfig, size_t* pHeapSizeInByt/;"	f
ma_biquad_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_biquad_get_latency(const ma_biquad* pBQ);$/;"	f
ma_biquad_init	../ext/miniaudio.h	/^MA_API ma_result ma_biquad_init(const ma_biquad_config* pConfig, const ma_allocation_callbacks* /;"	f
ma_biquad_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_biquad_init_preallocated(const ma_biquad_config* pConfig, void* pHeap, ma_bi/;"	f
ma_biquad_node	../ext/miniaudio.h	/^} ma_biquad_node;$/;"	t
ma_biquad_node_config	../ext/miniaudio.h	/^} ma_biquad_node_config;$/;"	t
ma_biquad_node_config_init	../ext/miniaudio.h	/^MA_API ma_biquad_node_config ma_biquad_node_config_init(ma_uint32 channels, float b0, float b1, /;"	f
ma_biquad_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_biquad_node_init(ma_node_graph* pNodeGraph, const ma_biquad_node_config* pCo/;"	f
ma_biquad_node_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_biquad_node_reinit(const ma_biquad_config* pConfig, ma_biquad_node* pNode);$/;"	f
ma_biquad_node_uninit	../ext/miniaudio.h	/^MA_API void ma_biquad_node_uninit(ma_biquad_node* pNode, const ma_allocation_callbacks* pAllocat/;"	f
ma_biquad_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_biquad_process_pcm_frames(ma_biquad* pBQ, void* pFramesOut, const void* pFra/;"	f
ma_biquad_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_biquad_reinit(const ma_biquad_config* pConfig, ma_biquad* pBQ);$/;"	f
ma_biquad_uninit	../ext/miniaudio.h	/^MA_API void ma_biquad_uninit(ma_biquad* pBQ, const ma_allocation_callbacks* pAllocationCallbacks/;"	f
ma_blend_f32	../ext/miniaudio.h	/^MA_API void ma_blend_f32(float* pOut, float* pInA, float* pInB, float factor, ma_uint32 channels/;"	f	struct:ma_resampler_config
ma_bool32	../ext/miniaudio.h	/^typedef ma_uint32   ma_bool32;$/;"	t
ma_bool8	../ext/miniaudio.h	/^typedef ma_uint8    ma_bool8;$/;"	t
ma_bpf	../ext/miniaudio.h	/^} ma_bpf;$/;"	t
ma_bpf2	../ext/miniaudio.h	/^} ma_bpf2;$/;"	t
ma_bpf2_config	../ext/miniaudio.h	/^} ma_bpf2_config;$/;"	t
ma_bpf2_config_init	../ext/miniaudio.h	/^MA_API ma_bpf2_config ma_bpf2_config_init(ma_format format, ma_uint32 channels, ma_uint32 sample/;"	f
ma_bpf2_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_bpf2_get_heap_size(const ma_bpf2_config* pConfig, size_t* pHeapSizeInBytes);$/;"	f
ma_bpf2_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_bpf2_get_latency(const ma_bpf2* pBPF);$/;"	f
ma_bpf2_init	../ext/miniaudio.h	/^MA_API ma_result ma_bpf2_init(const ma_bpf2_config* pConfig, const ma_allocation_callbacks* pAll/;"	f
ma_bpf2_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_bpf2_init_preallocated(const ma_bpf2_config* pConfig, void* pHeap, ma_bpf2* /;"	f
ma_bpf2_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_bpf2_process_pcm_frames(ma_bpf2* pBPF, void* pFramesOut, const void* pFrames/;"	f
ma_bpf2_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_bpf2_reinit(const ma_bpf2_config* pConfig, ma_bpf2* pBPF);$/;"	f
ma_bpf2_uninit	../ext/miniaudio.h	/^MA_API void ma_bpf2_uninit(ma_bpf2* pBPF, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f
ma_bpf_config	../ext/miniaudio.h	/^} ma_bpf_config;$/;"	t
ma_bpf_config_init	../ext/miniaudio.h	/^MA_API ma_bpf_config ma_bpf_config_init(ma_format format, ma_uint32 channels, ma_uint32 sampleRa/;"	f
ma_bpf_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_bpf_get_heap_size(const ma_bpf_config* pConfig, size_t* pHeapSizeInBytes);$/;"	f
ma_bpf_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_bpf_get_latency(const ma_bpf* pBPF);$/;"	f
ma_bpf_init	../ext/miniaudio.h	/^MA_API ma_result ma_bpf_init(const ma_bpf_config* pConfig, const ma_allocation_callbacks* pAlloc/;"	f
ma_bpf_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_bpf_init_preallocated(const ma_bpf_config* pConfig, void* pHeap, ma_bpf* pBP/;"	f
ma_bpf_node	../ext/miniaudio.h	/^} ma_bpf_node;$/;"	t
ma_bpf_node_config	../ext/miniaudio.h	/^} ma_bpf_node_config;$/;"	t
ma_bpf_node_config_init	../ext/miniaudio.h	/^MA_API ma_bpf_node_config ma_bpf_node_config_init(ma_uint32 channels, ma_uint32 sampleRate, doub/;"	f
ma_bpf_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_bpf_node_init(ma_node_graph* pNodeGraph, const ma_bpf_node_config* pConfig, /;"	f
ma_bpf_node_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_bpf_node_reinit(const ma_bpf_config* pConfig, ma_bpf_node* pNode);$/;"	f
ma_bpf_node_uninit	../ext/miniaudio.h	/^MA_API void ma_bpf_node_uninit(ma_bpf_node* pNode, const ma_allocation_callbacks* pAllocationCal/;"	f
ma_bpf_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_bpf_process_pcm_frames(ma_bpf* pBPF, void* pFramesOut, const void* pFramesIn/;"	f
ma_bpf_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_bpf_reinit(const ma_bpf_config* pConfig, ma_bpf* pBPF);$/;"	f
ma_bpf_uninit	../ext/miniaudio.h	/^MA_API void ma_bpf_uninit(ma_bpf* pBPF, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f
ma_buffer_frame_capacity	../ext/miniaudio.h	/^#define ma_buffer_frame_capacity(buffer, channels, format) (sizeof(buffer) \/ ma_get_bytes_per_s/;"	M
ma_calculate_buffer_size_in_frames_from_descriptor	../ext/miniaudio.h	/^MA_API ma_uint32 ma_calculate_buffer_size_in_frames_from_descriptor(const ma_device_descriptor* /;"	f	struct:ma_device
ma_calculate_buffer_size_in_frames_from_milliseconds	../ext/miniaudio.h	/^MA_API ma_uint32 ma_calculate_buffer_size_in_frames_from_milliseconds(ma_uint32 bufferSizeInMill/;"	f	struct:ma_device
ma_calculate_buffer_size_in_milliseconds_from_frames	../ext/miniaudio.h	/^MA_API ma_uint32 ma_calculate_buffer_size_in_milliseconds_from_frames(ma_uint32 bufferSizeInFram/;"	f	struct:ma_device
ma_calculate_frame_count_after_resampling	../ext/miniaudio.h	/^MA_API ma_uint64 ma_calculate_frame_count_after_resampling(ma_uint32 sampleRateOut, ma_uint32 sa/;"	f
ma_calculate_period_size_in_frames_from_descriptor__dsound	../ext/miniaudio.h	/^static ma_uint32 ma_calculate_period_size_in_frames_from_descriptor__dsound(const ma_device_desc/;"	f	struct:ma_IDirectSoundNotify
ma_calloc	../ext/miniaudio.h	/^MA_API void* ma_calloc(size_t sz, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f	struct:ma_resampler_config
ma_channel	../ext/miniaudio.h	/^typedef ma_uint8 ma_channel;$/;"	t
ma_channel_conversion_path	../ext/miniaudio.h	/^} ma_channel_conversion_path;$/;"	t	struct:ma_resampler_config
ma_channel_conversion_path_mono_in	../ext/miniaudio.h	/^    ma_channel_conversion_path_mono_in,     \/* Converting from mono. *\/$/;"	e	struct:ma_resampler_config
ma_channel_conversion_path_mono_out	../ext/miniaudio.h	/^    ma_channel_conversion_path_mono_out,    \/* Converting to mono. *\/$/;"	e	struct:ma_resampler_config
ma_channel_conversion_path_passthrough	../ext/miniaudio.h	/^    ma_channel_conversion_path_passthrough,$/;"	e	struct:ma_resampler_config
ma_channel_conversion_path_shuffle	../ext/miniaudio.h	/^    ma_channel_conversion_path_shuffle,     \/* Simple shuffle. Will use this when all channels /;"	e	struct:ma_resampler_config
ma_channel_conversion_path_unknown	../ext/miniaudio.h	/^    ma_channel_conversion_path_unknown,$/;"	e	struct:ma_resampler_config
ma_channel_conversion_path_weights	../ext/miniaudio.h	/^    ma_channel_conversion_path_weights      \/* Blended based on weights. *\/$/;"	e	struct:ma_resampler_config
ma_channel_converter	../ext/miniaudio.h	/^} ma_channel_converter;$/;"	t	struct:ma_resampler_config
ma_channel_converter_config	../ext/miniaudio.h	/^} ma_channel_converter_config;$/;"	t	struct:ma_resampler_config
ma_channel_converter_config_init	../ext/miniaudio.h	/^MA_API ma_channel_converter_config ma_channel_converter_config_init(ma_format format, ma_uint32 /;"	f	struct:ma_resampler_config
ma_channel_converter_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_channel_converter_get_heap_size(const ma_channel_converter_config* pConfig, /;"	f	struct:ma_resampler_config
ma_channel_converter_get_input_channel_map	../ext/miniaudio.h	/^MA_API ma_result ma_channel_converter_get_input_channel_map(const ma_channel_converter* pConvert/;"	f	struct:ma_resampler_config
ma_channel_converter_get_output_channel_map	../ext/miniaudio.h	/^MA_API ma_result ma_channel_converter_get_output_channel_map(const ma_channel_converter* pConver/;"	f	struct:ma_resampler_config
ma_channel_converter_init	../ext/miniaudio.h	/^MA_API ma_result ma_channel_converter_init(const ma_channel_converter_config* pConfig, const ma_/;"	f	struct:ma_resampler_config
ma_channel_converter_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_channel_converter_init_preallocated(const ma_channel_converter_config* pConf/;"	f	struct:ma_resampler_config
ma_channel_converter_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_channel_converter_process_pcm_frames(ma_channel_converter* pConverter, void*/;"	f	struct:ma_resampler_config
ma_channel_converter_uninit	../ext/miniaudio.h	/^MA_API void ma_channel_converter_uninit(ma_channel_converter* pConverter, const ma_allocation_ca/;"	f	struct:ma_resampler_config
ma_channel_id_to_ma__win32	../ext/miniaudio.h	/^static ma_uint8 ma_channel_id_to_ma__win32(DWORD id)$/;"	f
ma_channel_id_to_win32	../ext/miniaudio.h	/^static DWORD ma_channel_id_to_win32(DWORD id)$/;"	f
ma_channel_map_contains_channel_position	../ext/miniaudio.h	/^MA_API ma_bool32 ma_channel_map_contains_channel_position(ma_uint32 channels, const ma_channel* /;"	f	struct:ma_resampler_config
ma_channel_map_copy	../ext/miniaudio.h	/^MA_API void ma_channel_map_copy(ma_channel* pOut, const ma_channel* pIn, ma_uint32 channels);$/;"	f	struct:ma_resampler_config
ma_channel_map_copy_or_default	../ext/miniaudio.h	/^MA_API void ma_channel_map_copy_or_default(ma_channel* pOut, size_t channelMapCapOut, const ma_c/;"	f	struct:ma_resampler_config
ma_channel_map_get_channel	../ext/miniaudio.h	/^MA_API ma_channel ma_channel_map_get_channel(const ma_channel* pChannelMap, ma_uint32 channelCou/;"	f	struct:ma_resampler_config
ma_channel_map_init_blank	../ext/miniaudio.h	/^MA_API void ma_channel_map_init_blank(ma_channel* pChannelMap, ma_uint32 channels);$/;"	f	struct:ma_resampler_config
ma_channel_map_init_standard	../ext/miniaudio.h	/^MA_API void ma_channel_map_init_standard(ma_standard_channel_map standardChannelMap, ma_channel*/;"	f	struct:ma_resampler_config
ma_channel_map_is_blank	../ext/miniaudio.h	/^MA_API ma_bool32 ma_channel_map_is_blank(const ma_channel* pChannelMap, ma_uint32 channels);$/;"	f	struct:ma_resampler_config
ma_channel_map_is_equal	../ext/miniaudio.h	/^MA_API ma_bool32 ma_channel_map_is_equal(const ma_channel* pChannelMapA, const ma_channel* pChan/;"	f	struct:ma_resampler_config
ma_channel_map_is_valid	../ext/miniaudio.h	/^MA_API ma_bool32 ma_channel_map_is_valid(const ma_channel* pChannelMap, ma_uint32 channels);$/;"	f	struct:ma_resampler_config
ma_channel_map_to_channel_mask__win32	../ext/miniaudio.h	/^static DWORD ma_channel_map_to_channel_mask__win32(const ma_channel* pChannelMap, ma_uint32 chan/;"	f
ma_channel_mask_to_channel_map__win32	../ext/miniaudio.h	/^static void ma_channel_mask_to_channel_map__win32(DWORD dwChannelMask, ma_uint32 channels, ma_ch/;"	f
ma_channel_mix_mode	../ext/miniaudio.h	/^} ma_channel_mix_mode;$/;"	t
ma_channel_mix_mode_custom_weights	../ext/miniaudio.h	/^    ma_channel_mix_mode_custom_weights,    \/* Use custom weights specified in ma_channel_router/;"	e
ma_channel_mix_mode_default	../ext/miniaudio.h	/^    ma_channel_mix_mode_default = ma_channel_mix_mode_rectangular$/;"	e
ma_channel_mix_mode_rectangular	../ext/miniaudio.h	/^    ma_channel_mix_mode_rectangular = 0,   \/* Simple averaging based on the plane(s) the channe/;"	e
ma_channel_mix_mode_simple	../ext/miniaudio.h	/^    ma_channel_mix_mode_simple,            \/* Drop excess channels; zeroed out extra channels. /;"	e
ma_clamp	../ext/miniaudio.h	/^#define ma_clamp(x, lo, hi)         (ma_max(lo, ma_min(x, hi)))$/;"	M
ma_clip_f32	../ext/miniaudio.h	/^static MA_INLINE float ma_clip_f32(float x)$/;"	f
ma_clip_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_clip_pcm_frames(void* pDst, const void* pSrc, ma_uint64 frameCount, ma_format for/;"	f	struct:ma_device
ma_clip_s16	../ext/miniaudio.h	/^static MA_INLINE ma_int16 ma_clip_s16(ma_int32 x)$/;"	f
ma_clip_s24	../ext/miniaudio.h	/^static MA_INLINE ma_int64 ma_clip_s24(ma_int64 x)$/;"	f
ma_clip_s32	../ext/miniaudio.h	/^static MA_INLINE ma_int32 ma_clip_s32(ma_int64 x)$/;"	f
ma_clip_samples_f32	../ext/miniaudio.h	/^MA_API void ma_clip_samples_f32(float* pDst, const float* pSrc, ma_uint64 count);$/;"	f	struct:ma_device
ma_clip_samples_s16	../ext/miniaudio.h	/^MA_API void ma_clip_samples_s16(ma_int16* pDst, const ma_int32* pSrc, ma_uint64 count);$/;"	f	struct:ma_device
ma_clip_samples_s24	../ext/miniaudio.h	/^MA_API void ma_clip_samples_s24(ma_uint8* pDst, const ma_int64* pSrc, ma_uint64 count);$/;"	f	struct:ma_device
ma_clip_samples_s32	../ext/miniaudio.h	/^MA_API void ma_clip_samples_s32(ma_int32* pDst, const ma_int64* pSrc, ma_uint64 count);$/;"	f	struct:ma_device
ma_clip_samples_u8	../ext/miniaudio.h	/^MA_API void ma_clip_samples_u8(ma_uint8* pDst, const ma_int16* pSrc, ma_uint64 count);$/;"	f	struct:ma_device
ma_clip_u8	../ext/miniaudio.h	/^static MA_INLINE ma_uint8 ma_clip_u8(ma_int32 x)$/;"	f
ma_completion_handler_uwp	../ext/miniaudio.h	/^struct ma_completion_handler_uwp$/;"	s
ma_completion_handler_uwp	../ext/miniaudio.h	/^typedef struct ma_completion_handler_uwp ma_completion_handler_uwp;$/;"	t
ma_completion_handler_uwp_ActivateCompleted	../ext/miniaudio.h	/^static HRESULT STDMETHODCALLTYPE ma_completion_handler_uwp_ActivateCompleted(ma_completion_handl/;"	f	struct:ma_completion_handler_uwp
ma_completion_handler_uwp_AddRef	../ext/miniaudio.h	/^static ULONG STDMETHODCALLTYPE ma_completion_handler_uwp_AddRef(ma_completion_handler_uwp* pThis/;"	f	struct:ma_completion_handler_uwp
ma_completion_handler_uwp_QueryInterface	../ext/miniaudio.h	/^static HRESULT STDMETHODCALLTYPE ma_completion_handler_uwp_QueryInterface(ma_completion_handler_/;"	f	struct:ma_completion_handler_uwp
ma_completion_handler_uwp_Release	../ext/miniaudio.h	/^static ULONG STDMETHODCALLTYPE ma_completion_handler_uwp_Release(ma_completion_handler_uwp* pThi/;"	f	struct:ma_completion_handler_uwp
ma_completion_handler_uwp_init	../ext/miniaudio.h	/^static ma_result ma_completion_handler_uwp_init(ma_completion_handler_uwp* pHandler)$/;"	f	struct:ma_completion_handler_uwp
ma_completion_handler_uwp_uninit	../ext/miniaudio.h	/^static void ma_completion_handler_uwp_uninit(ma_completion_handler_uwp* pHandler)$/;"	f	struct:ma_completion_handler_uwp
ma_completion_handler_uwp_vtbl	../ext/miniaudio.h	/^} ma_completion_handler_uwp_vtbl;$/;"	t
ma_completion_handler_uwp_wait	../ext/miniaudio.h	/^static void ma_completion_handler_uwp_wait(ma_completion_handler_uwp* pHandler)$/;"	f	struct:ma_completion_handler_uwp
ma_config_to_WAVEFORMATEXTENSIBLE	../ext/miniaudio.h	/^static ma_result ma_config_to_WAVEFORMATEXTENSIBLE(ma_format format, ma_uint32 channels, ma_uint/;"	f	struct:ma_IDirectSoundNotify
ma_context	../ext/miniaudio.h	/^typedef struct ma_context ma_context;$/;"	s
ma_context	../ext/miniaudio.h	/^typedef struct ma_context ma_context;$/;"	t
ma_context_command__wasapi	../ext/miniaudio.h	/^} ma_context_command__wasapi;$/;"	t	struct:ma_context_config
ma_context_command_thread__wasapi	../ext/miniaudio.h	/^static ma_thread_result MA_THREADCALL ma_context_command_thread__wasapi(void* pUserData)$/;"	f	struct:ma_completion_handler_uwp
ma_context_config	../ext/miniaudio.h	/^struct ma_context_config$/;"	s
ma_context_config	../ext/miniaudio.h	/^typedef struct ma_context_config    ma_context_config;$/;"	t
ma_context_config_init	../ext/miniaudio.h	/^MA_API ma_context_config ma_context_config_init(void);$/;"	f	struct:ma_device
ma_context_create_IDirectSoundCapture__dsound	../ext/miniaudio.h	/^static ma_result ma_context_create_IDirectSoundCapture__dsound(ma_context* pContext, ma_share_mo/;"	f	struct:ma_IDirectSoundNotify
ma_context_create_IDirectSound__dsound	../ext/miniaudio.h	/^static ma_result ma_context_create_IDirectSound__dsound(ma_context* pContext, ma_share_mode shar/;"	f	struct:ma_IDirectSoundNotify
ma_context_create_IMMDeviceEnumerator__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_create_IMMDeviceEnumerator__wasapi(ma_context* pContext, ma_IMMDevic/;"	f	struct:ma_completion_handler_uwp
ma_context_enumerate_devices	../ext/miniaudio.h	/^MA_API ma_result ma_context_enumerate_devices(ma_context* pContext, ma_enum_devices_callback_pro/;"	f	struct:ma_device
ma_context_enumerate_devices__dsound	../ext/miniaudio.h	/^static ma_result ma_context_enumerate_devices__dsound(ma_context* pContext, ma_enum_devices_call/;"	f	struct:ma_IDirectSoundNotify
ma_context_enumerate_devices__null	../ext/miniaudio.h	/^static ma_result ma_context_enumerate_devices__null(ma_context* pContext, ma_enum_devices_callba/;"	f
ma_context_enumerate_devices__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_enumerate_devices__wasapi(ma_context* pContext, ma_enum_devices_call/;"	f	struct:ma_completion_handler_uwp
ma_context_enumerate_devices_by_type__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_enumerate_devices_by_type__wasapi(ma_context* pContext, ma_IMMDevice/;"	f	struct:ma_completion_handler_uwp
ma_context_enumerate_devices_callback__dsound	../ext/miniaudio.h	/^static BOOL CALLBACK ma_context_enumerate_devices_callback__dsound(LPGUID lpGuid, LPCSTR lpcstrD/;"	f	struct:ma_IDirectSoundNotify
ma_context_enumerate_devices_callback_data__dsound	../ext/miniaudio.h	/^} ma_context_enumerate_devices_callback_data__dsound;$/;"	t	struct:ma_IDirectSoundNotify
ma_context_get_IAudioClient_Desktop__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_get_IAudioClient_Desktop__wasapi(ma_context* pContext, ma_device_typ/;"	f	struct:ma_completion_handler_uwp
ma_context_get_IAudioClient_UWP__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_get_IAudioClient_UWP__wasapi(ma_context* pContext, ma_device_type de/;"	f	struct:ma_completion_handler_uwp
ma_context_get_IAudioClient__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_get_IAudioClient__wasapi(ma_context* pContext, ma_device_type device/;"	f	struct:ma_completion_handler_uwp
ma_context_get_MMDevice__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_get_MMDevice__wasapi(ma_context* pContext, ma_device_type deviceType/;"	f	struct:ma_completion_handler_uwp
ma_context_get_default_device_id__wasapi	../ext/miniaudio.h	/^static LPWSTR ma_context_get_default_device_id__wasapi(ma_context* pContext, ma_device_type devi/;"	f	struct:ma_completion_handler_uwp
ma_context_get_default_device_id_from_IMMDeviceEnumerator__wasapi	../ext/miniaudio.h	/^static LPWSTR ma_context_get_default_device_id_from_IMMDeviceEnumerator__wasapi(ma_context* pCon/;"	f	struct:ma_completion_handler_uwp
ma_context_get_device_id_from_MMDevice__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_get_device_id_from_MMDevice__wasapi(ma_context* pContext, ma_IMMDevi/;"	f	struct:ma_completion_handler_uwp
ma_context_get_device_info	../ext/miniaudio.h	/^MA_API ma_result ma_context_get_device_info(ma_context* pContext, ma_device_type deviceType, con/;"	f	struct:ma_device
ma_context_get_device_info__dsound	../ext/miniaudio.h	/^static ma_result ma_context_get_device_info__dsound(ma_context* pContext, ma_device_type deviceT/;"	f	struct:ma_IDirectSoundNotify
ma_context_get_device_info__null	../ext/miniaudio.h	/^static ma_result ma_context_get_device_info__null(ma_context* pContext, ma_device_type deviceTyp/;"	f
ma_context_get_device_info__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_get_device_info__wasapi(ma_context* pContext, ma_device_type deviceT/;"	f	struct:ma_completion_handler_uwp
ma_context_get_device_info_callback__dsound	../ext/miniaudio.h	/^static BOOL CALLBACK ma_context_get_device_info_callback__dsound(LPGUID lpGuid, LPCSTR lpcstrDes/;"	f	struct:ma_IDirectSoundNotify
ma_context_get_device_info_callback_data__dsound	../ext/miniaudio.h	/^} ma_context_get_device_info_callback_data__dsound;$/;"	t	struct:ma_IDirectSoundNotify
ma_context_get_device_info_from_IAudioClient__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_get_device_info_from_IAudioClient__wasapi(ma_context* pContext, \/*m/;"	f	struct:ma_completion_handler_uwp
ma_context_get_device_info_from_MMDevice__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_get_device_info_from_MMDevice__wasapi(ma_context* pContext, ma_IMMDe/;"	f	struct:ma_completion_handler_uwp
ma_context_get_device_info_from_WAVECAPS	../ext/miniaudio.h	/^static ma_result ma_context_get_device_info_from_WAVECAPS(ma_context* pContext, MA_WAVECAPSA* pC/;"	f	struct:ma_IDirectSoundNotify
ma_context_get_devices	../ext/miniaudio.h	/^MA_API ma_result ma_context_get_devices(ma_context* pContext, ma_device_info** ppPlaybackDeviceI/;"	f	struct:ma_device
ma_context_get_format_info_for_IDirectSoundCapture__dsound	../ext/miniaudio.h	/^static ma_result ma_context_get_format_info_for_IDirectSoundCapture__dsound(ma_context* pContext/;"	f	struct:ma_IDirectSoundNotify
ma_context_get_log	../ext/miniaudio.h	/^MA_API ma_log* ma_context_get_log(ma_context* pContext);$/;"	f	struct:ma_device
ma_context_init	../ext/miniaudio.h	/^MA_API ma_result ma_context_init(const ma_backend backends[], ma_uint32 backendCount, const ma_c/;"	f	struct:ma_device
ma_context_init__dsound	../ext/miniaudio.h	/^static ma_result ma_context_init__dsound(ma_context* pContext, const ma_context_config* pConfig,/;"	f	struct:ma_IDirectSoundNotify
ma_context_init__null	../ext/miniaudio.h	/^static ma_result ma_context_init__null(ma_context* pContext, const ma_context_config* pConfig, m/;"	f
ma_context_init__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_init__wasapi(ma_context* pContext, const ma_context_config* pConfig,/;"	f	struct:ma_completion_handler_uwp
ma_context_init_command__wasapi	../ext/miniaudio.h	/^static ma_context_command__wasapi ma_context_init_command__wasapi(int code)$/;"	f	struct:ma_completion_handler_uwp
ma_context_is_loopback_supported	../ext/miniaudio.h	/^MA_API ma_bool32 ma_context_is_loopback_supported(ma_context* pContext);$/;"	f	struct:ma_device
ma_context_next_command__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_next_command__wasapi(ma_context* pContext, ma_context_command__wasap/;"	f	struct:ma_completion_handler_uwp
ma_context_post_command__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_post_command__wasapi(ma_context* pContext, const ma_context_command_/;"	f	struct:ma_completion_handler_uwp
ma_context_sizeof	../ext/miniaudio.h	/^MA_API size_t ma_context_sizeof(void);$/;"	f	struct:ma_device
ma_context_uninit	../ext/miniaudio.h	/^MA_API ma_result ma_context_uninit(ma_context* pContext);$/;"	f	struct:ma_device
ma_context_uninit__dsound	../ext/miniaudio.h	/^static ma_result ma_context_uninit__dsound(ma_context* pContext)$/;"	f	struct:ma_IDirectSoundNotify
ma_context_uninit__null	../ext/miniaudio.h	/^static ma_result ma_context_uninit__null(ma_context* pContext)$/;"	f
ma_context_uninit__wasapi	../ext/miniaudio.h	/^static ma_result ma_context_uninit__wasapi(ma_context* pContext)$/;"	f	struct:ma_completion_handler_uwp
ma_convert_frames	../ext/miniaudio.h	/^MA_API ma_uint64 ma_convert_frames(void* pOut, ma_uint64 frameCountOut, ma_format formatOut, ma_/;"	f	struct:ma_resampler_config
ma_convert_frames_ex	../ext/miniaudio.h	/^MA_API ma_uint64 ma_convert_frames_ex(void* pOut, ma_uint64 frameCountOut, const void* pIn, ma_u/;"	f	struct:ma_resampler_config
ma_convert_pcm_frames_format	../ext/miniaudio.h	/^MA_API void ma_convert_pcm_frames_format(void* pOut, ma_format formatOut, const void* pIn, ma_fo/;"	f	struct:ma_resampler_config
ma_copy_and_apply_volume_and_clip_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_and_clip_pcm_frames(void* pDst, const void* pSrc, ma_uint64/;"	f	struct:ma_device
ma_copy_and_apply_volume_and_clip_samples_f32	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_and_clip_samples_f32(float* pDst, const float* pSrc, ma_uin/;"	f	struct:ma_device
ma_copy_and_apply_volume_and_clip_samples_s16	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_and_clip_samples_s16(ma_int16* pDst, const ma_int32* pSrc, /;"	f	struct:ma_device
ma_copy_and_apply_volume_and_clip_samples_s24	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_and_clip_samples_s24(ma_uint8* pDst, const ma_int64* pSrc, /;"	f	struct:ma_device
ma_copy_and_apply_volume_and_clip_samples_s32	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_and_clip_samples_s32(ma_int32* pDst, const ma_int64* pSrc, /;"	f	struct:ma_device
ma_copy_and_apply_volume_and_clip_samples_u8	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_and_clip_samples_u8(ma_uint8* pDst, const ma_int16* pSrc, m/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_f32	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_f32(float* pSamplesOut, const float* pSamplesIn, ma_/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_pcm_frames(void* pFramesOut, const void* pFramesIn, /;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_pcm_frames_f32	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_pcm_frames_f32(float* pFramesOut, const float* pFram/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_pcm_frames_s16	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_pcm_frames_s16(ma_int16* pFramesOut, const ma_int16*/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_pcm_frames_s24	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_pcm_frames_s24(void* pFramesOut, const void* pFrames/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_pcm_frames_s32	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_pcm_frames_s32(ma_int32* pFramesOut, const ma_int32*/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_pcm_frames_u8	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_pcm_frames_u8(ma_uint8* pFramesOut, const ma_uint8* /;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_per_channel_f32	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_per_channel_f32(float* pFramesOut, const float* pFra/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_s16	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_s16(ma_int16* pSamplesOut, const ma_int16* pSamplesI/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_s24	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_s24(void* pSamplesOut, const void* pSamplesIn, ma_ui/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_s32	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_s32(ma_int32* pSamplesOut, const ma_int32* pSamplesI/;"	f	struct:ma_device
ma_copy_and_apply_volume_factor_u8	../ext/miniaudio.h	/^MA_API void ma_copy_and_apply_volume_factor_u8(ma_uint8* pSamplesOut, const ma_uint8* pSamplesIn/;"	f	struct:ma_device
ma_copy_memory_64	../ext/miniaudio.h	/^static MA_INLINE void ma_copy_memory_64(void* dst, const void* src, ma_uint64 sizeInBytes)$/;"	f
ma_copy_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_copy_pcm_frames(void* dst, const void* src, ma_uint64 frameCount, ma_format forma/;"	f	struct:ma_device
ma_copy_string	../ext/miniaudio.h	/^MA_API char* ma_copy_string(const char* src, const ma_allocation_callbacks* pAllocationCallbacks/;"	f
ma_copy_string_w	../ext/miniaudio.h	/^MA_API wchar_t* ma_copy_string_w(const wchar_t* src, const ma_allocation_callbacks* pAllocationC/;"	f
ma_cosd	../ext/miniaudio.h	/^static MA_INLINE double ma_cosd(double x)$/;"	f
ma_cosf	../ext/miniaudio.h	/^static MA_INLINE float ma_cosf(float x)$/;"	f
ma_count_set_bits	../ext/miniaudio.h	/^static MA_INLINE unsigned int ma_count_set_bits(unsigned int x)$/;"	f
ma_countof	../ext/miniaudio.h	/^#define ma_countof(x)               (sizeof(x) \/ sizeof(x[0]))$/;"	M
ma_cpuid	../ext/miniaudio.h	/^            static MA_INLINE void ma_cpuid(int info[4], int fid)$/;"	f
ma_cpuid	../ext/miniaudio.h	/^        static MA_INLINE void ma_cpuid(int info[4], int fid)$/;"	f
ma_data_converter	../ext/miniaudio.h	/^} ma_data_converter;$/;"	t	struct:ma_resampler_config
ma_data_converter_config	../ext/miniaudio.h	/^} ma_data_converter_config;$/;"	t	struct:ma_resampler_config
ma_data_converter_config_init	../ext/miniaudio.h	/^MA_API ma_data_converter_config ma_data_converter_config_init(ma_format formatIn, ma_format form/;"	f	struct:ma_resampler_config
ma_data_converter_config_init_default	../ext/miniaudio.h	/^MA_API ma_data_converter_config ma_data_converter_config_init_default(void);$/;"	f	struct:ma_resampler_config
ma_data_converter_execution_path	../ext/miniaudio.h	/^} ma_data_converter_execution_path;$/;"	t	struct:ma_resampler_config
ma_data_converter_execution_path_channels_first	../ext/miniaudio.h	/^    ma_data_converter_execution_path_channels_first     \/* All conversions, but channels as the/;"	e	struct:ma_resampler_config
ma_data_converter_execution_path_channels_only	../ext/miniaudio.h	/^    ma_data_converter_execution_path_channels_only,     \/* Only channel conversion. *\/$/;"	e	struct:ma_resampler_config
ma_data_converter_execution_path_format_only	../ext/miniaudio.h	/^    ma_data_converter_execution_path_format_only,       \/* Only format conversion. *\/$/;"	e	struct:ma_resampler_config
ma_data_converter_execution_path_passthrough	../ext/miniaudio.h	/^    ma_data_converter_execution_path_passthrough,       \/* No conversion. *\/$/;"	e	struct:ma_resampler_config
ma_data_converter_execution_path_resample_first	../ext/miniaudio.h	/^    ma_data_converter_execution_path_resample_first,    \/* All conversions, but resample as the/;"	e	struct:ma_resampler_config
ma_data_converter_execution_path_resample_only	../ext/miniaudio.h	/^    ma_data_converter_execution_path_resample_only,     \/* Only resampling. *\/$/;"	e	struct:ma_resampler_config
ma_data_converter_get_expected_output_frame_count	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_get_expected_output_frame_count(const ma_data_converter* pCon/;"	f	struct:ma_resampler_config
ma_data_converter_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_get_heap_size(const ma_data_converter_config* pConfig, size_t/;"	f	struct:ma_resampler_config
ma_data_converter_get_input_channel_map	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_get_input_channel_map(const ma_data_converter* pConverter, ma/;"	f	struct:ma_resampler_config
ma_data_converter_get_input_latency	../ext/miniaudio.h	/^MA_API ma_uint64 ma_data_converter_get_input_latency(const ma_data_converter* pConverter);$/;"	f	struct:ma_resampler_config
ma_data_converter_get_output_channel_map	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_get_output_channel_map(const ma_data_converter* pConverter, m/;"	f	struct:ma_resampler_config
ma_data_converter_get_output_latency	../ext/miniaudio.h	/^MA_API ma_uint64 ma_data_converter_get_output_latency(const ma_data_converter* pConverter);$/;"	f	struct:ma_resampler_config
ma_data_converter_get_required_input_frame_count	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_get_required_input_frame_count(const ma_data_converter* pConv/;"	f	struct:ma_resampler_config
ma_data_converter_init	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_init(const ma_data_converter_config* pConfig, const ma_alloca/;"	f	struct:ma_resampler_config
ma_data_converter_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_init_preallocated(const ma_data_converter_config* pConfig, vo/;"	f	struct:ma_resampler_config
ma_data_converter_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_process_pcm_frames(ma_data_converter* pConverter, const void*/;"	f	struct:ma_resampler_config
ma_data_converter_reset	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_reset(ma_data_converter* pConverter);$/;"	f	struct:ma_resampler_config
ma_data_converter_set_rate	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_set_rate(ma_data_converter* pConverter, ma_uint32 sampleRateI/;"	f	struct:ma_resampler_config
ma_data_converter_set_rate_ratio	../ext/miniaudio.h	/^MA_API ma_result ma_data_converter_set_rate_ratio(ma_data_converter* pConverter, float ratioInOu/;"	f	struct:ma_resampler_config
ma_data_converter_uninit	../ext/miniaudio.h	/^MA_API void ma_data_converter_uninit(ma_data_converter* pConverter, const ma_allocation_callback/;"	f	struct:ma_resampler_config
ma_data_source	../ext/miniaudio.h	/^typedef void ma_data_source;$/;"	t	struct:ma_device
ma_data_source_base	../ext/miniaudio.h	/^} ma_data_source_base;$/;"	t	struct:ma_device
ma_data_source_config	../ext/miniaudio.h	/^} ma_data_source_config;$/;"	t	struct:ma_device
ma_data_source_config_init	../ext/miniaudio.h	/^MA_API ma_data_source_config ma_data_source_config_init(void);$/;"	f	struct:ma_device
ma_data_source_get_current	../ext/miniaudio.h	/^MA_API ma_data_source* ma_data_source_get_current(const ma_data_source* pDataSource);$/;"	f	struct:ma_device
ma_data_source_get_cursor_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_get_cursor_in_pcm_frames(ma_data_source* pDataSource, ma_uint64*/;"	f	struct:ma_device
ma_data_source_get_cursor_in_seconds	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_get_cursor_in_seconds(ma_data_source* pDataSource, float* pCurso/;"	f	struct:ma_device
ma_data_source_get_data_format	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_get_data_format(ma_data_source* pDataSource, ma_format* pFormat,/;"	f	struct:ma_device
ma_data_source_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_get_length_in_pcm_frames(ma_data_source* pDataSource, ma_uint64*/;"	f	struct:ma_device
ma_data_source_get_length_in_seconds	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_get_length_in_seconds(ma_data_source* pDataSource, float* pLengt/;"	f	struct:ma_device
ma_data_source_get_loop_point_in_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_data_source_get_loop_point_in_pcm_frames(const ma_data_source* pDataSource, ma_ui/;"	f	struct:ma_device
ma_data_source_get_next	../ext/miniaudio.h	/^MA_API ma_data_source* ma_data_source_get_next(const ma_data_source* pDataSource);$/;"	f	struct:ma_device
ma_data_source_get_next_callback	../ext/miniaudio.h	/^MA_API ma_data_source_get_next_proc ma_data_source_get_next_callback(const ma_data_source* pData/;"	f	struct:ma_device
ma_data_source_get_range_in_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_data_source_get_range_in_pcm_frames(const ma_data_source* pDataSource, ma_uint64*/;"	f	struct:ma_device
ma_data_source_init	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_init(const ma_data_source_config* pConfig, ma_data_source* pData/;"	f	struct:ma_device
ma_data_source_is_looping	../ext/miniaudio.h	/^MA_API ma_bool32 ma_data_source_is_looping(const ma_data_source* pDataSource);$/;"	f	struct:ma_device
ma_data_source_node	../ext/miniaudio.h	/^} ma_data_source_node;$/;"	t
ma_data_source_node_config	../ext/miniaudio.h	/^} ma_data_source_node_config;$/;"	t
ma_data_source_node_config_init	../ext/miniaudio.h	/^MA_API ma_data_source_node_config ma_data_source_node_config_init(ma_data_source* pDataSource);$/;"	f
ma_data_source_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_node_init(ma_node_graph* pNodeGraph, const ma_data_source_node_c/;"	f
ma_data_source_node_is_looping	../ext/miniaudio.h	/^MA_API ma_bool32 ma_data_source_node_is_looping(ma_data_source_node* pDataSourceNode);$/;"	f
ma_data_source_node_set_looping	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_node_set_looping(ma_data_source_node* pDataSourceNode, ma_bool32/;"	f
ma_data_source_node_uninit	../ext/miniaudio.h	/^MA_API void ma_data_source_node_uninit(ma_data_source_node* pDataSourceNode, const ma_allocation/;"	f
ma_data_source_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_read_pcm_frames(ma_data_source* pDataSource, void* pFramesOut, m/;"	f	struct:ma_device
ma_data_source_seek_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_seek_pcm_frames(ma_data_source* pDataSource, ma_uint64 frameCoun/;"	f	struct:ma_device
ma_data_source_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_seek_to_pcm_frame(ma_data_source* pDataSource, ma_uint64 frameIn/;"	f	struct:ma_device
ma_data_source_set_current	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_set_current(ma_data_source* pDataSource, ma_data_source* pCurren/;"	f	struct:ma_device
ma_data_source_set_loop_point_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_set_loop_point_in_pcm_frames(ma_data_source* pDataSource, ma_uin/;"	f	struct:ma_device
ma_data_source_set_looping	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_set_looping(ma_data_source* pDataSource, ma_bool32 isLooping);$/;"	f	struct:ma_device
ma_data_source_set_next	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_set_next(ma_data_source* pDataSource, ma_data_source* pNextDataS/;"	f	struct:ma_device
ma_data_source_set_next_callback	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_set_next_callback(ma_data_source* pDataSource, ma_data_source_ge/;"	f	struct:ma_device
ma_data_source_set_range_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_data_source_set_range_in_pcm_frames(ma_data_source* pDataSource, ma_uint64 r/;"	f	struct:ma_device
ma_data_source_uninit	../ext/miniaudio.h	/^MA_API void ma_data_source_uninit(ma_data_source* pDataSource);$/;"	f	struct:ma_device
ma_data_source_vtable	../ext/miniaudio.h	/^} ma_data_source_vtable;$/;"	t	struct:ma_device
ma_decode_file	../ext/miniaudio.h	/^MA_API ma_result ma_decode_file(const char* pFilePath, ma_decoder_config* pConfig, ma_uint64* pF/;"	f	struct:ma_decoder
ma_decode_from_vfs	../ext/miniaudio.h	/^MA_API ma_result ma_decode_from_vfs(ma_vfs* pVFS, const char* pFilePath, ma_decoder_config* pCon/;"	f	struct:ma_decoder
ma_decode_memory	../ext/miniaudio.h	/^MA_API ma_result ma_decode_memory(const void* pData, size_t dataSize, ma_decoder_config* pConfig/;"	f	struct:ma_decoder
ma_decoder	../ext/miniaudio.h	/^struct ma_decoder$/;"	s
ma_decoder	../ext/miniaudio.h	/^typedef struct ma_decoder ma_decoder;$/;"	t
ma_decoder_config	../ext/miniaudio.h	/^} ma_decoder_config;$/;"	t
ma_decoder_config_init	../ext/miniaudio.h	/^MA_API ma_decoder_config ma_decoder_config_init(ma_format outputFormat, ma_uint32 outputChannels/;"	f	struct:ma_decoder
ma_decoder_config_init_default	../ext/miniaudio.h	/^MA_API ma_decoder_config ma_decoder_config_init_default(void);$/;"	f	struct:ma_decoder
ma_decoder_get_available_frames	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_get_available_frames(ma_decoder* pDecoder, ma_uint64* pAvailableFram/;"	f	struct:ma_decoder
ma_decoder_get_cursor_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_get_cursor_in_pcm_frames(ma_decoder* pDecoder, ma_uint64* pCursor);$/;"	f	struct:ma_decoder
ma_decoder_get_data_format	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_get_data_format(ma_decoder* pDecoder, ma_format* pFormat, ma_uint32*/;"	f	struct:ma_decoder
ma_decoder_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_get_length_in_pcm_frames(ma_decoder* pDecoder, ma_uint64* pLength);$/;"	f	struct:ma_decoder
ma_decoder_init	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_init(ma_decoder_read_proc onRead, ma_decoder_seek_proc onSeek, void*/;"	f	struct:ma_decoder
ma_decoder_init_file	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_init_file(const char* pFilePath, const ma_decoder_config* pConfig, m/;"	f	struct:ma_decoder
ma_decoder_init_file_w	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_init_file_w(const wchar_t* pFilePath, const ma_decoder_config* pConf/;"	f	struct:ma_decoder
ma_decoder_init_memory	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_init_memory(const void* pData, size_t dataSize, const ma_decoder_con/;"	f	struct:ma_decoder
ma_decoder_init_vfs	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_init_vfs(ma_vfs* pVFS, const char* pFilePath, const ma_decoder_confi/;"	f	struct:ma_decoder
ma_decoder_init_vfs_w	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_init_vfs_w(ma_vfs* pVFS, const wchar_t* pFilePath, const ma_decoder_/;"	f	struct:ma_decoder
ma_decoder_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_read_pcm_frames(ma_decoder* pDecoder, void* pFramesOut, ma_uint64 fr/;"	f	struct:ma_decoder
ma_decoder_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_seek_to_pcm_frame(ma_decoder* pDecoder, ma_uint64 frameIndex);$/;"	f	struct:ma_decoder
ma_decoder_uninit	../ext/miniaudio.h	/^MA_API ma_result ma_decoder_uninit(ma_decoder* pDecoder);$/;"	f	struct:ma_decoder
ma_decoding_backend_config	../ext/miniaudio.h	/^} ma_decoding_backend_config;$/;"	t
ma_decoding_backend_config_init	../ext/miniaudio.h	/^MA_API ma_decoding_backend_config ma_decoding_backend_config_init(ma_format preferredFormat, ma_/;"	f
ma_decoding_backend_vtable	../ext/miniaudio.h	/^} ma_decoding_backend_vtable;$/;"	t
ma_default_vfs	../ext/miniaudio.h	/^} ma_default_vfs;$/;"	t	struct:ma_paged_audio_buffer_page
ma_default_vfs_init	../ext/miniaudio.h	/^MA_API ma_result ma_default_vfs_init(ma_default_vfs* pVFS, const ma_allocation_callbacks* pAlloc/;"	f	struct:ma_paged_audio_buffer_page
ma_degrees_to_radians	../ext/miniaudio.h	/^static MA_INLINE double ma_degrees_to_radians(double degrees)$/;"	f
ma_degrees_to_radians_f	../ext/miniaudio.h	/^static MA_INLINE float ma_degrees_to_radians_f(float degrees)$/;"	f
ma_deinterleave_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_deinterleave_pcm_frames(ma_format format, ma_uint32 channels, ma_uint64 frameCoun/;"	f	struct:ma_resampler_config
ma_delay	../ext/miniaudio.h	/^} ma_delay;$/;"	t
ma_delay_config	../ext/miniaudio.h	/^} ma_delay_config;$/;"	t
ma_delay_config_init	../ext/miniaudio.h	/^MA_API ma_delay_config ma_delay_config_init(ma_uint32 channels, ma_uint32 sampleRate, ma_uint32 /;"	f
ma_delay_get_decay	../ext/miniaudio.h	/^MA_API float ma_delay_get_decay(const ma_delay* pDelay);$/;"	f
ma_delay_get_dry	../ext/miniaudio.h	/^MA_API float ma_delay_get_dry(const ma_delay* pDelay);$/;"	f
ma_delay_get_wet	../ext/miniaudio.h	/^MA_API float ma_delay_get_wet(const ma_delay* pDelay);$/;"	f
ma_delay_init	../ext/miniaudio.h	/^MA_API ma_result ma_delay_init(const ma_delay_config* pConfig, const ma_allocation_callbacks* pA/;"	f
ma_delay_node	../ext/miniaudio.h	/^} ma_delay_node;$/;"	t
ma_delay_node_config	../ext/miniaudio.h	/^} ma_delay_node_config;$/;"	t
ma_delay_node_config_init	../ext/miniaudio.h	/^MA_API ma_delay_node_config ma_delay_node_config_init(ma_uint32 channels, ma_uint32 sampleRate, /;"	f
ma_delay_node_get_decay	../ext/miniaudio.h	/^MA_API float ma_delay_node_get_decay(const ma_delay_node* pDelayNode);$/;"	f
ma_delay_node_get_dry	../ext/miniaudio.h	/^MA_API float ma_delay_node_get_dry(const ma_delay_node* pDelayNode);$/;"	f
ma_delay_node_get_wet	../ext/miniaudio.h	/^MA_API float ma_delay_node_get_wet(const ma_delay_node* pDelayNode);$/;"	f
ma_delay_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_delay_node_init(ma_node_graph* pNodeGraph, const ma_delay_node_config* pConf/;"	f
ma_delay_node_set_decay	../ext/miniaudio.h	/^MA_API void ma_delay_node_set_decay(ma_delay_node* pDelayNode, float value);$/;"	f
ma_delay_node_set_dry	../ext/miniaudio.h	/^MA_API void ma_delay_node_set_dry(ma_delay_node* pDelayNode, float value);$/;"	f
ma_delay_node_set_wet	../ext/miniaudio.h	/^MA_API void ma_delay_node_set_wet(ma_delay_node* pDelayNode, float value);$/;"	f
ma_delay_node_uninit	../ext/miniaudio.h	/^MA_API void ma_delay_node_uninit(ma_delay_node* pDelayNode, const ma_allocation_callbacks* pAllo/;"	f
ma_delay_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_delay_process_pcm_frames(ma_delay* pDelay, void* pFramesOut, const void* pFr/;"	f
ma_delay_set_decay	../ext/miniaudio.h	/^MA_API void ma_delay_set_decay(ma_delay* pDelay, float value);$/;"	f
ma_delay_set_dry	../ext/miniaudio.h	/^MA_API void ma_delay_set_dry(ma_delay* pDelay, float value);$/;"	f
ma_delay_set_wet	../ext/miniaudio.h	/^MA_API void ma_delay_set_wet(ma_delay* pDelay, float value);$/;"	f
ma_delay_uninit	../ext/miniaudio.h	/^MA_API void ma_delay_uninit(ma_delay* pDelay, const ma_allocation_callbacks* pAllocationCallback/;"	f
ma_device	../ext/miniaudio.h	/^struct ma_device$/;"	s
ma_device	../ext/miniaudio.h	/^typedef struct ma_device ma_device;$/;"	s
ma_device	../ext/miniaudio.h	/^typedef struct ma_device ma_device;$/;"	t
ma_device__get_available_frames__wasapi	../ext/miniaudio.h	/^static ma_result ma_device__get_available_frames__wasapi(ma_device* pDevice, ma_IAudioClient* pA/;"	f	struct:ma_completion_handler_uwp
ma_device__handle_data_callback	../ext/miniaudio.h	/^static void ma_device__handle_data_callback(ma_device* pDevice, void* pFramesOut, const void* pF/;"	f
ma_device__handle_duplex_callback_capture	../ext/miniaudio.h	/^static ma_result ma_device__handle_duplex_callback_capture(ma_device* pDevice, ma_uint32 frameCo/;"	f
ma_device__handle_duplex_callback_playback	../ext/miniaudio.h	/^static ma_result ma_device__handle_duplex_callback_playback(ma_device* pDevice, ma_uint32 frameC/;"	f
ma_device__on_data	../ext/miniaudio.h	/^static void ma_device__on_data(ma_device* pDevice, void* pFramesOut, const void* pFramesIn, ma_u/;"	f
ma_device__on_data_inner	../ext/miniaudio.h	/^static void ma_device__on_data_inner(ma_device* pDevice, void* pFramesOut, const void* pFramesIn/;"	f
ma_device__on_notification	../ext/miniaudio.h	/^static void ma_device__on_notification(ma_device_notification notification)$/;"	f
ma_device__on_notification_interruption_began	../ext/miniaudio.h	/^void ma_device__on_notification_interruption_began(ma_device* pDevice)$/;"	f
ma_device__on_notification_interruption_ended	../ext/miniaudio.h	/^void ma_device__on_notification_interruption_ended(ma_device* pDevice)$/;"	f
ma_device__on_notification_rerouted	../ext/miniaudio.h	/^void ma_device__on_notification_rerouted(ma_device* pDevice)$/;"	f
ma_device__on_notification_started	../ext/miniaudio.h	/^void ma_device__on_notification_started(ma_device* pDevice)$/;"	f
ma_device__on_notification_stopped	../ext/miniaudio.h	/^void ma_device__on_notification_stopped(ma_device* pDevice)$/;"	f
ma_device__post_init_setup	../ext/miniaudio.h	/^static ma_result ma_device__post_init_setup(ma_device* pDevice, ma_device_type deviceType);$/;"	f
ma_device__read_frames_from_client	../ext/miniaudio.h	/^static void ma_device__read_frames_from_client(ma_device* pDevice, ma_uint32 frameCount, void* p/;"	f
ma_device__send_frames_to_client	../ext/miniaudio.h	/^static void ma_device__send_frames_to_client(ma_device* pDevice, ma_uint32 frameCountInDeviceFor/;"	f
ma_device__set_state	../ext/miniaudio.h	/^static MA_INLINE void ma_device__set_state(ma_device* pDevice, ma_device_state newState)$/;"	f
ma_device_audio_thread__default_read_write	../ext/miniaudio.h	/^static ma_result ma_device_audio_thread__default_read_write(ma_device* pDevice)$/;"	f
ma_device_config	../ext/miniaudio.h	/^struct ma_device_config$/;"	s
ma_device_config	../ext/miniaudio.h	/^typedef struct ma_device_config     ma_device_config;$/;"	s
ma_device_config	../ext/miniaudio.h	/^typedef struct ma_device_config     ma_device_config;$/;"	t
ma_device_config_init	../ext/miniaudio.h	/^MA_API ma_device_config ma_device_config_init(ma_device_type deviceType);$/;"	f	struct:ma_device
ma_device_create_IAudioClient_service__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_create_IAudioClient_service__wasapi(ma_context* pContext, ma_device_t/;"	f	struct:ma_completion_handler_uwp
ma_device_data_loop__dsound	../ext/miniaudio.h	/^static ma_result ma_device_data_loop__dsound(ma_device* pDevice)$/;"	f	struct:ma_IDirectSoundNotify
ma_device_data_loop_wakeup__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_data_loop_wakeup__wasapi(ma_device* pDevice)$/;"	f	struct:ma_completion_handler_uwp
ma_device_descriptor	../ext/miniaudio.h	/^} ma_device_descriptor;$/;"	t	struct:ma_device_config
ma_device_descriptor_is_valid	../ext/miniaudio.h	/^static ma_bool32 ma_device_descriptor_is_valid(const ma_device_descriptor* pDeviceDescriptor)$/;"	f
ma_device_disable_denormals	../ext/miniaudio.h	/^static MA_INLINE unsigned int ma_device_disable_denormals(ma_device* pDevice)$/;"	f
ma_device_do_operation__null	../ext/miniaudio.h	/^static ma_result ma_device_do_operation__null(ma_device* pDevice, ma_uint32 operation)$/;"	f
ma_device_get_context	../ext/miniaudio.h	/^MA_API ma_context* ma_device_get_context(ma_device* pDevice);$/;"	f	struct:ma_device
ma_device_get_info	../ext/miniaudio.h	/^MA_API ma_result ma_device_get_info(ma_device* pDevice, ma_device_type type, ma_device_info* pDe/;"	f	struct:ma_device
ma_device_get_log	../ext/miniaudio.h	/^MA_API ma_log* ma_device_get_log(ma_device* pDevice);$/;"	f	struct:ma_device
ma_device_get_master_volume	../ext/miniaudio.h	/^MA_API ma_result ma_device_get_master_volume(ma_device* pDevice, float* pVolume);$/;"	f	struct:ma_device
ma_device_get_master_volume_db	../ext/miniaudio.h	/^MA_API ma_result ma_device_get_master_volume_db(ma_device* pDevice, float* pGainDB);$/;"	f	struct:ma_device
ma_device_get_name	../ext/miniaudio.h	/^MA_API ma_result ma_device_get_name(ma_device* pDevice, ma_device_type type, char* pName, size_t/;"	f	struct:ma_device
ma_device_get_state	../ext/miniaudio.h	/^MA_API ma_device_state ma_device_get_state(const ma_device* pDevice);$/;"	f	struct:ma_device
ma_device_get_total_run_time_in_frames__null	../ext/miniaudio.h	/^static ma_uint64 ma_device_get_total_run_time_in_frames__null(ma_device* pDevice)$/;"	f
ma_device_handle_backend_data_callback	../ext/miniaudio.h	/^MA_API ma_result ma_device_handle_backend_data_callback(ma_device* pDevice, void* pOutput, const/;"	f	struct:ma_device
ma_device_info	../ext/miniaudio.h	/^} ma_device_info;$/;"	t
ma_device_info_add_native_data_format	../ext/miniaudio.h	/^MA_API void ma_device_info_add_native_data_format(ma_device_info* pDeviceInfo, ma_format format,/;"	f
ma_device_init	../ext/miniaudio.h	/^MA_API ma_result ma_device_init(ma_context* pContext, const ma_device_config* pConfig, ma_device/;"	f	struct:ma_device
ma_device_init__dsound	../ext/miniaudio.h	/^static ma_result ma_device_init__dsound(ma_device* pDevice, const ma_device_config* pConfig, ma_/;"	f	struct:ma_IDirectSoundNotify
ma_device_init__null	../ext/miniaudio.h	/^static ma_result ma_device_init__null(ma_device* pDevice, const ma_device_config* pConfig, ma_de/;"	f
ma_device_init__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_init__wasapi(ma_device* pDevice, const ma_device_config* pConfig, ma_/;"	f	struct:ma_completion_handler_uwp
ma_device_init_ex	../ext/miniaudio.h	/^MA_API ma_result ma_device_init_ex(const ma_backend backends[], ma_uint32 backendCount, const ma/;"	f	struct:ma_device
ma_device_init_internal__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_init_internal__wasapi(ma_context* pContext, ma_device_type deviceType/;"	f	struct:ma_completion_handler_uwp
ma_device_init_internal_data__wasapi	../ext/miniaudio.h	/^} ma_device_init_internal_data__wasapi;$/;"	t	struct:ma_completion_handler_uwp
ma_device_is_started	../ext/miniaudio.h	/^MA_API ma_bool32 ma_device_is_started(const ma_device* pDevice);$/;"	f	struct:ma_device
ma_device_job_thread	../ext/miniaudio.h	/^} ma_device_job_thread;$/;"	t	struct:ma_job
ma_device_job_thread_config	../ext/miniaudio.h	/^} ma_device_job_thread_config;$/;"	t	struct:ma_job
ma_device_job_thread_config_init	../ext/miniaudio.h	/^MA_API ma_device_job_thread_config ma_device_job_thread_config_init(void);$/;"	f	struct:ma_job
ma_device_job_thread_init	../ext/miniaudio.h	/^MA_API ma_result ma_device_job_thread_init(const ma_device_job_thread_config* pConfig, const ma_/;"	f	struct:ma_job
ma_device_job_thread_next	../ext/miniaudio.h	/^MA_API ma_result ma_device_job_thread_next(ma_device_job_thread* pJobThread, ma_job* pJob);$/;"	f	struct:ma_job
ma_device_job_thread_post	../ext/miniaudio.h	/^MA_API ma_result ma_device_job_thread_post(ma_device_job_thread* pJobThread, const ma_job* pJob)/;"	f	struct:ma_job
ma_device_job_thread_uninit	../ext/miniaudio.h	/^MA_API void ma_device_job_thread_uninit(ma_device_job_thread* pJobThread, const ma_allocation_ca/;"	f	struct:ma_job
ma_device_notification	../ext/miniaudio.h	/^} ma_device_notification;$/;"	t	struct:ma_job
ma_device_notification_init	../ext/miniaudio.h	/^static ma_device_notification ma_device_notification_init(ma_device* pDevice, ma_device_notifica/;"	f
ma_device_notification_type	../ext/miniaudio.h	/^} ma_device_notification_type;$/;"	t	struct:ma_job
ma_device_notification_type_interruption_began	../ext/miniaudio.h	/^    ma_device_notification_type_interruption_began,$/;"	e	struct:ma_job
ma_device_notification_type_interruption_ended	../ext/miniaudio.h	/^    ma_device_notification_type_interruption_ended$/;"	e	struct:ma_job
ma_device_notification_type_rerouted	../ext/miniaudio.h	/^    ma_device_notification_type_rerouted,$/;"	e	struct:ma_job
ma_device_notification_type_started	../ext/miniaudio.h	/^    ma_device_notification_type_started,$/;"	e	struct:ma_job
ma_device_notification_type_stopped	../ext/miniaudio.h	/^    ma_device_notification_type_stopped,$/;"	e	struct:ma_job
ma_device_post_init	../ext/miniaudio.h	/^MA_API ma_result ma_device_post_init(ma_device* pDevice, ma_device_type deviceType, const ma_dev/;"	f	struct:ma_device
ma_device_read__null	../ext/miniaudio.h	/^static ma_result ma_device_read__null(ma_device* pDevice, void* pPCMFrames, ma_uint32 frameCount/;"	f
ma_device_read__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_read__wasapi(ma_device* pDevice, void* pFrames, ma_uint32 frameCount,/;"	f	struct:ma_completion_handler_uwp
ma_device_reinit__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_reinit__wasapi(ma_device* pDevice, ma_device_type deviceType)$/;"	f	struct:ma_completion_handler_uwp
ma_device_release_IAudioClient_service__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_release_IAudioClient_service__wasapi(ma_device* pDevice, ma_device_ty/;"	f	struct:ma_completion_handler_uwp
ma_device_reroute__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_reroute__wasapi(ma_device* pDevice, ma_device_type deviceType)$/;"	f	struct:ma_completion_handler_uwp
ma_device_reroute__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_reroute__wasapi(ma_device* pDevice, ma_device_type deviceType);$/;"	f
ma_device_restore_denormals	../ext/miniaudio.h	/^static MA_INLINE void ma_device_restore_denormals(ma_device* pDevice, unsigned int prevState)$/;"	f
ma_device_set_master_volume	../ext/miniaudio.h	/^MA_API ma_result ma_device_set_master_volume(ma_device* pDevice, float volume);$/;"	f	struct:ma_device
ma_device_set_master_volume_db	../ext/miniaudio.h	/^MA_API ma_result ma_device_set_master_volume_db(ma_device* pDevice, float gainDB);$/;"	f	struct:ma_device
ma_device_start	../ext/miniaudio.h	/^MA_API ma_result ma_device_start(ma_device* pDevice);$/;"	f	struct:ma_device
ma_device_start__null	../ext/miniaudio.h	/^static ma_result ma_device_start__null(ma_device* pDevice)$/;"	f
ma_device_start__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_start__wasapi(ma_device* pDevice)$/;"	f	struct:ma_completion_handler_uwp
ma_device_state	../ext/miniaudio.h	/^} ma_device_state;$/;"	t	struct:ma_job
ma_device_state_started	../ext/miniaudio.h	/^    ma_device_state_started       = 2,  \/* The device is started and is requesting and\/or deli/;"	e	struct:ma_job
ma_device_state_starting	../ext/miniaudio.h	/^    ma_device_state_starting      = 3,  \/* Transitioning from a stopped state to started. *\/$/;"	e	struct:ma_job
ma_device_state_stopped	../ext/miniaudio.h	/^    ma_device_state_stopped       = 1,  \/* The device's default state after initialization. *\/$/;"	e	struct:ma_job
ma_device_state_stopping	../ext/miniaudio.h	/^    ma_device_state_stopping      = 4   \/* Transitioning from a started state to stopped. *\/$/;"	e	struct:ma_job
ma_device_state_uninitialized	../ext/miniaudio.h	/^    ma_device_state_uninitialized = 0,$/;"	e	struct:ma_job
ma_device_stop	../ext/miniaudio.h	/^MA_API ma_result ma_device_stop(ma_device* pDevice);$/;"	f	struct:ma_device
ma_device_stop__null	../ext/miniaudio.h	/^static ma_result ma_device_stop__null(ma_device* pDevice)$/;"	f
ma_device_stop__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_stop__wasapi(ma_device* pDevice)$/;"	f	struct:ma_completion_handler_uwp
ma_device_thread__null	../ext/miniaudio.h	/^static ma_thread_result MA_THREADCALL ma_device_thread__null(void* pData)$/;"	f
ma_device_type	../ext/miniaudio.h	/^} ma_device_type;$/;"	t	struct:ma_job
ma_device_type_capture	../ext/miniaudio.h	/^    ma_device_type_capture  = 2,$/;"	e	struct:ma_job
ma_device_type_duplex	../ext/miniaudio.h	/^    ma_device_type_duplex   = ma_device_type_playback | ma_device_type_capture, \/* 3 *\/$/;"	e	struct:ma_job
ma_device_type_loopback	../ext/miniaudio.h	/^    ma_device_type_loopback = 4$/;"	e	struct:ma_job
ma_device_type_playback	../ext/miniaudio.h	/^    ma_device_type_playback = 1,$/;"	e	struct:ma_job
ma_device_type_to_EDataFlow	../ext/miniaudio.h	/^static ma_EDataFlow ma_device_type_to_EDataFlow(ma_device_type deviceType)$/;"	f	struct:ma_completion_handler_uwp
ma_device_uninit	../ext/miniaudio.h	/^MA_API void ma_device_uninit(ma_device* pDevice);$/;"	f	struct:ma_device
ma_device_uninit__dsound	../ext/miniaudio.h	/^static ma_result ma_device_uninit__dsound(ma_device* pDevice)$/;"	f	struct:ma_IDirectSoundNotify
ma_device_uninit__null	../ext/miniaudio.h	/^static ma_result ma_device_uninit__null(ma_device* pDevice)$/;"	f
ma_device_uninit__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_uninit__wasapi(ma_device* pDevice)$/;"	f	struct:ma_completion_handler_uwp
ma_device_write__null	../ext/miniaudio.h	/^static ma_result ma_device_write__null(ma_device* pDevice, const void* pPCMFrames, ma_uint32 fra/;"	f
ma_device_write__wasapi	../ext/miniaudio.h	/^static ma_result ma_device_write__wasapi(ma_device* pDevice, const void* pFrames, ma_uint32 fram/;"	f	struct:ma_completion_handler_uwp
ma_disable_denormals	../ext/miniaudio.h	/^static MA_INLINE unsigned int ma_disable_denormals()$/;"	f
ma_dither_f32	../ext/miniaudio.h	/^static MA_INLINE float ma_dither_f32(ma_dither_mode ditherMode, float ditherMin, float ditherMax/;"	f
ma_dither_f32_rectangle	../ext/miniaudio.h	/^static MA_INLINE float ma_dither_f32_rectangle(float ditherMin, float ditherMax)$/;"	f
ma_dither_f32_triangle	../ext/miniaudio.h	/^static MA_INLINE float ma_dither_f32_triangle(float ditherMin, float ditherMax)$/;"	f
ma_dither_mode	../ext/miniaudio.h	/^} ma_dither_mode;$/;"	t
ma_dither_mode_none	../ext/miniaudio.h	/^    ma_dither_mode_none = 0,$/;"	e
ma_dither_mode_rectangle	../ext/miniaudio.h	/^    ma_dither_mode_rectangle,$/;"	e
ma_dither_mode_triangle	../ext/miniaudio.h	/^    ma_dither_mode_triangle$/;"	e
ma_dither_s32	../ext/miniaudio.h	/^static MA_INLINE ma_int32 ma_dither_s32(ma_dither_mode ditherMode, ma_int32 ditherMin, ma_int32 /;"	f
ma_dlclose	../ext/miniaudio.h	/^MA_API void ma_dlclose(ma_context* pContext, ma_handle handle)$/;"	f
ma_dlopen	../ext/miniaudio.h	/^MA_API ma_handle ma_dlopen(ma_context* pContext, const char* filename)$/;"	f
ma_dlsym	../ext/miniaudio.h	/^MA_API ma_proc ma_dlsym(ma_context* pContext, ma_handle handle, const char* symbol)$/;"	f
ma_duplex_rb	../ext/miniaudio.h	/^} ma_duplex_rb;$/;"	t	struct:ma_resampler_config
ma_duplex_rb_init	../ext/miniaudio.h	/^MA_API ma_result ma_duplex_rb_init(ma_format captureFormat, ma_uint32 captureChannels, ma_uint32/;"	f	struct:ma_resampler_config
ma_duplex_rb_uninit	../ext/miniaudio.h	/^MA_API ma_result ma_duplex_rb_uninit(ma_duplex_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_eAll	../ext/miniaudio.h	/^    ma_eAll     = 2$/;"	e
ma_eCapture	../ext/miniaudio.h	/^    ma_eCapture = 1,$/;"	e
ma_eCommunications	../ext/miniaudio.h	/^    ma_eCommunications = 2$/;"	e
ma_eConsole	../ext/miniaudio.h	/^    ma_eConsole        = 0,$/;"	e
ma_eMultimedia	../ext/miniaudio.h	/^    ma_eMultimedia     = 1,$/;"	e
ma_eRender	../ext/miniaudio.h	/^    ma_eRender  = 0,$/;"	e
ma_encoder	../ext/miniaudio.h	/^struct ma_encoder$/;"	s
ma_encoder	../ext/miniaudio.h	/^typedef struct ma_encoder ma_encoder;$/;"	t
ma_encoder_config	../ext/miniaudio.h	/^} ma_encoder_config;$/;"	t
ma_encoder_config_init	../ext/miniaudio.h	/^MA_API ma_encoder_config ma_encoder_config_init(ma_encoding_format encodingFormat, ma_format for/;"	f
ma_encoder_init	../ext/miniaudio.h	/^MA_API ma_result ma_encoder_init(ma_encoder_write_proc onWrite, ma_encoder_seek_proc onSeek, voi/;"	f	struct:ma_encoder
ma_encoder_init_file	../ext/miniaudio.h	/^MA_API ma_result ma_encoder_init_file(const char* pFilePath, const ma_encoder_config* pConfig, m/;"	f	struct:ma_encoder
ma_encoder_init_file_w	../ext/miniaudio.h	/^MA_API ma_result ma_encoder_init_file_w(const wchar_t* pFilePath, const ma_encoder_config* pConf/;"	f	struct:ma_encoder
ma_encoder_init_vfs	../ext/miniaudio.h	/^MA_API ma_result ma_encoder_init_vfs(ma_vfs* pVFS, const char* pFilePath, const ma_encoder_confi/;"	f	struct:ma_encoder
ma_encoder_init_vfs_w	../ext/miniaudio.h	/^MA_API ma_result ma_encoder_init_vfs_w(ma_vfs* pVFS, const wchar_t* pFilePath, const ma_encoder_/;"	f	struct:ma_encoder
ma_encoder_uninit	../ext/miniaudio.h	/^MA_API void ma_encoder_uninit(ma_encoder* pEncoder);$/;"	f	struct:ma_encoder
ma_encoder_write_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_encoder_write_pcm_frames(ma_encoder* pEncoder, const void* pFramesIn, ma_uin/;"	f	struct:ma_encoder
ma_encoding_format	../ext/miniaudio.h	/^} ma_encoding_format;$/;"	t	struct:ma_paged_audio_buffer_page
ma_encoding_format_flac	../ext/miniaudio.h	/^    ma_encoding_format_flac,$/;"	e	struct:ma_paged_audio_buffer_page
ma_encoding_format_mp3	../ext/miniaudio.h	/^    ma_encoding_format_mp3,$/;"	e	struct:ma_paged_audio_buffer_page
ma_encoding_format_unknown	../ext/miniaudio.h	/^    ma_encoding_format_unknown = 0,$/;"	e	struct:ma_paged_audio_buffer_page
ma_encoding_format_vorbis	../ext/miniaudio.h	/^    ma_encoding_format_vorbis$/;"	e	struct:ma_paged_audio_buffer_page
ma_encoding_format_wav	../ext/miniaudio.h	/^    ma_encoding_format_wav,$/;"	e	struct:ma_paged_audio_buffer_page
ma_engine	../ext/miniaudio.h	/^typedef struct ma_engine ma_engine;$/;"	s
ma_engine	../ext/miniaudio.h	/^typedef struct ma_engine ma_engine;$/;"	t
ma_engine_config	../ext/miniaudio.h	/^} ma_engine_config;$/;"	t	struct:ma_sound_inlined
ma_engine_config_init	../ext/miniaudio.h	/^MA_API ma_engine_config ma_engine_config_init(void);$/;"	f	struct:ma_sound_inlined
ma_engine_find_closest_listener	../ext/miniaudio.h	/^MA_API ma_uint32 ma_engine_find_closest_listener(const ma_engine* pEngine, float absolutePosX, f/;"	f
ma_engine_get_channels	../ext/miniaudio.h	/^MA_API ma_uint32 ma_engine_get_channels(const ma_engine* pEngine);$/;"	f
ma_engine_get_device	../ext/miniaudio.h	/^MA_API ma_device* ma_engine_get_device(ma_engine* pEngine);$/;"	f
ma_engine_get_endpoint	../ext/miniaudio.h	/^MA_API ma_node* ma_engine_get_endpoint(ma_engine* pEngine);$/;"	f
ma_engine_get_listener_count	../ext/miniaudio.h	/^MA_API ma_uint32 ma_engine_get_listener_count(const ma_engine* pEngine);$/;"	f
ma_engine_get_log	../ext/miniaudio.h	/^MA_API ma_log* ma_engine_get_log(ma_engine* pEngine);$/;"	f
ma_engine_get_node_graph	../ext/miniaudio.h	/^MA_API ma_node_graph* ma_engine_get_node_graph(ma_engine* pEngine);$/;"	f
ma_engine_get_resource_manager	../ext/miniaudio.h	/^MA_API ma_resource_manager* ma_engine_get_resource_manager(ma_engine* pEngine);$/;"	f
ma_engine_get_sample_rate	../ext/miniaudio.h	/^MA_API ma_uint32 ma_engine_get_sample_rate(const ma_engine* pEngine);$/;"	f
ma_engine_get_time	../ext/miniaudio.h	/^MA_API ma_uint64 ma_engine_get_time(const ma_engine* pEngine);$/;"	f
ma_engine_init	../ext/miniaudio.h	/^MA_API ma_result ma_engine_init(const ma_engine_config* pConfig, ma_engine* pEngine);$/;"	f
ma_engine_listener_get_cone	../ext/miniaudio.h	/^MA_API void ma_engine_listener_get_cone(const ma_engine* pEngine, ma_uint32 listenerIndex, float/;"	f
ma_engine_listener_get_direction	../ext/miniaudio.h	/^MA_API ma_vec3f ma_engine_listener_get_direction(const ma_engine* pEngine, ma_uint32 listenerInd/;"	f
ma_engine_listener_get_position	../ext/miniaudio.h	/^MA_API ma_vec3f ma_engine_listener_get_position(const ma_engine* pEngine, ma_uint32 listenerInde/;"	f
ma_engine_listener_get_velocity	../ext/miniaudio.h	/^MA_API ma_vec3f ma_engine_listener_get_velocity(const ma_engine* pEngine, ma_uint32 listenerInde/;"	f
ma_engine_listener_get_world_up	../ext/miniaudio.h	/^MA_API ma_vec3f ma_engine_listener_get_world_up(const ma_engine* pEngine, ma_uint32 listenerInde/;"	f
ma_engine_listener_is_enabled	../ext/miniaudio.h	/^MA_API ma_bool32 ma_engine_listener_is_enabled(const ma_engine* pEngine, ma_uint32 listenerIndex/;"	f
ma_engine_listener_set_cone	../ext/miniaudio.h	/^MA_API void ma_engine_listener_set_cone(ma_engine* pEngine, ma_uint32 listenerIndex, float inner/;"	f
ma_engine_listener_set_direction	../ext/miniaudio.h	/^MA_API void ma_engine_listener_set_direction(ma_engine* pEngine, ma_uint32 listenerIndex, float /;"	f
ma_engine_listener_set_enabled	../ext/miniaudio.h	/^MA_API void ma_engine_listener_set_enabled(ma_engine* pEngine, ma_uint32 listenerIndex, ma_bool3/;"	f
ma_engine_listener_set_position	../ext/miniaudio.h	/^MA_API void ma_engine_listener_set_position(ma_engine* pEngine, ma_uint32 listenerIndex, float x/;"	f
ma_engine_listener_set_velocity	../ext/miniaudio.h	/^MA_API void ma_engine_listener_set_velocity(ma_engine* pEngine, ma_uint32 listenerIndex, float x/;"	f
ma_engine_listener_set_world_up	../ext/miniaudio.h	/^MA_API void ma_engine_listener_set_world_up(ma_engine* pEngine, ma_uint32 listenerIndex, float x/;"	f
ma_engine_node	../ext/miniaudio.h	/^} ma_engine_node;$/;"	t
ma_engine_node_config	../ext/miniaudio.h	/^} ma_engine_node_config;$/;"	t
ma_engine_node_config_init	../ext/miniaudio.h	/^MA_API ma_engine_node_config ma_engine_node_config_init(ma_engine* pEngine, ma_engine_node_type /;"	f
ma_engine_node_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_engine_node_get_heap_size(const ma_engine_node_config* pConfig, size_t* pHea/;"	f
ma_engine_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_engine_node_init(const ma_engine_node_config* pConfig, const ma_allocation_c/;"	f
ma_engine_node_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_engine_node_init_preallocated(const ma_engine_node_config* pConfig, void* pH/;"	f
ma_engine_node_type	../ext/miniaudio.h	/^} ma_engine_node_type;$/;"	t
ma_engine_node_type_group	../ext/miniaudio.h	/^    ma_engine_node_type_group$/;"	e
ma_engine_node_type_sound	../ext/miniaudio.h	/^    ma_engine_node_type_sound,$/;"	e
ma_engine_node_uninit	../ext/miniaudio.h	/^MA_API void ma_engine_node_uninit(ma_engine_node* pEngineNode, const ma_allocation_callbacks* pA/;"	f
ma_engine_play_sound	../ext/miniaudio.h	/^MA_API ma_result ma_engine_play_sound(ma_engine* pEngine, const char* pFilePath, ma_sound_group*/;"	f
ma_engine_play_sound_ex	../ext/miniaudio.h	/^MA_API ma_result ma_engine_play_sound_ex(ma_engine* pEngine, const char* pFilePath, ma_node* pNo/;"	f
ma_engine_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_engine_read_pcm_frames(ma_engine* pEngine, void* pFramesOut, ma_uint64 frame/;"	f
ma_engine_set_gain_db	../ext/miniaudio.h	/^MA_API ma_result ma_engine_set_gain_db(ma_engine* pEngine, float gainDB);$/;"	f
ma_engine_set_time	../ext/miniaudio.h	/^MA_API ma_result ma_engine_set_time(ma_engine* pEngine, ma_uint64 globalTime);$/;"	f
ma_engine_set_volume	../ext/miniaudio.h	/^MA_API ma_result ma_engine_set_volume(ma_engine* pEngine, float volume);$/;"	f
ma_engine_start	../ext/miniaudio.h	/^MA_API ma_result ma_engine_start(ma_engine* pEngine);$/;"	f
ma_engine_stop	../ext/miniaudio.h	/^MA_API ma_result ma_engine_stop(ma_engine* pEngine);$/;"	f
ma_engine_uninit	../ext/miniaudio.h	/^MA_API void ma_engine_uninit(ma_engine* pEngine);$/;"	f
ma_event	../ext/miniaudio.h	/^typedef ma_handle ma_event;$/;"	t
ma_event	../ext/miniaudio.h	/^} ma_event;$/;"	t
ma_event_alloc_and_init	../ext/miniaudio.h	/^static ma_result ma_event_alloc_and_init(ma_event** ppEvent, ma_allocation_callbacks* pAllocatio/;"	f
ma_event_init	../ext/miniaudio.h	/^MA_API ma_result ma_event_init(ma_event* pEvent)$/;"	f
ma_event_init	../ext/miniaudio.h	/^MA_API ma_result ma_event_init(ma_event* pEvent);$/;"	f	struct:ma_resampler_config
ma_event_init__posix	../ext/miniaudio.h	/^static ma_result ma_event_init__posix(ma_event* pEvent)$/;"	f
ma_event_init__win32	../ext/miniaudio.h	/^static ma_result ma_event_init__win32(ma_event* pEvent)$/;"	f
ma_event_signal	../ext/miniaudio.h	/^MA_API ma_result ma_event_signal(ma_event* pEvent)$/;"	f
ma_event_signal	../ext/miniaudio.h	/^MA_API ma_result ma_event_signal(ma_event* pEvent);$/;"	f	struct:ma_resampler_config
ma_event_signal__posix	../ext/miniaudio.h	/^static ma_result ma_event_signal__posix(ma_event* pEvent)$/;"	f
ma_event_signal__win32	../ext/miniaudio.h	/^static ma_result ma_event_signal__win32(ma_event* pEvent)$/;"	f
ma_event_uninit	../ext/miniaudio.h	/^MA_API void ma_event_uninit(ma_event* pEvent)$/;"	f
ma_event_uninit	../ext/miniaudio.h	/^MA_API void ma_event_uninit(ma_event* pEvent);$/;"	f	struct:ma_resampler_config
ma_event_uninit__posix	../ext/miniaudio.h	/^static void ma_event_uninit__posix(ma_event* pEvent)$/;"	f
ma_event_uninit__win32	../ext/miniaudio.h	/^static void ma_event_uninit__win32(ma_event* pEvent)$/;"	f
ma_event_uninit_and_free	../ext/miniaudio.h	/^static void ma_event_uninit_and_free(ma_event* pEvent, ma_allocation_callbacks* pAllocationCallb/;"	f
ma_event_wait	../ext/miniaudio.h	/^MA_API ma_result ma_event_wait(ma_event* pEvent)$/;"	f
ma_event_wait	../ext/miniaudio.h	/^MA_API ma_result ma_event_wait(ma_event* pEvent);$/;"	f	struct:ma_resampler_config
ma_event_wait__posix	../ext/miniaudio.h	/^static ma_result ma_event_wait__posix(ma_event* pEvent)$/;"	f
ma_event_wait__win32	../ext/miniaudio.h	/^static ma_result ma_event_wait__win32(ma_event* pEvent)$/;"	f
ma_expd	../ext/miniaudio.h	/^static MA_INLINE double ma_expd(double x)$/;"	f
ma_fader	../ext/miniaudio.h	/^} ma_fader;$/;"	t
ma_fader_config	../ext/miniaudio.h	/^} ma_fader_config;$/;"	t
ma_fader_config_init	../ext/miniaudio.h	/^MA_API ma_fader_config ma_fader_config_init(ma_format format, ma_uint32 channels, ma_uint32 samp/;"	f
ma_fader_get_current_volume	../ext/miniaudio.h	/^MA_API float ma_fader_get_current_volume(ma_fader* pFader);$/;"	f
ma_fader_get_data_format	../ext/miniaudio.h	/^MA_API void ma_fader_get_data_format(const ma_fader* pFader, ma_format* pFormat, ma_uint32* pCha/;"	f
ma_fader_init	../ext/miniaudio.h	/^MA_API ma_result ma_fader_init(const ma_fader_config* pConfig, ma_fader* pFader);$/;"	f
ma_fader_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_fader_process_pcm_frames(ma_fader* pFader, void* pFramesOut, const void* pFr/;"	f
ma_fader_set_fade	../ext/miniaudio.h	/^MA_API void ma_fader_set_fade(ma_fader* pFader, float volumeBeg, float volumeEnd, ma_uint64 leng/;"	f
ma_fence	../ext/miniaudio.h	/^} ma_fence;$/;"	t	struct:ma_resampler_config
ma_fence_acquire	../ext/miniaudio.h	/^MA_API ma_result ma_fence_acquire(ma_fence* pFence)$/;"	f
ma_fence_acquire	../ext/miniaudio.h	/^MA_API ma_result ma_fence_acquire(ma_fence* pFence);    \/* Increment counter. *\/$/;"	f	struct:ma_resampler_config
ma_fence_init	../ext/miniaudio.h	/^MA_API ma_result ma_fence_init(ma_fence* pFence)$/;"	f
ma_fence_init	../ext/miniaudio.h	/^MA_API ma_result ma_fence_init(ma_fence* pFence);$/;"	f	struct:ma_resampler_config
ma_fence_release	../ext/miniaudio.h	/^MA_API ma_result ma_fence_release(ma_fence* pFence)$/;"	f
ma_fence_release	../ext/miniaudio.h	/^MA_API ma_result ma_fence_release(ma_fence* pFence);    \/* Decrement counter. *\/$/;"	f	struct:ma_resampler_config
ma_fence_uninit	../ext/miniaudio.h	/^MA_API void ma_fence_uninit(ma_fence* pFence)$/;"	f
ma_fence_uninit	../ext/miniaudio.h	/^MA_API void ma_fence_uninit(ma_fence* pFence);$/;"	f	struct:ma_resampler_config
ma_fence_wait	../ext/miniaudio.h	/^MA_API ma_result ma_fence_wait(ma_fence* pFence)$/;"	f
ma_fence_wait	../ext/miniaudio.h	/^MA_API ma_result ma_fence_wait(ma_fence* pFence);       \/* Wait for counter to reach 0. *\/$/;"	f	struct:ma_resampler_config
ma_ffs_32	../ext/miniaudio.h	/^static ma_uint32 ma_ffs_32(ma_uint32 x)$/;"	f
ma_file_info	../ext/miniaudio.h	/^} ma_file_info;$/;"	t	struct:ma_paged_audio_buffer_page
ma_find_last_character	../ext/miniaudio.h	/^static char* ma_find_last_character(char* str, char ch)$/;"	f	struct:ma_IDirectSoundNotify
ma_float_to_fixed_16	../ext/miniaudio.h	/^static MA_INLINE ma_int16 ma_float_to_fixed_16(float x)$/;"	f
ma_fopen	../ext/miniaudio.h	/^MA_API ma_result ma_fopen(FILE** ppFile, const char* pFilePath, const char* pOpenMode)$/;"	f
ma_format	../ext/miniaudio.h	/^} ma_format;$/;"	t
ma_format_count	../ext/miniaudio.h	/^    ma_format_count$/;"	e
ma_format_f32	../ext/miniaudio.h	/^    ma_format_f32     = 5,$/;"	e
ma_format_from_WAVEFORMATEX	../ext/miniaudio.h	/^static ma_format ma_format_from_WAVEFORMATEX(const WAVEFORMATEX* pWF)$/;"	f
ma_format_s16	../ext/miniaudio.h	/^    ma_format_s16     = 2,     \/* Seems to be the most widely supported format. *\/$/;"	e
ma_format_s24	../ext/miniaudio.h	/^    ma_format_s24     = 3,     \/* Tightly packed. 3 bytes per sample. *\/$/;"	e
ma_format_s32	../ext/miniaudio.h	/^    ma_format_s32     = 4,$/;"	e
ma_format_u8	../ext/miniaudio.h	/^    ma_format_u8      = 1,$/;"	e
ma_format_unknown	../ext/miniaudio.h	/^    ma_format_unknown = 0,     \/* Mainly used for indicating an error, but also used as the def/;"	e
ma_formats_flags_to_WAVEFORMATEX__winmm	../ext/miniaudio.h	/^static ma_result ma_formats_flags_to_WAVEFORMATEX__winmm(DWORD dwFormats, WORD channels, WAVEFOR/;"	f	struct:ma_IDirectSoundNotify
ma_free	../ext/miniaudio.h	/^MA_API void ma_free(void* p, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f	struct:ma_resampler_config
ma_gainer	../ext/miniaudio.h	/^} ma_gainer;$/;"	t
ma_gainer_config	../ext/miniaudio.h	/^} ma_gainer_config;$/;"	t
ma_gainer_config_init	../ext/miniaudio.h	/^MA_API ma_gainer_config ma_gainer_config_init(ma_uint32 channels, ma_uint32 smoothTimeInFrames);$/;"	f
ma_gainer_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_gainer_get_heap_size(const ma_gainer_config* pConfig, size_t* pHeapSizeInByt/;"	f
ma_gainer_init	../ext/miniaudio.h	/^MA_API ma_result ma_gainer_init(const ma_gainer_config* pConfig, const ma_allocation_callbacks* /;"	f
ma_gainer_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_gainer_init_preallocated(const ma_gainer_config* pConfig, void* pHeap, ma_ga/;"	f
ma_gainer_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_gainer_process_pcm_frames(ma_gainer* pGainer, void* pFramesOut, const void* /;"	f
ma_gainer_set_gain	../ext/miniaudio.h	/^MA_API ma_result ma_gainer_set_gain(ma_gainer* pGainer, float newGain);$/;"	f
ma_gainer_set_gains	../ext/miniaudio.h	/^MA_API ma_result ma_gainer_set_gains(ma_gainer* pGainer, float* pNewGains);$/;"	f
ma_gainer_uninit	../ext/miniaudio.h	/^MA_API void ma_gainer_uninit(ma_gainer* pGainer, const ma_allocation_callbacks* pAllocationCallb/;"	f
ma_gcf_u32	../ext/miniaudio.h	/^static MA_INLINE ma_uint32 ma_gcf_u32(ma_uint32 a, ma_uint32 b)$/;"	f
ma_get_backend_name	../ext/miniaudio.h	/^MA_API const char* ma_get_backend_name(ma_backend backend)$/;"	f
ma_get_backend_name	../ext/miniaudio.h	/^MA_API const char* ma_get_backend_name(ma_backend backend);$/;"	f	struct:ma_device
ma_get_best_info_from_formats_flags__winmm	../ext/miniaudio.h	/^static ma_result ma_get_best_info_from_formats_flags__winmm(DWORD dwFormats, WORD channels, WORD/;"	f	struct:ma_IDirectSoundNotify
ma_get_best_sample_rate_within_range	../ext/miniaudio.h	/^static ma_uint32 ma_get_best_sample_rate_within_range(ma_uint32 sampleRateMin, ma_uint32 sampleR/;"	f	struct:ma_IDirectSoundNotify
ma_get_bytes_per_frame	../ext/miniaudio.h	/^static MA_INLINE ma_uint32 ma_get_bytes_per_frame(ma_format format, ma_uint32 channels) { return/;"	f	struct:ma_resampler_config
ma_get_bytes_per_sample	../ext/miniaudio.h	/^MA_API ma_uint32 ma_get_bytes_per_sample(ma_format format);$/;"	f	struct:ma_resampler_config
ma_get_channels_from_speaker_config__dsound	../ext/miniaudio.h	/^static void ma_get_channels_from_speaker_config__dsound(DWORD speakerConfig, WORD* pChannelsOut,/;"	f	struct:ma_IDirectSoundNotify
ma_get_closest_standard_sample_rate	../ext/miniaudio.h	/^static ma_uint32 ma_get_closest_standard_sample_rate(ma_uint32 sampleRateIn)$/;"	f
ma_get_enabled_backends	../ext/miniaudio.h	/^MA_API ma_result ma_get_enabled_backends(ma_backend* pBackends, size_t backendCap, size_t* pBack/;"	f
ma_get_enabled_backends	../ext/miniaudio.h	/^MA_API ma_result ma_get_enabled_backends(ma_backend* pBackends, size_t backendCap, size_t* pBack/;"	f	struct:ma_device
ma_get_format_name	../ext/miniaudio.h	/^MA_API const char* ma_get_format_name(ma_format format);$/;"	f	struct:ma_resampler_config
ma_get_format_priority_index	../ext/miniaudio.h	/^MA_API ma_uint32 ma_get_format_priority_index(ma_format format) \/* Lower = better. *\/$/;"	f
ma_get_period_size_in_bytes	../ext/miniaudio.h	/^static ma_uint32 ma_get_period_size_in_bytes(ma_uint32 periodSizeInFrames, ma_format format, ma_/;"	f	struct:ma_IDirectSoundNotify
ma_handedness	../ext/miniaudio.h	/^} ma_handedness;$/;"	t
ma_handedness_left	../ext/miniaudio.h	/^    ma_handedness_left$/;"	e
ma_handedness_right	../ext/miniaudio.h	/^    ma_handedness_right,$/;"	e
ma_handle	../ext/miniaudio.h	/^typedef void* ma_handle;$/;"	t
ma_has_avx	../ext/miniaudio.h	/^static MA_INLINE ma_bool32 ma_has_avx()$/;"	f
ma_has_avx2	../ext/miniaudio.h	/^static MA_INLINE ma_bool32 ma_has_avx2(void)$/;"	f
ma_has_neon	../ext/miniaudio.h	/^static MA_INLINE ma_bool32 ma_has_neon(void)$/;"	f
ma_has_sse2	../ext/miniaudio.h	/^static MA_INLINE ma_bool32 ma_has_sse2(void)$/;"	f
ma_hishelf2	../ext/miniaudio.h	/^} ma_hishelf2;$/;"	t
ma_hishelf2_config_init	../ext/miniaudio.h	/^MA_API ma_hishelf2_config ma_hishelf2_config_init(ma_format format, ma_uint32 channels, ma_uint3/;"	f
ma_hishelf2_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_hishelf2_get_heap_size(const ma_hishelf2_config* pConfig, size_t* pHeapSizeI/;"	f
ma_hishelf2_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_hishelf2_get_latency(const ma_hishelf2* pFilter);$/;"	f
ma_hishelf2_init	../ext/miniaudio.h	/^MA_API ma_result ma_hishelf2_init(const ma_hishelf2_config* pConfig, const ma_allocation_callbac/;"	f
ma_hishelf2_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_hishelf2_init_preallocated(const ma_hishelf2_config* pConfig, void* pHeap, m/;"	f
ma_hishelf2_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_hishelf2_process_pcm_frames(ma_hishelf2* pFilter, void* pFramesOut, const vo/;"	f
ma_hishelf2_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_hishelf2_reinit(const ma_hishelf2_config* pConfig, ma_hishelf2* pFilter);$/;"	f
ma_hishelf2_uninit	../ext/miniaudio.h	/^MA_API void ma_hishelf2_uninit(ma_hishelf2* pFilter, const ma_allocation_callbacks* pAllocationC/;"	f
ma_hishelf_config	../ext/miniaudio.h	/^} ma_hishelf2_config, ma_hishelf_config;$/;"	t
ma_hishelf_node	../ext/miniaudio.h	/^} ma_hishelf_node;$/;"	t
ma_hishelf_node_config	../ext/miniaudio.h	/^} ma_hishelf_node_config;$/;"	t
ma_hishelf_node_config_init	../ext/miniaudio.h	/^MA_API ma_hishelf_node_config ma_hishelf_node_config_init(ma_uint32 channels, ma_uint32 sampleRa/;"	f
ma_hishelf_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_hishelf_node_init(ma_node_graph* pNodeGraph, const ma_hishelf_node_config* p/;"	f
ma_hishelf_node_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_hishelf_node_reinit(const ma_hishelf_config* pConfig, ma_hishelf_node* pNode/;"	f
ma_hishelf_node_uninit	../ext/miniaudio.h	/^MA_API void ma_hishelf_node_uninit(ma_hishelf_node* pNode, const ma_allocation_callbacks* pAlloc/;"	f
ma_hpf	../ext/miniaudio.h	/^} ma_hpf;$/;"	t
ma_hpf1	../ext/miniaudio.h	/^} ma_hpf1;$/;"	t
ma_hpf1_config_init	../ext/miniaudio.h	/^MA_API ma_hpf1_config ma_hpf1_config_init(ma_format format, ma_uint32 channels, ma_uint32 sample/;"	f
ma_hpf1_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_hpf1_get_heap_size(const ma_hpf1_config* pConfig, size_t* pHeapSizeInBytes);$/;"	f
ma_hpf1_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_hpf1_get_latency(const ma_hpf1* pHPF);$/;"	f
ma_hpf1_init	../ext/miniaudio.h	/^MA_API ma_result ma_hpf1_init(const ma_hpf1_config* pConfig, const ma_allocation_callbacks* pAll/;"	f
ma_hpf1_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_hpf1_init_preallocated(const ma_hpf1_config* pConfig, void* pHeap, ma_hpf1* /;"	f
ma_hpf1_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_hpf1_process_pcm_frames(ma_hpf1* pHPF, void* pFramesOut, const void* pFrames/;"	f
ma_hpf1_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_hpf1_reinit(const ma_hpf1_config* pConfig, ma_hpf1* pHPF);$/;"	f
ma_hpf1_uninit	../ext/miniaudio.h	/^MA_API void ma_hpf1_uninit(ma_hpf1* pHPF, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f
ma_hpf2	../ext/miniaudio.h	/^} ma_hpf2;$/;"	t
ma_hpf2_config	../ext/miniaudio.h	/^} ma_hpf1_config, ma_hpf2_config;$/;"	t
ma_hpf2_config_init	../ext/miniaudio.h	/^MA_API ma_hpf2_config ma_hpf2_config_init(ma_format format, ma_uint32 channels, ma_uint32 sample/;"	f
ma_hpf2_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_hpf2_get_heap_size(const ma_hpf2_config* pConfig, size_t* pHeapSizeInBytes);$/;"	f
ma_hpf2_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_hpf2_get_latency(const ma_hpf2* pHPF);$/;"	f
ma_hpf2_init	../ext/miniaudio.h	/^MA_API ma_result ma_hpf2_init(const ma_hpf2_config* pConfig, const ma_allocation_callbacks* pAll/;"	f
ma_hpf2_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_hpf2_init_preallocated(const ma_hpf2_config* pConfig, void* pHeap, ma_hpf2* /;"	f
ma_hpf2_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_hpf2_process_pcm_frames(ma_hpf2* pHPF, void* pFramesOut, const void* pFrames/;"	f
ma_hpf2_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_hpf2_reinit(const ma_hpf2_config* pConfig, ma_hpf2* pHPF);$/;"	f
ma_hpf2_uninit	../ext/miniaudio.h	/^MA_API void ma_hpf2_uninit(ma_hpf2* pHPF, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f
ma_hpf_config	../ext/miniaudio.h	/^} ma_hpf_config;$/;"	t
ma_hpf_config_init	../ext/miniaudio.h	/^MA_API ma_hpf_config ma_hpf_config_init(ma_format format, ma_uint32 channels, ma_uint32 sampleRa/;"	f
ma_hpf_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_hpf_get_heap_size(const ma_hpf_config* pConfig, size_t* pHeapSizeInBytes);$/;"	f
ma_hpf_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_hpf_get_latency(const ma_hpf* pHPF);$/;"	f
ma_hpf_init	../ext/miniaudio.h	/^MA_API ma_result ma_hpf_init(const ma_hpf_config* pConfig, const ma_allocation_callbacks* pAlloc/;"	f
ma_hpf_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_hpf_init_preallocated(const ma_hpf_config* pConfig, void* pHeap, ma_hpf* pLP/;"	f
ma_hpf_node	../ext/miniaudio.h	/^} ma_hpf_node;$/;"	t
ma_hpf_node_config	../ext/miniaudio.h	/^} ma_hpf_node_config;$/;"	t
ma_hpf_node_config_init	../ext/miniaudio.h	/^MA_API ma_hpf_node_config ma_hpf_node_config_init(ma_uint32 channels, ma_uint32 sampleRate, doub/;"	f
ma_hpf_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_hpf_node_init(ma_node_graph* pNodeGraph, const ma_hpf_node_config* pConfig, /;"	f
ma_hpf_node_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_hpf_node_reinit(const ma_hpf_config* pConfig, ma_hpf_node* pNode);$/;"	f
ma_hpf_node_uninit	../ext/miniaudio.h	/^MA_API void ma_hpf_node_uninit(ma_hpf_node* pNode, const ma_allocation_callbacks* pAllocationCal/;"	f
ma_hpf_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_hpf_process_pcm_frames(ma_hpf* pHPF, void* pFramesOut, const void* pFramesIn/;"	f
ma_hpf_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_hpf_reinit(const ma_hpf_config* pConfig, ma_hpf* pHPF);$/;"	f
ma_hpf_uninit	../ext/miniaudio.h	/^MA_API void ma_hpf_uninit(ma_hpf* pHPF, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f
ma_int16	../ext/miniaudio.h	/^    typedef   signed short          ma_int16;$/;"	t
ma_int16	../ext/miniaudio.h	/^    typedef int16_t  ma_int16;$/;"	t
ma_int32	../ext/miniaudio.h	/^    typedef   signed int            ma_int32;$/;"	t
ma_int32	../ext/miniaudio.h	/^    typedef int32_t  ma_int32;$/;"	t
ma_int64	../ext/miniaudio.h	/^        typedef   signed __int64    ma_int64;$/;"	t
ma_int64	../ext/miniaudio.h	/^        typedef   signed long long  ma_int64;$/;"	t
ma_int64	../ext/miniaudio.h	/^    typedef int64_t  ma_int64;$/;"	t
ma_int8	../ext/miniaudio.h	/^    typedef   signed char           ma_int8;$/;"	t
ma_int8	../ext/miniaudio.h	/^    typedef int8_t   ma_int8;$/;"	t
ma_interleave_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_interleave_pcm_frames(ma_format format, ma_uint32 channels, ma_uint64 frameCount,/;"	f	struct:ma_resampler_config
ma_ios_session_category	../ext/miniaudio.h	/^} ma_ios_session_category;$/;"	t	struct:ma_job
ma_ios_session_category_ambient	../ext/miniaudio.h	/^    ma_ios_session_category_ambient,            \/* AVAudioSessionCategoryAmbient *\/$/;"	e	struct:ma_job
ma_ios_session_category_default	../ext/miniaudio.h	/^    ma_ios_session_category_default = 0,        \/* AVAudioSessionCategoryPlayAndRecord with AVA/;"	e	struct:ma_job
ma_ios_session_category_multi_route	../ext/miniaudio.h	/^    ma_ios_session_category_multi_route         \/* AVAudioSessionCategoryMultiRoute *\/$/;"	e	struct:ma_job
ma_ios_session_category_none	../ext/miniaudio.h	/^    ma_ios_session_category_none,               \/* Leave the session category unchanged. *\/$/;"	e	struct:ma_job
ma_ios_session_category_option	../ext/miniaudio.h	/^} ma_ios_session_category_option;$/;"	t
ma_ios_session_category_option_allow_air_play	../ext/miniaudio.h	/^    ma_ios_session_category_option_allow_air_play                             = 0x40,   \/* AVAu/;"	e	struct:ma_job
ma_ios_session_category_option_allow_bluetooth	../ext/miniaudio.h	/^    ma_ios_session_category_option_allow_bluetooth                            = 0x04,   \/* AVAu/;"	e	struct:ma_job
ma_ios_session_category_option_allow_bluetooth_a2dp	../ext/miniaudio.h	/^    ma_ios_session_category_option_allow_bluetooth_a2dp                       = 0x20,   \/* AVAu/;"	e	struct:ma_job
ma_ios_session_category_option_default_to_speaker	../ext/miniaudio.h	/^    ma_ios_session_category_option_default_to_speaker                         = 0x08,   \/* AVAu/;"	e	struct:ma_job
ma_ios_session_category_option_duck_others	../ext/miniaudio.h	/^    ma_ios_session_category_option_duck_others                                = 0x02,   \/* AVAu/;"	e	struct:ma_job
ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others	../ext/miniaudio.h	/^    ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others = 0x11,   \/* AVAu/;"	e	struct:ma_job
ma_ios_session_category_option_mix_with_others	../ext/miniaudio.h	/^    ma_ios_session_category_option_mix_with_others                            = 0x01,   \/* AVAu/;"	e	struct:ma_job
ma_ios_session_category_play_and_record	../ext/miniaudio.h	/^    ma_ios_session_category_play_and_record,    \/* AVAudioSessionCategoryPlayAndRecord *\/$/;"	e	struct:ma_job
ma_ios_session_category_playback	../ext/miniaudio.h	/^    ma_ios_session_category_playback,           \/* AVAudioSessionCategoryPlayback *\/$/;"	e	struct:ma_job
ma_ios_session_category_record	../ext/miniaudio.h	/^    ma_ios_session_category_record,             \/* AVAudioSessionCategoryRecord *\/$/;"	e	struct:ma_job
ma_ios_session_category_solo_ambient	../ext/miniaudio.h	/^    ma_ios_session_category_solo_ambient,       \/* AVAudioSessionCategorySoloAmbient *\/$/;"	e	struct:ma_job
ma_is_backend_enabled	../ext/miniaudio.h	/^MA_API ma_bool32 ma_is_backend_enabled(ma_backend backend)$/;"	f
ma_is_backend_enabled	../ext/miniaudio.h	/^MA_API ma_bool32 ma_is_backend_enabled(ma_backend backend);$/;"	f	struct:ma_device
ma_is_big_endian	../ext/miniaudio.h	/^static MA_INLINE ma_bool32 ma_is_big_endian(void)$/;"	f
ma_is_guid_equal	../ext/miniaudio.h	/^#define ma_is_guid_equal(a, b) IsEqualGUID((const GUID*)a, (const GUID*)b)$/;"	M
ma_is_guid_equal	../ext/miniaudio.h	/^static ma_bool32 ma_is_guid_equal(const void* a, const void* b)$/;"	f
ma_is_guid_null	../ext/miniaudio.h	/^static MA_INLINE ma_bool32 ma_is_guid_null(const void* guid)$/;"	f
ma_is_little_endian	../ext/miniaudio.h	/^static MA_INLINE ma_bool32 ma_is_little_endian(void)$/;"	f
ma_is_loopback_supported	../ext/miniaudio.h	/^MA_API ma_bool32 ma_is_loopback_supported(ma_backend backend)$/;"	f
ma_is_loopback_supported	../ext/miniaudio.h	/^MA_API ma_bool32 ma_is_loopback_supported(ma_backend backend);$/;"	f	struct:ma_device
ma_is_standard_sample_rate	../ext/miniaudio.h	/^static MA_INLINE ma_bool32 ma_is_standard_sample_rate(ma_uint32 sampleRate)$/;"	f
ma_itoa_s	../ext/miniaudio.h	/^MA_API int ma_itoa_s(int value, char* dst, size_t dstSizeInBytes, int radix)$/;"	f
ma_job	../ext/miniaudio.h	/^struct ma_job$/;"	s
ma_job	../ext/miniaudio.h	/^typedef struct ma_job ma_job;$/;"	t
ma_job_extract_code	../ext/miniaudio.h	/^static MA_INLINE ma_uint16 ma_job_extract_code(ma_uint64 toc)$/;"	f
ma_job_extract_refcount	../ext/miniaudio.h	/^static MA_INLINE ma_uint32 ma_job_extract_refcount(ma_uint64 toc)$/;"	f
ma_job_extract_slot	../ext/miniaudio.h	/^static MA_INLINE ma_uint16 ma_job_extract_slot(ma_uint64 toc)$/;"	f
ma_job_init	../ext/miniaudio.h	/^MA_API ma_job ma_job_init(ma_uint16 code)$/;"	f
ma_job_init	../ext/miniaudio.h	/^MA_API ma_job ma_job_init(ma_uint16 code);$/;"	f	struct:ma_job
ma_job_process	../ext/miniaudio.h	/^MA_API ma_result ma_job_process(ma_job* pJob)$/;"	f
ma_job_process	../ext/miniaudio.h	/^MA_API ma_result ma_job_process(ma_job* pJob);$/;"	f	struct:ma_job
ma_job_process__custom	../ext/miniaudio.h	/^static ma_result ma_job_process__custom(ma_job* pJob)$/;"	f
ma_job_process__custom	../ext/miniaudio.h	/^static ma_result ma_job_process__custom(ma_job* pJob);$/;"	f
ma_job_process__device__aaudio_reroute	../ext/miniaudio.h	/^static ma_result ma_job_process__device__aaudio_reroute(ma_job* pJob);$/;"	f
ma_job_process__noop	../ext/miniaudio.h	/^static ma_result ma_job_process__noop(ma_job* pJob)$/;"	f
ma_job_process__noop	../ext/miniaudio.h	/^static ma_result ma_job_process__noop(ma_job* pJob);$/;"	f
ma_job_process__quit	../ext/miniaudio.h	/^static ma_result ma_job_process__quit(ma_job* pJob)$/;"	f
ma_job_process__quit	../ext/miniaudio.h	/^static ma_result ma_job_process__quit(ma_job* pJob);$/;"	f
ma_job_process__resource_manager__free_data_buffer	../ext/miniaudio.h	/^static ma_result ma_job_process__resource_manager__free_data_buffer(ma_job* pJob);$/;"	f
ma_job_process__resource_manager__free_data_buffer_node	../ext/miniaudio.h	/^static ma_result ma_job_process__resource_manager__free_data_buffer_node(ma_job* pJob);$/;"	f
ma_job_process__resource_manager__free_data_stream	../ext/miniaudio.h	/^static ma_result ma_job_process__resource_manager__free_data_stream(ma_job* pJob);$/;"	f
ma_job_process__resource_manager__load_data_buffer	../ext/miniaudio.h	/^static ma_result ma_job_process__resource_manager__load_data_buffer(ma_job* pJob);$/;"	f
ma_job_process__resource_manager__load_data_buffer_node	../ext/miniaudio.h	/^static ma_result ma_job_process__resource_manager__load_data_buffer_node(ma_job* pJob);$/;"	f
ma_job_process__resource_manager__load_data_stream	../ext/miniaudio.h	/^static ma_result ma_job_process__resource_manager__load_data_stream(ma_job* pJob);$/;"	f
ma_job_process__resource_manager__page_data_buffer_node	../ext/miniaudio.h	/^static ma_result ma_job_process__resource_manager__page_data_buffer_node(ma_job* pJob);$/;"	f
ma_job_process__resource_manager__page_data_stream	../ext/miniaudio.h	/^static ma_result ma_job_process__resource_manager__page_data_stream(ma_job* pJob);$/;"	f
ma_job_process__resource_manager__seek_data_stream	../ext/miniaudio.h	/^static ma_result ma_job_process__resource_manager__seek_data_stream(ma_job* pJob);$/;"	f
ma_job_queue	../ext/miniaudio.h	/^} ma_job_queue;$/;"	t	struct:ma_job
ma_job_queue_cas	../ext/miniaudio.h	/^static ma_bool32 ma_job_queue_cas(volatile ma_uint64* dst, ma_uint64 expected, ma_uint64 desired/;"	f
ma_job_queue_config	../ext/miniaudio.h	/^} ma_job_queue_config;$/;"	t	struct:ma_job
ma_job_queue_config_init	../ext/miniaudio.h	/^MA_API ma_job_queue_config ma_job_queue_config_init(ma_uint32 flags, ma_uint32 capacity)$/;"	f
ma_job_queue_config_init	../ext/miniaudio.h	/^MA_API ma_job_queue_config ma_job_queue_config_init(ma_uint32 flags, ma_uint32 capacity);$/;"	f	struct:ma_job
ma_job_queue_flags	../ext/miniaudio.h	/^} ma_job_queue_flags;$/;"	t	struct:ma_job
ma_job_queue_get_heap_layout	../ext/miniaudio.h	/^static ma_result ma_job_queue_get_heap_layout(const ma_job_queue_config* pConfig, ma_job_queue_h/;"	f
ma_job_queue_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_get_heap_size(const ma_job_queue_config* pConfig, size_t* pHeapSiz/;"	f
ma_job_queue_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_get_heap_size(const ma_job_queue_config* pConfig, size_t* pHeapSiz/;"	f	struct:ma_job
ma_job_queue_heap_layout	../ext/miniaudio.h	/^} ma_job_queue_heap_layout;$/;"	t
ma_job_queue_init	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_init(const ma_job_queue_config* pConfig, const ma_allocation_callb/;"	f
ma_job_queue_init	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_init(const ma_job_queue_config* pConfig, const ma_allocation_callb/;"	f	struct:ma_job
ma_job_queue_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_init_preallocated(const ma_job_queue_config* pConfig, void* pHeap,/;"	f
ma_job_queue_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_init_preallocated(const ma_job_queue_config* pConfig, void* pHeap,/;"	f	struct:ma_job
ma_job_queue_next	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_next(ma_job_queue* pQueue, ma_job* pJob)$/;"	f
ma_job_queue_next	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_next(ma_job_queue* pQueue, ma_job* pJob); \/* Returns MA_CANCELLED/;"	f	struct:ma_job
ma_job_queue_post	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_post(ma_job_queue* pQueue, const ma_job* pJob)$/;"	f
ma_job_queue_post	../ext/miniaudio.h	/^MA_API ma_result ma_job_queue_post(ma_job_queue* pQueue, const ma_job* pJob);$/;"	f	struct:ma_job
ma_job_queue_uninit	../ext/miniaudio.h	/^MA_API void ma_job_queue_uninit(ma_job_queue* pQueue, const ma_allocation_callbacks* pAllocation/;"	f
ma_job_queue_uninit	../ext/miniaudio.h	/^MA_API void ma_job_queue_uninit(ma_job_queue* pQueue, const ma_allocation_callbacks* pAllocation/;"	f	struct:ma_job
ma_job_set_refcount	../ext/miniaudio.h	/^static MA_INLINE ma_uint64 ma_job_set_refcount(ma_uint64 toc, ma_uint32 refcount)$/;"	f
ma_job_toc_to_allocation	../ext/miniaudio.h	/^static MA_INLINE ma_uint64 ma_job_toc_to_allocation(ma_uint64 toc)$/;"	f
ma_job_type	../ext/miniaudio.h	/^} ma_job_type;$/;"	t
ma_lcg	../ext/miniaudio.h	/^} ma_lcg;$/;"	t
ma_lcg_rand_f32	../ext/miniaudio.h	/^static MA_INLINE float ma_lcg_rand_f32(ma_lcg* pLCG)$/;"	f
ma_lcg_rand_f64	../ext/miniaudio.h	/^static MA_INLINE double ma_lcg_rand_f64(ma_lcg* pLCG)$/;"	f
ma_lcg_rand_range_f32	../ext/miniaudio.h	/^static MA_INLINE float ma_lcg_rand_range_f32(ma_lcg* pLCG, float lo, float hi)$/;"	f
ma_lcg_rand_range_s32	../ext/miniaudio.h	/^static MA_INLINE ma_int32 ma_lcg_rand_range_s32(ma_lcg* pLCG, ma_int32 lo, ma_int32 hi)$/;"	f
ma_lcg_rand_s16	../ext/miniaudio.h	/^static MA_INLINE ma_int16 ma_lcg_rand_s16(ma_lcg* pLCG)$/;"	f
ma_lcg_rand_s32	../ext/miniaudio.h	/^static MA_INLINE ma_int32 ma_lcg_rand_s32(ma_lcg* pLCG)$/;"	f
ma_lcg_rand_u32	../ext/miniaudio.h	/^static MA_INLINE ma_uint32 ma_lcg_rand_u32(ma_lcg* pLCG)$/;"	f
ma_lcg_seed	../ext/miniaudio.h	/^static MA_INLINE void ma_lcg_seed(ma_lcg* pLCG, ma_int32 seed)$/;"	f
ma_linear_resampler	../ext/miniaudio.h	/^} ma_linear_resampler;$/;"	t
ma_linear_resampler_config	../ext/miniaudio.h	/^} ma_linear_resampler_config;$/;"	t
ma_linear_resampler_config_init	../ext/miniaudio.h	/^MA_API ma_linear_resampler_config ma_linear_resampler_config_init(ma_format format, ma_uint32 ch/;"	f
ma_linear_resampler_get_expected_output_frame_count	../ext/miniaudio.h	/^MA_API ma_result ma_linear_resampler_get_expected_output_frame_count(const ma_linear_resampler* /;"	f
ma_linear_resampler_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_linear_resampler_get_heap_size(const ma_linear_resampler_config* pConfig, si/;"	f
ma_linear_resampler_get_input_latency	../ext/miniaudio.h	/^MA_API ma_uint64 ma_linear_resampler_get_input_latency(const ma_linear_resampler* pResampler);$/;"	f
ma_linear_resampler_get_output_latency	../ext/miniaudio.h	/^MA_API ma_uint64 ma_linear_resampler_get_output_latency(const ma_linear_resampler* pResampler);$/;"	f
ma_linear_resampler_get_required_input_frame_count	../ext/miniaudio.h	/^MA_API ma_result ma_linear_resampler_get_required_input_frame_count(const ma_linear_resampler* p/;"	f
ma_linear_resampler_init	../ext/miniaudio.h	/^MA_API ma_result ma_linear_resampler_init(const ma_linear_resampler_config* pConfig, const ma_al/;"	f
ma_linear_resampler_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_linear_resampler_init_preallocated(const ma_linear_resampler_config* pConfig/;"	f
ma_linear_resampler_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_linear_resampler_process_pcm_frames(ma_linear_resampler* pResampler, const v/;"	f
ma_linear_resampler_reset	../ext/miniaudio.h	/^MA_API ma_result ma_linear_resampler_reset(ma_linear_resampler* pResampler);$/;"	f
ma_linear_resampler_set_rate	../ext/miniaudio.h	/^MA_API ma_result ma_linear_resampler_set_rate(ma_linear_resampler* pResampler, ma_uint32 sampleR/;"	f
ma_linear_resampler_set_rate_ratio	../ext/miniaudio.h	/^MA_API ma_result ma_linear_resampler_set_rate_ratio(ma_linear_resampler* pResampler, float ratio/;"	f
ma_linear_resampler_uninit	../ext/miniaudio.h	/^MA_API void ma_linear_resampler_uninit(ma_linear_resampler* pResampler, const ma_allocation_call/;"	f
ma_log	../ext/miniaudio.h	/^} ma_log;$/;"	t
ma_log10d	../ext/miniaudio.h	/^static MA_INLINE double ma_log10d(double x)$/;"	f
ma_log10f	../ext/miniaudio.h	/^static MA_INLINE float ma_log10f(float x)$/;"	f
ma_log_callback	../ext/miniaudio.h	/^} ma_log_callback;$/;"	t
ma_log_callback_debug	../ext/miniaudio.h	/^void ma_log_callback_debug(void* pUserData, ma_uint32 level, const char* pMessage)$/;"	f
ma_log_callback_init	../ext/miniaudio.h	/^MA_API ma_log_callback ma_log_callback_init(ma_log_callback_proc onLog, void* pUserData)$/;"	f
ma_log_callback_init	../ext/miniaudio.h	/^MA_API ma_log_callback ma_log_callback_init(ma_log_callback_proc onLog, void* pUserData);$/;"	f
ma_log_init	../ext/miniaudio.h	/^MA_API ma_result ma_log_init(const ma_allocation_callbacks* pAllocationCallbacks, ma_log* pLog)$/;"	f
ma_log_init	../ext/miniaudio.h	/^MA_API ma_result ma_log_init(const ma_allocation_callbacks* pAllocationCallbacks, ma_log* pLog);$/;"	f
ma_log_level	../ext/miniaudio.h	/^} ma_log_level;$/;"	t
ma_log_level_to_string	../ext/miniaudio.h	/^MA_API const char* ma_log_level_to_string(ma_uint32 logLevel)$/;"	f
ma_log_level_to_string	../ext/miniaudio.h	/^MA_API const char* ma_log_level_to_string(ma_uint32 logLevel);$/;"	f	struct:ma_resampler_config
ma_log_lock	../ext/miniaudio.h	/^static void ma_log_lock(ma_log* pLog)$/;"	f
ma_log_post	../ext/miniaudio.h	/^MA_API ma_result ma_log_post(ma_log* pLog, ma_uint32 level, const char* pMessage)$/;"	f
ma_log_post	../ext/miniaudio.h	/^MA_API ma_result ma_log_post(ma_log* pLog, ma_uint32 level, const char* pMessage);$/;"	f
ma_log_postf	../ext/miniaudio.h	/^MA_API ma_result ma_log_postf(ma_log* pLog, ma_uint32 level, const char* pFormat, ...) MA_ATTRIB/;"	f
ma_log_postf	../ext/miniaudio.h	/^MA_API ma_result ma_log_postf(ma_log* pLog, ma_uint32 level, const char* pFormat, ...)$/;"	f
ma_log_postv	../ext/miniaudio.h	/^MA_API ma_result ma_log_postv(ma_log* pLog, ma_uint32 level, const char* pFormat, va_list args)$/;"	f
ma_log_postv	../ext/miniaudio.h	/^MA_API ma_result ma_log_postv(ma_log* pLog, ma_uint32 level, const char* pFormat, va_list args);$/;"	f
ma_log_register_callback	../ext/miniaudio.h	/^MA_API ma_result ma_log_register_callback(ma_log* pLog, ma_log_callback callback)$/;"	f
ma_log_register_callback	../ext/miniaudio.h	/^MA_API ma_result ma_log_register_callback(ma_log* pLog, ma_log_callback callback);$/;"	f
ma_log_uninit	../ext/miniaudio.h	/^MA_API void ma_log_uninit(ma_log* pLog)$/;"	f
ma_log_uninit	../ext/miniaudio.h	/^MA_API void ma_log_uninit(ma_log* pLog);$/;"	f
ma_log_unlock	../ext/miniaudio.h	/^static void ma_log_unlock(ma_log* pLog)$/;"	f
ma_log_unregister_callback	../ext/miniaudio.h	/^MA_API ma_result ma_log_unregister_callback(ma_log* pLog, ma_log_callback callback)$/;"	f
ma_log_unregister_callback	../ext/miniaudio.h	/^MA_API ma_result ma_log_unregister_callback(ma_log* pLog, ma_log_callback callback);$/;"	f
ma_logd	../ext/miniaudio.h	/^static MA_INLINE double ma_logd(double x)$/;"	f
ma_loshelf2	../ext/miniaudio.h	/^} ma_loshelf2;$/;"	t
ma_loshelf2_config_init	../ext/miniaudio.h	/^MA_API ma_loshelf2_config ma_loshelf2_config_init(ma_format format, ma_uint32 channels, ma_uint3/;"	f
ma_loshelf2_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_loshelf2_get_heap_size(const ma_loshelf2_config* pConfig, size_t* pHeapSizeI/;"	f
ma_loshelf2_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_loshelf2_get_latency(const ma_loshelf2* pFilter);$/;"	f
ma_loshelf2_init	../ext/miniaudio.h	/^MA_API ma_result ma_loshelf2_init(const ma_loshelf2_config* pConfig, const ma_allocation_callbac/;"	f
ma_loshelf2_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_loshelf2_init_preallocated(const ma_loshelf2_config* pConfig, void* pHeap, m/;"	f
ma_loshelf2_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_loshelf2_process_pcm_frames(ma_loshelf2* pFilter, void* pFramesOut, const vo/;"	f
ma_loshelf2_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_loshelf2_reinit(const ma_loshelf2_config* pConfig, ma_loshelf2* pFilter);$/;"	f
ma_loshelf2_uninit	../ext/miniaudio.h	/^MA_API void ma_loshelf2_uninit(ma_loshelf2* pFilter, const ma_allocation_callbacks* pAllocationC/;"	f
ma_loshelf_config	../ext/miniaudio.h	/^} ma_loshelf2_config, ma_loshelf_config;$/;"	t
ma_loshelf_node	../ext/miniaudio.h	/^} ma_loshelf_node;$/;"	t
ma_loshelf_node_config	../ext/miniaudio.h	/^} ma_loshelf_node_config;$/;"	t
ma_loshelf_node_config_init	../ext/miniaudio.h	/^MA_API ma_loshelf_node_config ma_loshelf_node_config_init(ma_uint32 channels, ma_uint32 sampleRa/;"	f
ma_loshelf_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_loshelf_node_init(ma_node_graph* pNodeGraph, const ma_loshelf_node_config* p/;"	f
ma_loshelf_node_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_loshelf_node_reinit(const ma_loshelf_config* pConfig, ma_loshelf_node* pNode/;"	f
ma_loshelf_node_uninit	../ext/miniaudio.h	/^MA_API void ma_loshelf_node_uninit(ma_loshelf_node* pNode, const ma_allocation_callbacks* pAlloc/;"	f
ma_lpf	../ext/miniaudio.h	/^} ma_lpf;$/;"	t
ma_lpf1	../ext/miniaudio.h	/^} ma_lpf1;$/;"	t
ma_lpf1_clear_cache	../ext/miniaudio.h	/^MA_API ma_result ma_lpf1_clear_cache(ma_lpf1* pLPF);$/;"	f
ma_lpf1_config_init	../ext/miniaudio.h	/^MA_API ma_lpf1_config ma_lpf1_config_init(ma_format format, ma_uint32 channels, ma_uint32 sample/;"	f
ma_lpf1_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_lpf1_get_heap_size(const ma_lpf1_config* pConfig, size_t* pHeapSizeInBytes);$/;"	f
ma_lpf1_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_lpf1_get_latency(const ma_lpf1* pLPF);$/;"	f
ma_lpf1_init	../ext/miniaudio.h	/^MA_API ma_result ma_lpf1_init(const ma_lpf1_config* pConfig, const ma_allocation_callbacks* pAll/;"	f
ma_lpf1_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_lpf1_init_preallocated(const ma_lpf1_config* pConfig, void* pHeap, ma_lpf1* /;"	f
ma_lpf1_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_lpf1_process_pcm_frames(ma_lpf1* pLPF, void* pFramesOut, const void* pFrames/;"	f
ma_lpf1_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_lpf1_reinit(const ma_lpf1_config* pConfig, ma_lpf1* pLPF);$/;"	f
ma_lpf1_uninit	../ext/miniaudio.h	/^MA_API void ma_lpf1_uninit(ma_lpf1* pLPF, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f
ma_lpf2	../ext/miniaudio.h	/^} ma_lpf2;$/;"	t
ma_lpf2_clear_cache	../ext/miniaudio.h	/^MA_API ma_result ma_lpf2_clear_cache(ma_lpf2* pLPF);$/;"	f
ma_lpf2_config	../ext/miniaudio.h	/^} ma_lpf1_config, ma_lpf2_config;$/;"	t
ma_lpf2_config_init	../ext/miniaudio.h	/^MA_API ma_lpf2_config ma_lpf2_config_init(ma_format format, ma_uint32 channels, ma_uint32 sample/;"	f
ma_lpf2_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_lpf2_get_heap_size(const ma_lpf2_config* pConfig, size_t* pHeapSizeInBytes);$/;"	f
ma_lpf2_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_lpf2_get_latency(const ma_lpf2* pLPF);$/;"	f
ma_lpf2_init	../ext/miniaudio.h	/^MA_API ma_result ma_lpf2_init(const ma_lpf2_config* pConfig, const ma_allocation_callbacks* pAll/;"	f
ma_lpf2_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_lpf2_init_preallocated(const ma_lpf2_config* pConfig, void* pHeap, ma_lpf2* /;"	f
ma_lpf2_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_lpf2_process_pcm_frames(ma_lpf2* pLPF, void* pFramesOut, const void* pFrames/;"	f
ma_lpf2_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_lpf2_reinit(const ma_lpf2_config* pConfig, ma_lpf2* pLPF);$/;"	f
ma_lpf2_uninit	../ext/miniaudio.h	/^MA_API void ma_lpf2_uninit(ma_lpf2* pLPF, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f
ma_lpf_clear_cache	../ext/miniaudio.h	/^MA_API ma_result ma_lpf_clear_cache(ma_lpf* pLPF);$/;"	f
ma_lpf_config	../ext/miniaudio.h	/^} ma_lpf_config;$/;"	t
ma_lpf_config_init	../ext/miniaudio.h	/^MA_API ma_lpf_config ma_lpf_config_init(ma_format format, ma_uint32 channels, ma_uint32 sampleRa/;"	f
ma_lpf_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_lpf_get_heap_size(const ma_lpf_config* pConfig, size_t* pHeapSizeInBytes);$/;"	f
ma_lpf_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_lpf_get_latency(const ma_lpf* pLPF);$/;"	f
ma_lpf_init	../ext/miniaudio.h	/^MA_API ma_result ma_lpf_init(const ma_lpf_config* pConfig, const ma_allocation_callbacks* pAlloc/;"	f
ma_lpf_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_lpf_init_preallocated(const ma_lpf_config* pConfig, void* pHeap, ma_lpf* pLP/;"	f
ma_lpf_node	../ext/miniaudio.h	/^} ma_lpf_node;$/;"	t
ma_lpf_node_config	../ext/miniaudio.h	/^} ma_lpf_node_config;$/;"	t
ma_lpf_node_config_init	../ext/miniaudio.h	/^MA_API ma_lpf_node_config ma_lpf_node_config_init(ma_uint32 channels, ma_uint32 sampleRate, doub/;"	f
ma_lpf_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_lpf_node_init(ma_node_graph* pNodeGraph, const ma_lpf_node_config* pConfig, /;"	f
ma_lpf_node_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_lpf_node_reinit(const ma_lpf_config* pConfig, ma_lpf_node* pNode);$/;"	f
ma_lpf_node_uninit	../ext/miniaudio.h	/^MA_API void ma_lpf_node_uninit(ma_lpf_node* pNode, const ma_allocation_callbacks* pAllocationCal/;"	f
ma_lpf_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_lpf_process_pcm_frames(ma_lpf* pLPF, void* pFramesOut, const void* pFramesIn/;"	f
ma_lpf_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_lpf_reinit(const ma_lpf_config* pConfig, ma_lpf* pLPF);$/;"	f
ma_lpf_uninit	../ext/miniaudio.h	/^MA_API void ma_lpf_uninit(ma_lpf* pLPF, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f
ma_malloc	../ext/miniaudio.h	/^MA_API void* ma_malloc(size_t sz, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f	struct:ma_resampler_config
ma_max	../ext/miniaudio.h	/^#define ma_max(x, y)                (((x) > (y)) ? (x) : (y))$/;"	M
ma_min	../ext/miniaudio.h	/^#define ma_min(x, y)                (((x) < (y)) ? (x) : (y))$/;"	M
ma_mix_f32	../ext/miniaudio.h	/^static MA_INLINE float ma_mix_f32(float x, float y, float a)$/;"	f
ma_mix_f32_fast	../ext/miniaudio.h	/^static MA_INLINE float ma_mix_f32_fast(float x, float y, float a)$/;"	f
ma_mix_f32_fast__avx2	../ext/miniaudio.h	/^static MA_INLINE __m256 ma_mix_f32_fast__avx2(__m256 x, __m256 y, __m256 a)$/;"	f
ma_mix_f32_fast__neon	../ext/miniaudio.h	/^static MA_INLINE float32x4_t ma_mix_f32_fast__neon(float32x4_t x, float32x4_t y, float32x4_t a)$/;"	f
ma_mix_f32_fast__sse2	../ext/miniaudio.h	/^static MA_INLINE __m128 ma_mix_f32_fast__sse2(__m128 x, __m128 y, __m128 a)$/;"	f
ma_mix_f64	../ext/miniaudio.h	/^static MA_INLINE double ma_mix_f64(double x, double y, double a)$/;"	f
ma_mix_f64_fast	../ext/miniaudio.h	/^static MA_INLINE double ma_mix_f64_fast(double x, double y, double a)$/;"	f
ma_mono_expansion_mode	../ext/miniaudio.h	/^} ma_mono_expansion_mode;$/;"	t	struct:ma_resampler_config
ma_mono_expansion_mode_average	../ext/miniaudio.h	/^    ma_mono_expansion_mode_average,         \/* Average the mono channel across all channels. *\/$/;"	e	struct:ma_resampler_config
ma_mono_expansion_mode_default	../ext/miniaudio.h	/^    ma_mono_expansion_mode_default = ma_mono_expansion_mode_duplicate$/;"	e	struct:ma_resampler_config
ma_mono_expansion_mode_duplicate	../ext/miniaudio.h	/^    ma_mono_expansion_mode_duplicate = 0,   \/* The default. *\/$/;"	e	struct:ma_resampler_config
ma_mono_expansion_mode_stereo_only	../ext/miniaudio.h	/^    ma_mono_expansion_mode_stereo_only,     \/* Duplicate to the left and right channels only an/;"	e	struct:ma_resampler_config
ma_mutex	../ext/miniaudio.h	/^typedef ma_handle ma_mutex;$/;"	t
ma_mutex	../ext/miniaudio.h	/^typedef ma_pthread_mutex_t ma_mutex;$/;"	t
ma_mutex_init	../ext/miniaudio.h	/^MA_API ma_result ma_mutex_init(ma_mutex* pMutex)$/;"	f
ma_mutex_init	../ext/miniaudio.h	/^MA_API ma_result ma_mutex_init(ma_mutex* pMutex);$/;"	f	struct:ma_resampler_config
ma_mutex_init__posix	../ext/miniaudio.h	/^static ma_result ma_mutex_init__posix(ma_mutex* pMutex)$/;"	f
ma_mutex_init__win32	../ext/miniaudio.h	/^static ma_result ma_mutex_init__win32(ma_mutex* pMutex)$/;"	f
ma_mutex_lock	../ext/miniaudio.h	/^MA_API void ma_mutex_lock(ma_mutex* pMutex)$/;"	f
ma_mutex_lock	../ext/miniaudio.h	/^MA_API void ma_mutex_lock(ma_mutex* pMutex);$/;"	f	struct:ma_resampler_config
ma_mutex_lock__posix	../ext/miniaudio.h	/^static void ma_mutex_lock__posix(ma_mutex* pMutex)$/;"	f
ma_mutex_lock__win32	../ext/miniaudio.h	/^static void ma_mutex_lock__win32(ma_mutex* pMutex)$/;"	f
ma_mutex_uninit	../ext/miniaudio.h	/^MA_API void ma_mutex_uninit(ma_mutex* pMutex)$/;"	f
ma_mutex_uninit	../ext/miniaudio.h	/^MA_API void ma_mutex_uninit(ma_mutex* pMutex);$/;"	f	struct:ma_resampler_config
ma_mutex_uninit__posix	../ext/miniaudio.h	/^static void ma_mutex_uninit__posix(ma_mutex* pMutex)$/;"	f
ma_mutex_uninit__win32	../ext/miniaudio.h	/^static void ma_mutex_uninit__win32(ma_mutex* pMutex)$/;"	f
ma_mutex_unlock	../ext/miniaudio.h	/^MA_API void ma_mutex_unlock(ma_mutex* pMutex)$/;"	f
ma_mutex_unlock	../ext/miniaudio.h	/^MA_API void ma_mutex_unlock(ma_mutex* pMutex);$/;"	f	struct:ma_resampler_config
ma_mutex_unlock__posix	../ext/miniaudio.h	/^static void ma_mutex_unlock__posix(ma_mutex* pMutex)$/;"	f
ma_mutex_unlock__win32	../ext/miniaudio.h	/^static void ma_mutex_unlock__win32(ma_mutex* pMutex)$/;"	f
ma_next_power_of_2	../ext/miniaudio.h	/^static MA_INLINE unsigned int ma_next_power_of_2(unsigned int x)$/;"	f
ma_node	../ext/miniaudio.h	/^typedef void ma_node;$/;"	t
ma_node_attach_output_bus	../ext/miniaudio.h	/^MA_API ma_result ma_node_attach_output_bus(ma_node* pNode, ma_uint32 outputBusIndex, ma_node* pO/;"	f	struct:ma_node_base
ma_node_base	../ext/miniaudio.h	/^struct ma_node_base$/;"	s
ma_node_base	../ext/miniaudio.h	/^typedef struct ma_node_base ma_node_base;$/;"	t
ma_node_config	../ext/miniaudio.h	/^} ma_node_config;$/;"	t
ma_node_config_init	../ext/miniaudio.h	/^MA_API ma_node_config ma_node_config_init(void);$/;"	f
ma_node_detach_all_output_buses	../ext/miniaudio.h	/^MA_API ma_result ma_node_detach_all_output_buses(ma_node* pNode);$/;"	f	struct:ma_node_base
ma_node_detach_output_bus	../ext/miniaudio.h	/^MA_API ma_result ma_node_detach_output_bus(ma_node* pNode, ma_uint32 outputBusIndex);$/;"	f	struct:ma_node_base
ma_node_flags	../ext/miniaudio.h	/^} ma_node_flags;$/;"	t
ma_node_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_node_get_heap_size(ma_node_graph* pNodeGraph, const ma_node_config* pConfig,/;"	f	struct:ma_node_base
ma_node_get_input_bus_count	../ext/miniaudio.h	/^MA_API ma_uint32 ma_node_get_input_bus_count(const ma_node* pNode);$/;"	f	struct:ma_node_base
ma_node_get_input_channels	../ext/miniaudio.h	/^MA_API ma_uint32 ma_node_get_input_channels(const ma_node* pNode, ma_uint32 inputBusIndex);$/;"	f	struct:ma_node_base
ma_node_get_node_graph	../ext/miniaudio.h	/^MA_API ma_node_graph* ma_node_get_node_graph(const ma_node* pNode);$/;"	f	struct:ma_node_base
ma_node_get_output_bus_count	../ext/miniaudio.h	/^MA_API ma_uint32 ma_node_get_output_bus_count(const ma_node* pNode);$/;"	f	struct:ma_node_base
ma_node_get_output_bus_volume	../ext/miniaudio.h	/^MA_API float ma_node_get_output_bus_volume(const ma_node* pNode, ma_uint32 outputBusIndex);$/;"	f	struct:ma_node_base
ma_node_get_output_channels	../ext/miniaudio.h	/^MA_API ma_uint32 ma_node_get_output_channels(const ma_node* pNode, ma_uint32 outputBusIndex);$/;"	f	struct:ma_node_base
ma_node_get_state	../ext/miniaudio.h	/^MA_API ma_node_state ma_node_get_state(const ma_node* pNode);$/;"	f	struct:ma_node_base
ma_node_get_state_by_time	../ext/miniaudio.h	/^MA_API ma_node_state ma_node_get_state_by_time(const ma_node* pNode, ma_uint64 globalTime);$/;"	f	struct:ma_node_base
ma_node_get_state_by_time_range	../ext/miniaudio.h	/^MA_API ma_node_state ma_node_get_state_by_time_range(const ma_node* pNode, ma_uint64 globalTimeB/;"	f	struct:ma_node_base
ma_node_get_state_time	../ext/miniaudio.h	/^MA_API ma_uint64 ma_node_get_state_time(const ma_node* pNode, ma_node_state state);$/;"	f	struct:ma_node_base
ma_node_get_time	../ext/miniaudio.h	/^MA_API ma_uint64 ma_node_get_time(const ma_node* pNode);$/;"	f	struct:ma_node_base
ma_node_graph	../ext/miniaudio.h	/^typedef struct ma_node_graph ma_node_graph;$/;"	t
ma_node_graph_config	../ext/miniaudio.h	/^} ma_node_graph_config;$/;"	t	struct:ma_node_base
ma_node_graph_config_init	../ext/miniaudio.h	/^MA_API ma_node_graph_config ma_node_graph_config_init(ma_uint32 channels);$/;"	f	struct:ma_node_base
ma_node_graph_get_channels	../ext/miniaudio.h	/^MA_API ma_uint32 ma_node_graph_get_channels(const ma_node_graph* pNodeGraph);$/;"	f
ma_node_graph_get_endpoint	../ext/miniaudio.h	/^MA_API ma_node* ma_node_graph_get_endpoint(ma_node_graph* pNodeGraph);$/;"	f
ma_node_graph_get_time	../ext/miniaudio.h	/^MA_API ma_uint64 ma_node_graph_get_time(const ma_node_graph* pNodeGraph);$/;"	f
ma_node_graph_init	../ext/miniaudio.h	/^MA_API ma_result ma_node_graph_init(const ma_node_graph_config* pConfig, const ma_allocation_cal/;"	f
ma_node_graph_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_node_graph_read_pcm_frames(ma_node_graph* pNodeGraph, void* pFramesOut, ma_u/;"	f
ma_node_graph_set_time	../ext/miniaudio.h	/^MA_API ma_result ma_node_graph_set_time(ma_node_graph* pNodeGraph, ma_uint64 globalTime);$/;"	f
ma_node_graph_uninit	../ext/miniaudio.h	/^MA_API void ma_node_graph_uninit(ma_node_graph* pNodeGraph, const ma_allocation_callbacks* pAllo/;"	f
ma_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_node_init(ma_node_graph* pNodeGraph, const ma_node_config* pConfig, const ma/;"	f	struct:ma_node_base
ma_node_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_node_init_preallocated(ma_node_graph* pNodeGraph, const ma_node_config* pCon/;"	f	struct:ma_node_base
ma_node_input_bus	../ext/miniaudio.h	/^struct ma_node_input_bus$/;"	s
ma_node_input_bus	../ext/miniaudio.h	/^typedef struct ma_node_input_bus ma_node_input_bus;$/;"	t
ma_node_output_bus	../ext/miniaudio.h	/^struct ma_node_output_bus$/;"	s
ma_node_output_bus	../ext/miniaudio.h	/^typedef struct ma_node_output_bus ma_node_output_bus;$/;"	s
ma_node_output_bus	../ext/miniaudio.h	/^typedef struct ma_node_output_bus ma_node_output_bus;$/;"	t
ma_node_set_output_bus_volume	../ext/miniaudio.h	/^MA_API ma_result ma_node_set_output_bus_volume(ma_node* pNode, ma_uint32 outputBusIndex, float v/;"	f	struct:ma_node_base
ma_node_set_state	../ext/miniaudio.h	/^MA_API ma_result ma_node_set_state(ma_node* pNode, ma_node_state state);$/;"	f	struct:ma_node_base
ma_node_set_state_time	../ext/miniaudio.h	/^MA_API ma_result ma_node_set_state_time(ma_node* pNode, ma_node_state state, ma_uint64 globalTim/;"	f	struct:ma_node_base
ma_node_set_time	../ext/miniaudio.h	/^MA_API ma_result ma_node_set_time(ma_node* pNode, ma_uint64 localTime);$/;"	f	struct:ma_node_base
ma_node_state	../ext/miniaudio.h	/^} ma_node_state;$/;"	t
ma_node_state_started	../ext/miniaudio.h	/^    ma_node_state_started = 0,$/;"	e
ma_node_state_stopped	../ext/miniaudio.h	/^    ma_node_state_stopped = 1$/;"	e
ma_node_uninit	../ext/miniaudio.h	/^MA_API void ma_node_uninit(ma_node* pNode, const ma_allocation_callbacks* pAllocationCallbacks);$/;"	f	struct:ma_node_base
ma_node_vtable	../ext/miniaudio.h	/^} ma_node_vtable;$/;"	t
ma_noise	../ext/miniaudio.h	/^} ma_noise;$/;"	t	struct:ma_encoder
ma_noise_config	../ext/miniaudio.h	/^} ma_noise_config;$/;"	t	struct:ma_encoder
ma_noise_config_init	../ext/miniaudio.h	/^MA_API ma_noise_config ma_noise_config_init(ma_format format, ma_uint32 channels, ma_noise_type /;"	f	struct:ma_encoder
ma_noise_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_noise_get_heap_size(const ma_noise_config* pConfig, size_t* pHeapSizeInBytes/;"	f	struct:ma_encoder
ma_noise_init	../ext/miniaudio.h	/^MA_API ma_result ma_noise_init(const ma_noise_config* pConfig, const ma_allocation_callbacks* pA/;"	f	struct:ma_encoder
ma_noise_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_noise_init_preallocated(const ma_noise_config* pConfig, void* pHeap, ma_nois/;"	f	struct:ma_encoder
ma_noise_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_noise_read_pcm_frames(ma_noise* pNoise, void* pFramesOut, ma_uint64 frameCou/;"	f	struct:ma_encoder
ma_noise_set_amplitude	../ext/miniaudio.h	/^MA_API ma_result ma_noise_set_amplitude(ma_noise* pNoise, double amplitude);$/;"	f	struct:ma_encoder
ma_noise_set_seed	../ext/miniaudio.h	/^MA_API ma_result ma_noise_set_seed(ma_noise* pNoise, ma_int32 seed);$/;"	f	struct:ma_encoder
ma_noise_set_type	../ext/miniaudio.h	/^MA_API ma_result ma_noise_set_type(ma_noise* pNoise, ma_noise_type type);$/;"	f	struct:ma_encoder
ma_noise_type	../ext/miniaudio.h	/^} ma_noise_type;$/;"	t	struct:ma_encoder
ma_noise_type_brownian	../ext/miniaudio.h	/^    ma_noise_type_brownian$/;"	e	struct:ma_encoder
ma_noise_type_pink	../ext/miniaudio.h	/^    ma_noise_type_pink,$/;"	e	struct:ma_encoder
ma_noise_type_white	../ext/miniaudio.h	/^    ma_noise_type_white,$/;"	e	struct:ma_encoder
ma_noise_uninit	../ext/miniaudio.h	/^MA_API void ma_noise_uninit(ma_noise* pNoise, const ma_allocation_callbacks* pAllocationCallback/;"	f	struct:ma_encoder
ma_notch2	../ext/miniaudio.h	/^} ma_notch2;$/;"	t
ma_notch2_config_init	../ext/miniaudio.h	/^MA_API ma_notch2_config ma_notch2_config_init(ma_format format, ma_uint32 channels, ma_uint32 sa/;"	f
ma_notch2_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_notch2_get_heap_size(const ma_notch2_config* pConfig, size_t* pHeapSizeInByt/;"	f
ma_notch2_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_notch2_get_latency(const ma_notch2* pFilter);$/;"	f
ma_notch2_init	../ext/miniaudio.h	/^MA_API ma_result ma_notch2_init(const ma_notch2_config* pConfig, const ma_allocation_callbacks* /;"	f
ma_notch2_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_notch2_init_preallocated(const ma_notch2_config* pConfig, void* pHeap, ma_no/;"	f
ma_notch2_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_notch2_process_pcm_frames(ma_notch2* pFilter, void* pFramesOut, const void* /;"	f
ma_notch2_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_notch2_reinit(const ma_notch2_config* pConfig, ma_notch2* pFilter);$/;"	f
ma_notch2_uninit	../ext/miniaudio.h	/^MA_API void ma_notch2_uninit(ma_notch2* pFilter, const ma_allocation_callbacks* pAllocationCallb/;"	f
ma_notch_config	../ext/miniaudio.h	/^} ma_notch2_config, ma_notch_config;$/;"	t
ma_notch_node	../ext/miniaudio.h	/^} ma_notch_node;$/;"	t
ma_notch_node_config	../ext/miniaudio.h	/^} ma_notch_node_config;$/;"	t
ma_notch_node_config_init	../ext/miniaudio.h	/^MA_API ma_notch_node_config ma_notch_node_config_init(ma_uint32 channels, ma_uint32 sampleRate, /;"	f
ma_notch_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_notch_node_init(ma_node_graph* pNodeGraph, const ma_notch_node_config* pConf/;"	f
ma_notch_node_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_notch_node_reinit(const ma_notch_config* pConfig, ma_notch_node* pNode);$/;"	f
ma_notch_node_uninit	../ext/miniaudio.h	/^MA_API void ma_notch_node_uninit(ma_notch_node* pNode, const ma_allocation_callbacks* pAllocatio/;"	f
ma_offset_pcm_frames_const_ptr	../ext/miniaudio.h	/^MA_API const void* ma_offset_pcm_frames_const_ptr(const void* p, ma_uint64 offsetInFrames, ma_fo/;"	f	struct:ma_device
ma_offset_pcm_frames_const_ptr_f32	../ext/miniaudio.h	/^static MA_INLINE const float* ma_offset_pcm_frames_const_ptr_f32(const float* p, ma_uint64 offse/;"	f	struct:ma_device
ma_offset_pcm_frames_ptr	../ext/miniaudio.h	/^MA_API void* ma_offset_pcm_frames_ptr(void* p, ma_uint64 offsetInFrames, ma_format format, ma_ui/;"	f	struct:ma_device
ma_offset_pcm_frames_ptr_f32	../ext/miniaudio.h	/^static MA_INLINE float* ma_offset_pcm_frames_ptr_f32(float* p, ma_uint64 offsetInFrames, ma_uint/;"	f	struct:ma_device
ma_offset_ptr	../ext/miniaudio.h	/^#define ma_offset_ptr(p, offset)    (((ma_uint8*)(p)) + (offset))$/;"	M
ma_open_mode_flags	../ext/miniaudio.h	/^} ma_open_mode_flags;$/;"	t	struct:ma_paged_audio_buffer_page
ma_opensl_recording_preset	../ext/miniaudio.h	/^} ma_opensl_recording_preset;$/;"	t
ma_opensl_recording_preset_camcorder	../ext/miniaudio.h	/^    ma_opensl_recording_preset_camcorder,           \/* SL_ANDROID_RECORDING_PRESET_CAMCORDER *\/$/;"	e
ma_opensl_recording_preset_default	../ext/miniaudio.h	/^    ma_opensl_recording_preset_default = 0,         \/* Leaves the input preset unset. *\/$/;"	e
ma_opensl_recording_preset_generic	../ext/miniaudio.h	/^    ma_opensl_recording_preset_generic,             \/* SL_ANDROID_RECORDING_PRESET_GENERIC *\/$/;"	e
ma_opensl_recording_preset_voice_communication	../ext/miniaudio.h	/^    ma_opensl_recording_preset_voice_communication, \/* SL_ANDROID_RECORDING_PRESET_VOICE_COMMUN/;"	e
ma_opensl_recording_preset_voice_recognition	../ext/miniaudio.h	/^    ma_opensl_recording_preset_voice_recognition,   \/* SL_ANDROID_RECORDING_PRESET_VOICE_RECOGN/;"	e
ma_opensl_recording_preset_voice_unprocessed	../ext/miniaudio.h	/^    ma_opensl_recording_preset_voice_unprocessed    \/* SL_ANDROID_RECORDING_PRESET_UNPROCESSED /;"	e
ma_opensl_stream_type	../ext/miniaudio.h	/^} ma_opensl_stream_type;$/;"	t
ma_opensl_stream_type_alarm	../ext/miniaudio.h	/^    ma_opensl_stream_type_alarm,                    \/* SL_ANDROID_STREAM_ALARM *\/$/;"	e
ma_opensl_stream_type_default	../ext/miniaudio.h	/^    ma_opensl_stream_type_default = 0,              \/* Leaves the stream type unset. *\/$/;"	e
ma_opensl_stream_type_media	../ext/miniaudio.h	/^    ma_opensl_stream_type_media,                    \/* SL_ANDROID_STREAM_MEDIA *\/$/;"	e
ma_opensl_stream_type_notification	../ext/miniaudio.h	/^    ma_opensl_stream_type_notification              \/* SL_ANDROID_STREAM_NOTIFICATION *\/$/;"	e
ma_opensl_stream_type_ring	../ext/miniaudio.h	/^    ma_opensl_stream_type_ring,                     \/* SL_ANDROID_STREAM_RING *\/$/;"	e
ma_opensl_stream_type_system	../ext/miniaudio.h	/^    ma_opensl_stream_type_system,                   \/* SL_ANDROID_STREAM_SYSTEM *\/$/;"	e
ma_opensl_stream_type_voice	../ext/miniaudio.h	/^    ma_opensl_stream_type_voice,                    \/* SL_ANDROID_STREAM_VOICE *\/$/;"	e
ma_paged_audio_buffer	../ext/miniaudio.h	/^} ma_paged_audio_buffer;$/;"	t	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_config	../ext/miniaudio.h	/^} ma_paged_audio_buffer_config;$/;"	t	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_config_init	../ext/miniaudio.h	/^MA_API ma_paged_audio_buffer_config ma_paged_audio_buffer_config_init(ma_paged_audio_buffer_data/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data	../ext/miniaudio.h	/^} ma_paged_audio_buffer_data;$/;"	t	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data_allocate_and_append_page	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_data_allocate_and_append_page(ma_paged_audio_buffer_data*/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data_allocate_page	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_data_allocate_page(ma_paged_audio_buffer_data* pData, ma_/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data_append_page	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_data_append_page(ma_paged_audio_buffer_data* pData, ma_pa/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data_free_page	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_data_free_page(ma_paged_audio_buffer_data* pData, ma_page/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data_get_head	../ext/miniaudio.h	/^MA_API ma_paged_audio_buffer_page* ma_paged_audio_buffer_data_get_head(ma_paged_audio_buffer_dat/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_data_get_length_in_pcm_frames(ma_paged_audio_buffer_data*/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data_get_tail	../ext/miniaudio.h	/^MA_API ma_paged_audio_buffer_page* ma_paged_audio_buffer_data_get_tail(ma_paged_audio_buffer_dat/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data_init	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_data_init(ma_format format, ma_uint32 channels, ma_paged_/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_data_uninit	../ext/miniaudio.h	/^MA_API void ma_paged_audio_buffer_data_uninit(ma_paged_audio_buffer_data* pData, const ma_alloca/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_get_cursor_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_get_cursor_in_pcm_frames(ma_paged_audio_buffer* pPagedAud/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_get_length_in_pcm_frames(ma_paged_audio_buffer* pPagedAud/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_init	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_init(const ma_paged_audio_buffer_config* pConfig, ma_page/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_page	../ext/miniaudio.h	/^struct ma_paged_audio_buffer_page$/;"	s
ma_paged_audio_buffer_page	../ext/miniaudio.h	/^typedef struct ma_paged_audio_buffer_page ma_paged_audio_buffer_page;$/;"	t
ma_paged_audio_buffer_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_read_pcm_frames(ma_paged_audio_buffer* pPagedAudioBuffer,/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_paged_audio_buffer_seek_to_pcm_frame(ma_paged_audio_buffer* pPagedAudioBuffe/;"	f	struct:ma_paged_audio_buffer_page
ma_paged_audio_buffer_uninit	../ext/miniaudio.h	/^MA_API void ma_paged_audio_buffer_uninit(ma_paged_audio_buffer* pPagedAudioBuffer);$/;"	f	struct:ma_paged_audio_buffer_page
ma_pan_mode	../ext/miniaudio.h	/^} ma_pan_mode;$/;"	t
ma_pan_mode_balance	../ext/miniaudio.h	/^    ma_pan_mode_balance = 0,    \/* Does not blend one side with the other. Technically just a b/;"	e
ma_pan_mode_pan	../ext/miniaudio.h	/^    ma_pan_mode_pan             \/* A true pan. The sound from one side will "move" to the other/;"	e
ma_panner	../ext/miniaudio.h	/^} ma_panner;$/;"	t
ma_panner_config	../ext/miniaudio.h	/^} ma_panner_config;$/;"	t
ma_panner_config_init	../ext/miniaudio.h	/^MA_API ma_panner_config ma_panner_config_init(ma_format format, ma_uint32 channels);$/;"	f
ma_panner_get_mode	../ext/miniaudio.h	/^MA_API ma_pan_mode ma_panner_get_mode(const ma_panner* pPanner);$/;"	f
ma_panner_get_pan	../ext/miniaudio.h	/^MA_API float ma_panner_get_pan(const ma_panner* pPanner);$/;"	f
ma_panner_init	../ext/miniaudio.h	/^MA_API ma_result ma_panner_init(const ma_panner_config* pConfig, ma_panner* pPanner);$/;"	f
ma_panner_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_panner_process_pcm_frames(ma_panner* pPanner, void* pFramesOut, const void* /;"	f
ma_panner_set_mode	../ext/miniaudio.h	/^MA_API void ma_panner_set_mode(ma_panner* pPanner, ma_pan_mode mode);$/;"	f
ma_panner_set_pan	../ext/miniaudio.h	/^MA_API void ma_panner_set_pan(ma_panner* pPanner, float pan);$/;"	f
ma_pcm_convert	../ext/miniaudio.h	/^MA_API void ma_pcm_convert(void* pOut, ma_format formatOut, const void* pIn, ma_format formatIn,/;"	f	struct:ma_resampler_config
ma_pcm_f32_to_s16	../ext/miniaudio.h	/^MA_API void ma_pcm_f32_to_s16(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_f32_to_s24	../ext/miniaudio.h	/^MA_API void ma_pcm_f32_to_s24(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_f32_to_s32	../ext/miniaudio.h	/^MA_API void ma_pcm_f32_to_s32(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_f32_to_u8	../ext/miniaudio.h	/^MA_API void ma_pcm_f32_to_u8(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dither/;"	f	struct:ma_resampler_config
ma_pcm_rb	../ext/miniaudio.h	/^} ma_pcm_rb;$/;"	t	struct:ma_resampler_config
ma_pcm_rb_acquire_read	../ext/miniaudio.h	/^MA_API ma_result ma_pcm_rb_acquire_read(ma_pcm_rb* pRB, ma_uint32* pSizeInFrames, void** ppBuffe/;"	f	struct:ma_resampler_config
ma_pcm_rb_acquire_write	../ext/miniaudio.h	/^MA_API ma_result ma_pcm_rb_acquire_write(ma_pcm_rb* pRB, ma_uint32* pSizeInFrames, void** ppBuff/;"	f	struct:ma_resampler_config
ma_pcm_rb_available_read	../ext/miniaudio.h	/^MA_API ma_uint32 ma_pcm_rb_available_read(ma_pcm_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_available_write	../ext/miniaudio.h	/^MA_API ma_uint32 ma_pcm_rb_available_write(ma_pcm_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_commit_read	../ext/miniaudio.h	/^MA_API ma_result ma_pcm_rb_commit_read(ma_pcm_rb* pRB, ma_uint32 sizeInFrames);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_commit_write	../ext/miniaudio.h	/^MA_API ma_result ma_pcm_rb_commit_write(ma_pcm_rb* pRB, ma_uint32 sizeInFrames);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_get_subbuffer_offset	../ext/miniaudio.h	/^MA_API ma_uint32 ma_pcm_rb_get_subbuffer_offset(ma_pcm_rb* pRB, ma_uint32 subbufferIndex);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_get_subbuffer_ptr	../ext/miniaudio.h	/^MA_API void* ma_pcm_rb_get_subbuffer_ptr(ma_pcm_rb* pRB, ma_uint32 subbufferIndex, void* pBuffer/;"	f	struct:ma_resampler_config
ma_pcm_rb_get_subbuffer_size	../ext/miniaudio.h	/^MA_API ma_uint32 ma_pcm_rb_get_subbuffer_size(ma_pcm_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_get_subbuffer_stride	../ext/miniaudio.h	/^MA_API ma_uint32 ma_pcm_rb_get_subbuffer_stride(ma_pcm_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_init	../ext/miniaudio.h	/^MA_API ma_result ma_pcm_rb_init(ma_format format, ma_uint32 channels, ma_uint32 bufferSizeInFram/;"	f	struct:ma_resampler_config
ma_pcm_rb_init_ex	../ext/miniaudio.h	/^MA_API ma_result ma_pcm_rb_init_ex(ma_format format, ma_uint32 channels, ma_uint32 subbufferSize/;"	f	struct:ma_resampler_config
ma_pcm_rb_pointer_distance	../ext/miniaudio.h	/^MA_API ma_int32 ma_pcm_rb_pointer_distance(ma_pcm_rb* pRB); \/* Return value is in frames. *\/$/;"	f	struct:ma_resampler_config
ma_pcm_rb_reset	../ext/miniaudio.h	/^MA_API void ma_pcm_rb_reset(ma_pcm_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_seek_read	../ext/miniaudio.h	/^MA_API ma_result ma_pcm_rb_seek_read(ma_pcm_rb* pRB, ma_uint32 offsetInFrames);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_seek_write	../ext/miniaudio.h	/^MA_API ma_result ma_pcm_rb_seek_write(ma_pcm_rb* pRB, ma_uint32 offsetInFrames);$/;"	f	struct:ma_resampler_config
ma_pcm_rb_uninit	../ext/miniaudio.h	/^MA_API void ma_pcm_rb_uninit(ma_pcm_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_pcm_s16_to_f32	../ext/miniaudio.h	/^MA_API void ma_pcm_s16_to_f32(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_s16_to_s24	../ext/miniaudio.h	/^MA_API void ma_pcm_s16_to_s24(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_s16_to_s32	../ext/miniaudio.h	/^MA_API void ma_pcm_s16_to_s32(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_s16_to_u8	../ext/miniaudio.h	/^MA_API void ma_pcm_s16_to_u8(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dither/;"	f	struct:ma_resampler_config
ma_pcm_s24_to_f32	../ext/miniaudio.h	/^MA_API void ma_pcm_s24_to_f32(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_s24_to_s16	../ext/miniaudio.h	/^MA_API void ma_pcm_s24_to_s16(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_s24_to_s32	../ext/miniaudio.h	/^MA_API void ma_pcm_s24_to_s32(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_s24_to_u8	../ext/miniaudio.h	/^MA_API void ma_pcm_s24_to_u8(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dither/;"	f	struct:ma_resampler_config
ma_pcm_s32_to_f32	../ext/miniaudio.h	/^MA_API void ma_pcm_s32_to_f32(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_s32_to_s16	../ext/miniaudio.h	/^MA_API void ma_pcm_s32_to_s16(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_s32_to_s24	../ext/miniaudio.h	/^MA_API void ma_pcm_s32_to_s24(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dithe/;"	f	struct:ma_resampler_config
ma_pcm_s32_to_u8	../ext/miniaudio.h	/^MA_API void ma_pcm_s32_to_u8(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dither/;"	f	struct:ma_resampler_config
ma_pcm_u8_to_f32	../ext/miniaudio.h	/^MA_API void ma_pcm_u8_to_f32(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dither/;"	f	struct:ma_resampler_config
ma_pcm_u8_to_s16	../ext/miniaudio.h	/^MA_API void ma_pcm_u8_to_s16(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dither/;"	f	struct:ma_resampler_config
ma_pcm_u8_to_s24	../ext/miniaudio.h	/^MA_API void ma_pcm_u8_to_s24(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dither/;"	f	struct:ma_resampler_config
ma_pcm_u8_to_s32	../ext/miniaudio.h	/^MA_API void ma_pcm_u8_to_s32(void* pOut, const void* pIn, ma_uint64 count, ma_dither_mode dither/;"	f	struct:ma_resampler_config
ma_peak2	../ext/miniaudio.h	/^} ma_peak2;$/;"	t
ma_peak2_config_init	../ext/miniaudio.h	/^MA_API ma_peak2_config ma_peak2_config_init(ma_format format, ma_uint32 channels, ma_uint32 samp/;"	f
ma_peak2_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_peak2_get_heap_size(const ma_peak2_config* pConfig, size_t* pHeapSizeInBytes/;"	f
ma_peak2_get_latency	../ext/miniaudio.h	/^MA_API ma_uint32 ma_peak2_get_latency(const ma_peak2* pFilter);$/;"	f
ma_peak2_init	../ext/miniaudio.h	/^MA_API ma_result ma_peak2_init(const ma_peak2_config* pConfig, const ma_allocation_callbacks* pA/;"	f
ma_peak2_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_peak2_init_preallocated(const ma_peak2_config* pConfig, void* pHeap, ma_peak/;"	f
ma_peak2_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_peak2_process_pcm_frames(ma_peak2* pFilter, void* pFramesOut, const void* pF/;"	f
ma_peak2_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_peak2_reinit(const ma_peak2_config* pConfig, ma_peak2* pFilter);$/;"	f
ma_peak2_uninit	../ext/miniaudio.h	/^MA_API void ma_peak2_uninit(ma_peak2* pFilter, const ma_allocation_callbacks* pAllocationCallbac/;"	f
ma_peak_config	../ext/miniaudio.h	/^} ma_peak2_config, ma_peak_config;$/;"	t
ma_peak_node	../ext/miniaudio.h	/^} ma_peak_node;$/;"	t
ma_peak_node_config	../ext/miniaudio.h	/^} ma_peak_node_config;$/;"	t
ma_peak_node_config_init	../ext/miniaudio.h	/^MA_API ma_peak_node_config ma_peak_node_config_init(ma_uint32 channels, ma_uint32 sampleRate, do/;"	f
ma_peak_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_peak_node_init(ma_node_graph* pNodeGraph, const ma_peak_node_config* pConfig/;"	f
ma_peak_node_reinit	../ext/miniaudio.h	/^MA_API ma_result ma_peak_node_reinit(const ma_peak_config* pConfig, ma_peak_node* pNode);$/;"	f
ma_peak_node_uninit	../ext/miniaudio.h	/^MA_API void ma_peak_node_uninit(ma_peak_node* pNode, const ma_allocation_callbacks* pAllocationC/;"	f
ma_performance_profile	../ext/miniaudio.h	/^} ma_performance_profile;$/;"	t
ma_performance_profile_conservative	../ext/miniaudio.h	/^    ma_performance_profile_conservative$/;"	e
ma_performance_profile_low_latency	../ext/miniaudio.h	/^    ma_performance_profile_low_latency = 0,$/;"	e
ma_positioning	../ext/miniaudio.h	/^} ma_positioning;$/;"	t
ma_positioning_absolute	../ext/miniaudio.h	/^    ma_positioning_absolute,$/;"	e
ma_positioning_relative	../ext/miniaudio.h	/^    ma_positioning_relative$/;"	e
ma_powd	../ext/miniaudio.h	/^static MA_INLINE double ma_powd(double x, double y)$/;"	f
ma_powf	../ext/miniaudio.h	/^static MA_INLINE float ma_powf(float x, float y)$/;"	f
ma_prev_power_of_2	../ext/miniaudio.h	/^static MA_INLINE unsigned int ma_prev_power_of_2(unsigned int x)$/;"	f
ma_pthread_cond_t	../ext/miniaudio.h	/^        typedef pthread_cond_t  ma_pthread_cond_t;$/;"	t
ma_pthread_mutex_t	../ext/miniaudio.h	/^        typedef pthread_mutex_t ma_pthread_mutex_t;$/;"	t
ma_pthread_t	../ext/miniaudio.h	/^        typedef ma_uintptr      ma_pthread_t;$/;"	t
ma_pthread_t	../ext/miniaudio.h	/^        typedef pthread_t       ma_pthread_t;$/;"	t
ma_ptr	../ext/miniaudio.h	/^typedef void* ma_ptr;$/;"	t
ma_radians_to_degrees	../ext/miniaudio.h	/^static MA_INLINE double ma_radians_to_degrees(double radians)$/;"	f
ma_radians_to_degrees_f	../ext/miniaudio.h	/^static MA_INLINE float ma_radians_to_degrees_f(float radians)$/;"	f
ma_rand_f32	../ext/miniaudio.h	/^static MA_INLINE float ma_rand_f32(void)$/;"	f
ma_rand_f64	../ext/miniaudio.h	/^static MA_INLINE double ma_rand_f64(void)$/;"	f
ma_rand_range_f32	../ext/miniaudio.h	/^static MA_INLINE float ma_rand_range_f32(float lo, float hi)$/;"	f
ma_rand_range_s32	../ext/miniaudio.h	/^static MA_INLINE ma_int32 ma_rand_range_s32(ma_int32 lo, ma_int32 hi)$/;"	f
ma_rand_s32	../ext/miniaudio.h	/^static MA_INLINE ma_int32 ma_rand_s32(void)$/;"	f
ma_rand_u32	../ext/miniaudio.h	/^static MA_INLINE ma_uint32 ma_rand_u32(void)$/;"	f
ma_rb	../ext/miniaudio.h	/^} ma_rb;$/;"	t	struct:ma_resampler_config
ma_rb_acquire_read	../ext/miniaudio.h	/^MA_API ma_result ma_rb_acquire_read(ma_rb* pRB, size_t* pSizeInBytes, void** ppBufferOut);$/;"	f	struct:ma_resampler_config
ma_rb_acquire_write	../ext/miniaudio.h	/^MA_API ma_result ma_rb_acquire_write(ma_rb* pRB, size_t* pSizeInBytes, void** ppBufferOut);$/;"	f	struct:ma_resampler_config
ma_rb_available_read	../ext/miniaudio.h	/^MA_API ma_uint32 ma_rb_available_read(ma_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_rb_available_write	../ext/miniaudio.h	/^MA_API ma_uint32 ma_rb_available_write(ma_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_rb_commit_read	../ext/miniaudio.h	/^MA_API ma_result ma_rb_commit_read(ma_rb* pRB, size_t sizeInBytes);$/;"	f	struct:ma_resampler_config
ma_rb_commit_write	../ext/miniaudio.h	/^MA_API ma_result ma_rb_commit_write(ma_rb* pRB, size_t sizeInBytes);$/;"	f	struct:ma_resampler_config
ma_rb_get_subbuffer_offset	../ext/miniaudio.h	/^MA_API size_t ma_rb_get_subbuffer_offset(ma_rb* pRB, size_t subbufferIndex);$/;"	f	struct:ma_resampler_config
ma_rb_get_subbuffer_ptr	../ext/miniaudio.h	/^MA_API void* ma_rb_get_subbuffer_ptr(ma_rb* pRB, size_t subbufferIndex, void* pBuffer);$/;"	f	struct:ma_resampler_config
ma_rb_get_subbuffer_size	../ext/miniaudio.h	/^MA_API size_t ma_rb_get_subbuffer_size(ma_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_rb_get_subbuffer_stride	../ext/miniaudio.h	/^MA_API size_t ma_rb_get_subbuffer_stride(ma_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_rb_init	../ext/miniaudio.h	/^MA_API ma_result ma_rb_init(size_t bufferSizeInBytes, void* pOptionalPreallocatedBuffer, const m/;"	f	struct:ma_resampler_config
ma_rb_init_ex	../ext/miniaudio.h	/^MA_API ma_result ma_rb_init_ex(size_t subbufferSizeInBytes, size_t subbufferCount, size_t subbuf/;"	f	struct:ma_resampler_config
ma_rb_pointer_distance	../ext/miniaudio.h	/^MA_API ma_int32 ma_rb_pointer_distance(ma_rb* pRB);    \/* Returns the distance between the writ/;"	f	struct:ma_resampler_config
ma_rb_reset	../ext/miniaudio.h	/^MA_API void ma_rb_reset(ma_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_rb_seek_read	../ext/miniaudio.h	/^MA_API ma_result ma_rb_seek_read(ma_rb* pRB, size_t offsetInBytes);$/;"	f	struct:ma_resampler_config
ma_rb_seek_write	../ext/miniaudio.h	/^MA_API ma_result ma_rb_seek_write(ma_rb* pRB, size_t offsetInBytes);$/;"	f	struct:ma_resampler_config
ma_rb_uninit	../ext/miniaudio.h	/^MA_API void ma_rb_uninit(ma_rb* pRB);$/;"	f	struct:ma_resampler_config
ma_realloc	../ext/miniaudio.h	/^MA_API void* ma_realloc(void* p, size_t sz, const ma_allocation_callbacks* pAllocationCallbacks)/;"	f	struct:ma_resampler_config
ma_resample_algorithm	../ext/miniaudio.h	/^} ma_resample_algorithm;$/;"	t
ma_resample_algorithm_custom	../ext/miniaudio.h	/^    ma_resample_algorithm_custom,$/;"	e
ma_resample_algorithm_linear	../ext/miniaudio.h	/^    ma_resample_algorithm_linear = 0,    \/* Fastest, lowest quality. Optional low-pass filterin/;"	e
ma_resampler	../ext/miniaudio.h	/^} ma_resampler;$/;"	t	struct:ma_resampler_config
ma_resampler_config	../ext/miniaudio.h	/^struct ma_resampler_config$/;"	s
ma_resampler_config	../ext/miniaudio.h	/^typedef struct ma_resampler_config ma_resampler_config;$/;"	s
ma_resampler_config	../ext/miniaudio.h	/^typedef struct ma_resampler_config ma_resampler_config;$/;"	t
ma_resampler_config_init	../ext/miniaudio.h	/^MA_API ma_resampler_config ma_resampler_config_init(ma_format format, ma_uint32 channels, ma_uin/;"	f	struct:ma_resampler_config
ma_resampler_get_expected_output_frame_count	../ext/miniaudio.h	/^MA_API ma_result ma_resampler_get_expected_output_frame_count(const ma_resampler* pResampler, ma/;"	f	struct:ma_resampler_config
ma_resampler_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_resampler_get_heap_size(const ma_resampler_config* pConfig, size_t* pHeapSiz/;"	f	struct:ma_resampler_config
ma_resampler_get_input_latency	../ext/miniaudio.h	/^MA_API ma_uint64 ma_resampler_get_input_latency(const ma_resampler* pResampler);$/;"	f	struct:ma_resampler_config
ma_resampler_get_output_latency	../ext/miniaudio.h	/^MA_API ma_uint64 ma_resampler_get_output_latency(const ma_resampler* pResampler);$/;"	f	struct:ma_resampler_config
ma_resampler_get_required_input_frame_count	../ext/miniaudio.h	/^MA_API ma_result ma_resampler_get_required_input_frame_count(const ma_resampler* pResampler, ma_/;"	f	struct:ma_resampler_config
ma_resampler_init	../ext/miniaudio.h	/^MA_API ma_result ma_resampler_init(const ma_resampler_config* pConfig, const ma_allocation_callb/;"	f	struct:ma_resampler_config
ma_resampler_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_resampler_init_preallocated(const ma_resampler_config* pConfig, void* pHeap,/;"	f	struct:ma_resampler_config
ma_resampler_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resampler_process_pcm_frames(ma_resampler* pResampler, const void* pFramesIn/;"	f	struct:ma_resampler_config
ma_resampler_reset	../ext/miniaudio.h	/^MA_API ma_result ma_resampler_reset(ma_resampler* pResampler);$/;"	f	struct:ma_resampler_config
ma_resampler_set_rate	../ext/miniaudio.h	/^MA_API ma_result ma_resampler_set_rate(ma_resampler* pResampler, ma_uint32 sampleRateIn, ma_uint/;"	f	struct:ma_resampler_config
ma_resampler_set_rate_ratio	../ext/miniaudio.h	/^MA_API ma_result ma_resampler_set_rate_ratio(ma_resampler* pResampler, float ratio);$/;"	f	struct:ma_resampler_config
ma_resampler_uninit	../ext/miniaudio.h	/^MA_API void ma_resampler_uninit(ma_resampler* pResampler, const ma_allocation_callbacks* pAlloca/;"	f	struct:ma_resampler_config
ma_resampling_backend	../ext/miniaudio.h	/^typedef void ma_resampling_backend;$/;"	t
ma_resampling_backend_vtable	../ext/miniaudio.h	/^} ma_resampling_backend_vtable;$/;"	t
ma_resource_manager	../ext/miniaudio.h	/^struct ma_resource_manager$/;"	s
ma_resource_manager	../ext/miniaudio.h	/^typedef struct ma_resource_manager                  ma_resource_manager;$/;"	t
ma_resource_manager_config	../ext/miniaudio.h	/^} ma_resource_manager_config;$/;"	t
ma_resource_manager_config_init	../ext/miniaudio.h	/^MA_API ma_resource_manager_config ma_resource_manager_config_init(void);$/;"	f
ma_resource_manager_data_buffer	../ext/miniaudio.h	/^typedef struct ma_resource_manager_data_buffer      ma_resource_manager_data_buffer;$/;"	s
ma_resource_manager_data_buffer	../ext/miniaudio.h	/^typedef struct ma_resource_manager_data_buffer      ma_resource_manager_data_buffer;$/;"	t
ma_resource_manager_data_buffer_get_available_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_get_available_frames(ma_resource_manager_data_b/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_get_cursor_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_get_cursor_in_pcm_frames(ma_resource_manager_da/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_get_data_format	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_get_data_format(ma_resource_manager_data_buffer/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_get_length_in_pcm_frames(ma_resource_manager_da/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_init	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_init(ma_resource_manager* pResourceManager, con/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_init_copy	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_init_copy(ma_resource_manager* pResourceManager/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_init_ex	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_init_ex(ma_resource_manager* pResourceManager, /;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_init_w	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_init_w(ma_resource_manager* pResourceManager, c/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_is_looping	../ext/miniaudio.h	/^MA_API ma_bool32 ma_resource_manager_data_buffer_is_looping(const ma_resource_manager_data_buffe/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_node	../ext/miniaudio.h	/^struct ma_resource_manager_data_buffer_node$/;"	s
ma_resource_manager_data_buffer_node	../ext/miniaudio.h	/^typedef struct ma_resource_manager_data_buffer_node ma_resource_manager_data_buffer_node;$/;"	s
ma_resource_manager_data_buffer_node	../ext/miniaudio.h	/^typedef struct ma_resource_manager_data_buffer_node ma_resource_manager_data_buffer_node;$/;"	t
ma_resource_manager_data_buffer_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_read_pcm_frames(ma_resource_manager_data_buffer/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_result	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_result(const ma_resource_manager_data_buffer* p/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_seek_to_pcm_frame(ma_resource_manager_data_buff/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_set_looping	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_set_looping(ma_resource_manager_data_buffer* pD/;"	f	struct:ma_resource_manager
ma_resource_manager_data_buffer_uninit	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_buffer_uninit(ma_resource_manager_data_buffer* pDataBu/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source	../ext/miniaudio.h	/^typedef struct ma_resource_manager_data_source      ma_resource_manager_data_source;$/;"	s
ma_resource_manager_data_source	../ext/miniaudio.h	/^typedef struct ma_resource_manager_data_source      ma_resource_manager_data_source;$/;"	t
ma_resource_manager_data_source_config	../ext/miniaudio.h	/^} ma_resource_manager_data_source_config;$/;"	t
ma_resource_manager_data_source_config_init	../ext/miniaudio.h	/^MA_API ma_resource_manager_data_source_config ma_resource_manager_data_source_config_init(void);$/;"	f
ma_resource_manager_data_source_flags	../ext/miniaudio.h	/^} ma_resource_manager_data_source_flags;$/;"	t
ma_resource_manager_data_source_get_available_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_get_available_frames(ma_resource_manager_data_s/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_get_cursor_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_get_cursor_in_pcm_frames(ma_resource_manager_da/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_get_data_format	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_get_data_format(ma_resource_manager_data_source/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_get_length_in_pcm_frames(ma_resource_manager_da/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_init	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_init(ma_resource_manager* pResourceManager, con/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_init_copy	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_init_copy(ma_resource_manager* pResourceManager/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_init_ex	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_init_ex(ma_resource_manager* pResourceManager, /;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_init_w	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_init_w(ma_resource_manager* pResourceManager, c/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_is_looping	../ext/miniaudio.h	/^MA_API ma_bool32 ma_resource_manager_data_source_is_looping(const ma_resource_manager_data_sourc/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_read_pcm_frames(ma_resource_manager_data_source/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_result	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_result(const ma_resource_manager_data_source* p/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_seek_to_pcm_frame(ma_resource_manager_data_sour/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_set_looping	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_set_looping(ma_resource_manager_data_source* pD/;"	f	struct:ma_resource_manager
ma_resource_manager_data_source_uninit	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_source_uninit(ma_resource_manager_data_source* pDataSo/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream	../ext/miniaudio.h	/^struct ma_resource_manager_data_stream$/;"	s
ma_resource_manager_data_stream	../ext/miniaudio.h	/^typedef struct ma_resource_manager_data_stream      ma_resource_manager_data_stream;$/;"	s
ma_resource_manager_data_stream	../ext/miniaudio.h	/^typedef struct ma_resource_manager_data_stream      ma_resource_manager_data_stream;$/;"	t
ma_resource_manager_data_stream_get_available_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_get_available_frames(ma_resource_manager_data_s/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_get_cursor_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_get_cursor_in_pcm_frames(ma_resource_manager_da/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_get_data_format	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_get_data_format(ma_resource_manager_data_stream/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_get_length_in_pcm_frames(ma_resource_manager_da/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_init	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_init(ma_resource_manager* pResourceManager, con/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_init_ex	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_init_ex(ma_resource_manager* pResourceManager, /;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_init_w	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_init_w(ma_resource_manager* pResourceManager, c/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_is_looping	../ext/miniaudio.h	/^MA_API ma_bool32 ma_resource_manager_data_stream_is_looping(const ma_resource_manager_data_strea/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_read_pcm_frames(ma_resource_manager_data_stream/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_result	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_result(const ma_resource_manager_data_stream* p/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_seek_to_pcm_frame(ma_resource_manager_data_stre/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_set_looping	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_set_looping(ma_resource_manager_data_stream* pD/;"	f	struct:ma_resource_manager
ma_resource_manager_data_stream_uninit	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_data_stream_uninit(ma_resource_manager_data_stream* pDataSt/;"	f	struct:ma_resource_manager
ma_resource_manager_data_supply	../ext/miniaudio.h	/^} ma_resource_manager_data_supply;$/;"	t
ma_resource_manager_data_supply_type	../ext/miniaudio.h	/^} ma_resource_manager_data_supply_type;$/;"	t
ma_resource_manager_data_supply_type_decoded	../ext/miniaudio.h	/^    ma_resource_manager_data_supply_type_decoded,       \/* Data supply is a decoded buffer. Con/;"	e
ma_resource_manager_data_supply_type_decoded_paged	../ext/miniaudio.h	/^    ma_resource_manager_data_supply_type_decoded_paged  \/* Data supply is a linked list of deco/;"	e
ma_resource_manager_data_supply_type_encoded	../ext/miniaudio.h	/^    ma_resource_manager_data_supply_type_encoded,       \/* Data supply is an encoded buffer. Co/;"	e
ma_resource_manager_data_supply_type_unknown	../ext/miniaudio.h	/^    ma_resource_manager_data_supply_type_unknown = 0,   \/* Used for determining whether or the /;"	e
ma_resource_manager_flags	../ext/miniaudio.h	/^} ma_resource_manager_flags;$/;"	t
ma_resource_manager_get_log	../ext/miniaudio.h	/^MA_API ma_log* ma_resource_manager_get_log(ma_resource_manager* pResourceManager);$/;"	f	struct:ma_resource_manager
ma_resource_manager_init	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_init(const ma_resource_manager_config* pConfig, ma_resource/;"	f	struct:ma_resource_manager
ma_resource_manager_job	../ext/miniaudio.h	/^#define ma_resource_manager_job                         ma_job$/;"	M
ma_resource_manager_job_init	../ext/miniaudio.h	/^#define ma_resource_manager_job_init                    ma_job_init$/;"	M
ma_resource_manager_job_queue	../ext/miniaudio.h	/^#define ma_resource_manager_job_queue                   ma_job_queue$/;"	M
ma_resource_manager_job_queue_config	../ext/miniaudio.h	/^#define ma_resource_manager_job_queue_config            ma_job_queue_config$/;"	M
ma_resource_manager_job_queue_config_init	../ext/miniaudio.h	/^#define ma_resource_manager_job_queue_config_init       ma_job_queue_config_init$/;"	M
ma_resource_manager_job_queue_get_heap_size	../ext/miniaudio.h	/^#define ma_resource_manager_job_queue_get_heap_size     ma_job_queue_get_heap_size$/;"	M
ma_resource_manager_job_queue_init	../ext/miniaudio.h	/^#define ma_resource_manager_job_queue_init              ma_job_queue_init$/;"	M
ma_resource_manager_job_queue_init_preallocated	../ext/miniaudio.h	/^#define ma_resource_manager_job_queue_init_preallocated ma_job_queue_init_preallocated$/;"	M
ma_resource_manager_job_queue_next	../ext/miniaudio.h	/^#define ma_resource_manager_job_queue_next              ma_job_queue_next$/;"	M
ma_resource_manager_job_queue_post	../ext/miniaudio.h	/^#define ma_resource_manager_job_queue_post              ma_job_queue_post$/;"	M
ma_resource_manager_job_queue_uninit	../ext/miniaudio.h	/^#define ma_resource_manager_job_queue_uninit            ma_job_queue_uninit$/;"	M
ma_resource_manager_next_job	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_next_job(ma_resource_manager* pResourceManager, ma_job* pJo/;"	f	struct:ma_resource_manager
ma_resource_manager_pipeline_notifications	../ext/miniaudio.h	/^} ma_resource_manager_pipeline_notifications;$/;"	t
ma_resource_manager_pipeline_notifications_init	../ext/miniaudio.h	/^MA_API ma_resource_manager_pipeline_notifications ma_resource_manager_pipeline_notifications_ini/;"	f
ma_resource_manager_pipeline_stage_notification	../ext/miniaudio.h	/^} ma_resource_manager_pipeline_stage_notification;$/;"	t
ma_resource_manager_post_job	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_post_job(ma_resource_manager* pResourceManager, const ma_jo/;"	f	struct:ma_resource_manager
ma_resource_manager_post_job_quit	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_post_job_quit(ma_resource_manager* pResourceManager);  \/* /;"	f	struct:ma_resource_manager
ma_resource_manager_process_job	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_process_job(ma_resource_manager* pResourceManager, ma_job* /;"	f	struct:ma_resource_manager
ma_resource_manager_process_next_job	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_process_next_job(ma_resource_manager* pResourceManager);   /;"	f	struct:ma_resource_manager
ma_resource_manager_register_decoded_data	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_register_decoded_data(ma_resource_manager* pResourceManager/;"	f	struct:ma_resource_manager
ma_resource_manager_register_decoded_data_w	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_register_decoded_data_w(ma_resource_manager* pResourceManag/;"	f	struct:ma_resource_manager
ma_resource_manager_register_encoded_data	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_register_encoded_data(ma_resource_manager* pResourceManager/;"	f	struct:ma_resource_manager
ma_resource_manager_register_encoded_data_w	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_register_encoded_data_w(ma_resource_manager* pResourceManag/;"	f	struct:ma_resource_manager
ma_resource_manager_register_file	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_register_file(ma_resource_manager* pResourceManager, const /;"	f	struct:ma_resource_manager
ma_resource_manager_register_file_w	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_register_file_w(ma_resource_manager* pResourceManager, cons/;"	f	struct:ma_resource_manager
ma_resource_manager_uninit	../ext/miniaudio.h	/^MA_API void ma_resource_manager_uninit(ma_resource_manager* pResourceManager);$/;"	f	struct:ma_resource_manager
ma_resource_manager_unregister_data	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_unregister_data(ma_resource_manager* pResourceManager, cons/;"	f	struct:ma_resource_manager
ma_resource_manager_unregister_data_w	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_unregister_data_w(ma_resource_manager* pResourceManager, co/;"	f	struct:ma_resource_manager
ma_resource_manager_unregister_file	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_unregister_file(ma_resource_manager* pResourceManager, cons/;"	f	struct:ma_resource_manager
ma_resource_manager_unregister_file_w	../ext/miniaudio.h	/^MA_API ma_result ma_resource_manager_unregister_file_w(ma_resource_manager* pResourceManager, co/;"	f	struct:ma_resource_manager
ma_restore_denormals	../ext/miniaudio.h	/^static MA_INLINE void ma_restore_denormals(unsigned int prevState)$/;"	f
ma_result	../ext/miniaudio.h	/^    ma_result (* onClose)(ma_vfs* pVFS, ma_vfs_file file);$/;"	E	struct:ma_paged_audio_buffer_page
ma_result	../ext/miniaudio.h	/^    ma_result (* onGetCursor)(ma_data_source* pDataSource, ma_uint64* pCursor);$/;"	E	struct:ma_device
ma_result	../ext/miniaudio.h	/^    ma_result (* onGetDataFormat)(ma_data_source* pDataSource, ma_format* pFormat, ma_uint32* pC/;"	E	struct:ma_device
ma_result	../ext/miniaudio.h	/^    ma_result (* onGetExpectedOutputFrameCount)(void* pUserData, const ma_resampling_backend* pB/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onGetHeapSize                )(void* pUserData, const ma_resampler_config* pCon/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onGetLength)(ma_data_source* pDataSource, ma_uint64* pLength);$/;"	E	struct:ma_device
ma_result	../ext/miniaudio.h	/^    ma_result (* onGetRequiredInputFrameCount )(void* pUserData, const ma_resampling_backend* pB/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onGetRequiredInputFrameCount)(ma_node* pNode, ma_uint32 outputFrameCount, ma_ui/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onInfo) (ma_vfs* pVFS, ma_vfs_file file, ma_file_info* pInfo);$/;"	E	struct:ma_paged_audio_buffer_page
ma_result	../ext/miniaudio.h	/^    ma_result (* onInit                       )(void* pUserData, const ma_resampler_config* pCon/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onInit      )(void* pUserData, ma_read_proc onRead, ma_seek_proc onSeek, ma_tel/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onInitFile  )(void* pUserData, const char* pFilePath, const ma_decoding_backend/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onInitFileW )(void* pUserData, const wchar_t* pFilePath, const ma_decoding_back/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onInitMemory)(void* pUserData, const void* pData, size_t dataSize, const ma_dec/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onOpen) (ma_vfs* pVFS, const char* pFilePath, ma_uint32 openMode, ma_vfs_file* /;"	E	struct:ma_paged_audio_buffer_page
ma_result	../ext/miniaudio.h	/^    ma_result (* onOpenW)(ma_vfs* pVFS, const wchar_t* pFilePath, ma_uint32 openMode, ma_vfs_fil/;"	E	struct:ma_paged_audio_buffer_page
ma_result	../ext/miniaudio.h	/^    ma_result (* onProcess                    )(void* pUserData, ma_resampling_backend* pBackend/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onRead) (ma_vfs* pVFS, ma_vfs_file file, void* pDst, size_t sizeInBytes, size_t/;"	E	struct:ma_paged_audio_buffer_page
ma_result	../ext/miniaudio.h	/^    ma_result (* onRead)(ma_data_source* pDataSource, void* pFramesOut, ma_uint64 frameCount, ma/;"	E	struct:ma_device
ma_result	../ext/miniaudio.h	/^    ma_result (* onReset                      )(void* pUserData, ma_resampling_backend* pBackend/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onSeek) (ma_vfs* pVFS, ma_vfs_file file, ma_int64 offset, ma_seek_origin origin/;"	E	struct:ma_paged_audio_buffer_page
ma_result	../ext/miniaudio.h	/^    ma_result (* onSeek)(ma_data_source* pDataSource, ma_uint64 frameIndex);$/;"	E	struct:ma_device
ma_result	../ext/miniaudio.h	/^    ma_result (* onSetLooping)(ma_data_source* pDataSource, ma_bool32 isLooping);$/;"	E	struct:ma_device
ma_result	../ext/miniaudio.h	/^    ma_result (* onSetRate                    )(void* pUserData, ma_resampling_backend* pBackend/;"	E
ma_result	../ext/miniaudio.h	/^    ma_result (* onTell) (ma_vfs* pVFS, ma_vfs_file file, ma_int64* pCursor);$/;"	E	struct:ma_paged_audio_buffer_page
ma_result	../ext/miniaudio.h	/^    ma_result (* onWrite)(ma_vfs* pVFS, ma_vfs_file file, const void* pSrc, size_t sizeInBytes, /;"	E	struct:ma_paged_audio_buffer_page
ma_result	../ext/miniaudio.h	/^} ma_result;$/;"	t
ma_result_description	../ext/miniaudio.h	/^MA_API const char* ma_result_description(ma_result result);$/;"	f	struct:ma_resampler_config
ma_result_from_GetLastError	../ext/miniaudio.h	/^static ma_result ma_result_from_GetLastError(DWORD error)$/;"	f
ma_result_from_HRESULT	../ext/miniaudio.h	/^static ma_result ma_result_from_HRESULT(HRESULT hr)$/;"	f
ma_result_from_MMRESULT	../ext/miniaudio.h	/^static ma_result ma_result_from_MMRESULT(MMRESULT resultMM)$/;"	f	struct:ma_IDirectSoundNotify
ma_result_from_errno	../ext/miniaudio.h	/^static ma_result ma_result_from_errno(int e)$/;"	f
ma_round_to_power_of_2	../ext/miniaudio.h	/^static MA_INLINE unsigned int ma_round_to_power_of_2(unsigned int x)$/;"	f
ma_scale_to_range_f32	../ext/miniaudio.h	/^static MA_INLINE float ma_scale_to_range_f32(float x, float lo, float hi)$/;"	f
ma_seed	../ext/miniaudio.h	/^static MA_INLINE void ma_seed(ma_int32 seed)$/;"	f
ma_seek_origin	../ext/miniaudio.h	/^} ma_seek_origin;$/;"	t	struct:ma_paged_audio_buffer_page
ma_seek_origin_current	../ext/miniaudio.h	/^    ma_seek_origin_current,$/;"	e	struct:ma_paged_audio_buffer_page
ma_seek_origin_end	../ext/miniaudio.h	/^    ma_seek_origin_end  \/* Not used by decoders. *\/$/;"	e	struct:ma_paged_audio_buffer_page
ma_seek_origin_start	../ext/miniaudio.h	/^    ma_seek_origin_start,$/;"	e	struct:ma_paged_audio_buffer_page
ma_semaphore	../ext/miniaudio.h	/^typedef ma_handle ma_semaphore;$/;"	t
ma_semaphore	../ext/miniaudio.h	/^} ma_semaphore;$/;"	t
ma_semaphore_init	../ext/miniaudio.h	/^MA_API ma_result ma_semaphore_init(int initialValue, ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_init__posix	../ext/miniaudio.h	/^static ma_result ma_semaphore_init__posix(int initialValue, ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_init__win32	../ext/miniaudio.h	/^static ma_result ma_semaphore_init__win32(int initialValue, ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_release	../ext/miniaudio.h	/^MA_API ma_result ma_semaphore_release(ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_release__posix	../ext/miniaudio.h	/^static ma_result ma_semaphore_release__posix(ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_release__win32	../ext/miniaudio.h	/^static ma_result ma_semaphore_release__win32(ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_uninit	../ext/miniaudio.h	/^MA_API void ma_semaphore_uninit(ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_uninit__posix	../ext/miniaudio.h	/^static void ma_semaphore_uninit__posix(ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_uninit__win32	../ext/miniaudio.h	/^static void ma_semaphore_uninit__win32(ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_wait	../ext/miniaudio.h	/^MA_API ma_result ma_semaphore_wait(ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_wait__posix	../ext/miniaudio.h	/^static ma_result ma_semaphore_wait__posix(ma_semaphore* pSemaphore)$/;"	f
ma_semaphore_wait__win32	../ext/miniaudio.h	/^static ma_result ma_semaphore_wait__win32(ma_semaphore* pSemaphore)$/;"	f
ma_share_mode	../ext/miniaudio.h	/^} ma_share_mode;$/;"	t	struct:ma_job
ma_share_mode_exclusive	../ext/miniaudio.h	/^    ma_share_mode_exclusive$/;"	e	struct:ma_job
ma_share_mode_shared	../ext/miniaudio.h	/^    ma_share_mode_shared = 0,$/;"	e	struct:ma_job
ma_silence_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_silence_pcm_frames(void* p, ma_uint64 frameCount, ma_format format, ma_uint32 cha/;"	f	struct:ma_device
ma_sind	../ext/miniaudio.h	/^static MA_INLINE double ma_sind(double x)$/;"	f
ma_sinf	../ext/miniaudio.h	/^static MA_INLINE float ma_sinf(float x)$/;"	f
ma_sleep	../ext/miniaudio.h	/^static MA_INLINE void ma_sleep(ma_uint32 milliseconds)$/;"	f
ma_sleep__posix	../ext/miniaudio.h	/^static void ma_sleep__posix(ma_uint32 milliseconds)$/;"	f
ma_sleep__win32	../ext/miniaudio.h	/^static void ma_sleep__win32(ma_uint32 milliseconds)$/;"	f
ma_slot_allocator	../ext/miniaudio.h	/^} ma_slot_allocator;$/;"	t	struct:ma_resampler_config
ma_slot_allocator_alloc	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_alloc(ma_slot_allocator* pAllocator, ma_uint64* pSlot)$/;"	f
ma_slot_allocator_alloc	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_alloc(ma_slot_allocator* pAllocator, ma_uint64* pSlot);$/;"	f	struct:ma_resampler_config
ma_slot_allocator_calculate_group_capacity	../ext/miniaudio.h	/^static MA_INLINE ma_uint32 ma_slot_allocator_calculate_group_capacity(ma_uint32 slotCapacity)$/;"	f
ma_slot_allocator_config	../ext/miniaudio.h	/^} ma_slot_allocator_config;$/;"	t	struct:ma_resampler_config
ma_slot_allocator_config_init	../ext/miniaudio.h	/^MA_API ma_slot_allocator_config ma_slot_allocator_config_init(ma_uint32 capacity)$/;"	f
ma_slot_allocator_config_init	../ext/miniaudio.h	/^MA_API ma_slot_allocator_config ma_slot_allocator_config_init(ma_uint32 capacity);$/;"	f	struct:ma_resampler_config
ma_slot_allocator_free	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_free(ma_slot_allocator* pAllocator, ma_uint64 slot)$/;"	f
ma_slot_allocator_free	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_free(ma_slot_allocator* pAllocator, ma_uint64 slot);$/;"	f	struct:ma_resampler_config
ma_slot_allocator_get_heap_layout	../ext/miniaudio.h	/^static ma_result ma_slot_allocator_get_heap_layout(const ma_slot_allocator_config* pConfig, ma_s/;"	f
ma_slot_allocator_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_get_heap_size(const ma_slot_allocator_config* pConfig, size_t/;"	f
ma_slot_allocator_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_get_heap_size(const ma_slot_allocator_config* pConfig, size_t/;"	f	struct:ma_resampler_config
ma_slot_allocator_group	../ext/miniaudio.h	/^} ma_slot_allocator_group;$/;"	t	struct:ma_resampler_config
ma_slot_allocator_group_capacity	../ext/miniaudio.h	/^static MA_INLINE ma_uint32 ma_slot_allocator_group_capacity(const ma_slot_allocator* pAllocator)$/;"	f
ma_slot_allocator_heap_layout	../ext/miniaudio.h	/^} ma_slot_allocator_heap_layout;$/;"	t
ma_slot_allocator_init	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_init(const ma_slot_allocator_config* pConfig, const ma_alloca/;"	f
ma_slot_allocator_init	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_init(const ma_slot_allocator_config* pConfig, const ma_alloca/;"	f	struct:ma_resampler_config
ma_slot_allocator_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_init_preallocated(const ma_slot_allocator_config* pConfig, vo/;"	f
ma_slot_allocator_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_slot_allocator_init_preallocated(const ma_slot_allocator_config* pConfig, vo/;"	f	struct:ma_resampler_config
ma_slot_allocator_uninit	../ext/miniaudio.h	/^MA_API void ma_slot_allocator_uninit(ma_slot_allocator* pAllocator, const ma_allocation_callback/;"	f
ma_slot_allocator_uninit	../ext/miniaudio.h	/^MA_API void ma_slot_allocator_uninit(ma_slot_allocator* pAllocator, const ma_allocation_callback/;"	f	struct:ma_resampler_config
ma_sound	../ext/miniaudio.h	/^struct ma_sound$/;"	s
ma_sound	../ext/miniaudio.h	/^typedef struct ma_sound  ma_sound;$/;"	s
ma_sound	../ext/miniaudio.h	/^typedef struct ma_sound  ma_sound;$/;"	t
ma_sound_at_end	../ext/miniaudio.h	/^MA_API ma_bool32 ma_sound_at_end(const ma_sound* pSound);$/;"	f
ma_sound_config	../ext/miniaudio.h	/^} ma_sound_config;$/;"	t
ma_sound_config_init	../ext/miniaudio.h	/^MA_API ma_sound_config ma_sound_config_init(void);$/;"	f
ma_sound_flags	../ext/miniaudio.h	/^} ma_sound_flags;$/;"	t
ma_sound_get_attenuation_model	../ext/miniaudio.h	/^MA_API ma_attenuation_model ma_sound_get_attenuation_model(const ma_sound* pSound);$/;"	f
ma_sound_get_cone	../ext/miniaudio.h	/^MA_API void ma_sound_get_cone(const ma_sound* pSound, float* pInnerAngleInRadians, float* pOuter/;"	f
ma_sound_get_current_fade_volume	../ext/miniaudio.h	/^MA_API float ma_sound_get_current_fade_volume(ma_sound* pSound);$/;"	f
ma_sound_get_cursor_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_sound_get_cursor_in_pcm_frames(ma_sound* pSound, ma_uint64* pCursor);$/;"	f
ma_sound_get_cursor_in_seconds	../ext/miniaudio.h	/^MA_API ma_result ma_sound_get_cursor_in_seconds(ma_sound* pSound, float* pCursor);$/;"	f
ma_sound_get_data_format	../ext/miniaudio.h	/^MA_API ma_result ma_sound_get_data_format(ma_sound* pSound, ma_format* pFormat, ma_uint32* pChan/;"	f
ma_sound_get_data_source	../ext/miniaudio.h	/^MA_API ma_data_source* ma_sound_get_data_source(const ma_sound* pSound);$/;"	f
ma_sound_get_direction	../ext/miniaudio.h	/^MA_API ma_vec3f ma_sound_get_direction(const ma_sound* pSound);$/;"	f
ma_sound_get_direction_to_listener	../ext/miniaudio.h	/^MA_API ma_vec3f ma_sound_get_direction_to_listener(const ma_sound* pSound);$/;"	f
ma_sound_get_directional_attenuation_factor	../ext/miniaudio.h	/^MA_API float ma_sound_get_directional_attenuation_factor(const ma_sound* pSound);$/;"	f
ma_sound_get_doppler_factor	../ext/miniaudio.h	/^MA_API float ma_sound_get_doppler_factor(const ma_sound* pSound);$/;"	f
ma_sound_get_engine	../ext/miniaudio.h	/^MA_API ma_engine* ma_sound_get_engine(const ma_sound* pSound);$/;"	f
ma_sound_get_length_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_sound_get_length_in_pcm_frames(ma_sound* pSound, ma_uint64* pLength);$/;"	f
ma_sound_get_length_in_seconds	../ext/miniaudio.h	/^MA_API ma_result ma_sound_get_length_in_seconds(ma_sound* pSound, float* pLength);$/;"	f
ma_sound_get_listener_index	../ext/miniaudio.h	/^MA_API ma_uint32 ma_sound_get_listener_index(const ma_sound* pSound);$/;"	f
ma_sound_get_max_distance	../ext/miniaudio.h	/^MA_API float ma_sound_get_max_distance(const ma_sound* pSound);$/;"	f
ma_sound_get_max_gain	../ext/miniaudio.h	/^MA_API float ma_sound_get_max_gain(const ma_sound* pSound);$/;"	f
ma_sound_get_min_distance	../ext/miniaudio.h	/^MA_API float ma_sound_get_min_distance(const ma_sound* pSound);$/;"	f
ma_sound_get_min_gain	../ext/miniaudio.h	/^MA_API float ma_sound_get_min_gain(const ma_sound* pSound);$/;"	f
ma_sound_get_pan	../ext/miniaudio.h	/^MA_API float ma_sound_get_pan(const ma_sound* pSound);$/;"	f
ma_sound_get_pan_mode	../ext/miniaudio.h	/^MA_API ma_pan_mode ma_sound_get_pan_mode(const ma_sound* pSound);$/;"	f
ma_sound_get_pinned_listener_index	../ext/miniaudio.h	/^MA_API ma_uint32 ma_sound_get_pinned_listener_index(const ma_sound* pSound);$/;"	f
ma_sound_get_pitch	../ext/miniaudio.h	/^MA_API float ma_sound_get_pitch(const ma_sound* pSound);$/;"	f
ma_sound_get_position	../ext/miniaudio.h	/^MA_API ma_vec3f ma_sound_get_position(const ma_sound* pSound);$/;"	f
ma_sound_get_positioning	../ext/miniaudio.h	/^MA_API ma_positioning ma_sound_get_positioning(const ma_sound* pSound);$/;"	f
ma_sound_get_rolloff	../ext/miniaudio.h	/^MA_API float ma_sound_get_rolloff(const ma_sound* pSound);$/;"	f
ma_sound_get_time_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_uint64 ma_sound_get_time_in_pcm_frames(const ma_sound* pSound);$/;"	f
ma_sound_get_velocity	../ext/miniaudio.h	/^MA_API ma_vec3f ma_sound_get_velocity(const ma_sound* pSound);$/;"	f
ma_sound_get_volume	../ext/miniaudio.h	/^MA_API float ma_sound_get_volume(const ma_sound* pSound);$/;"	f
ma_sound_group	../ext/miniaudio.h	/^typedef ma_sound        ma_sound_group;$/;"	t	struct:ma_sound_inlined
ma_sound_group_config	../ext/miniaudio.h	/^typedef ma_sound_config ma_sound_group_config;$/;"	t	struct:ma_sound_inlined
ma_sound_group_config_init	../ext/miniaudio.h	/^MA_API ma_sound_group_config ma_sound_group_config_init(void);$/;"	f	struct:ma_sound_inlined
ma_sound_group_get_attenuation_model	../ext/miniaudio.h	/^MA_API ma_attenuation_model ma_sound_group_get_attenuation_model(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_cone	../ext/miniaudio.h	/^MA_API void ma_sound_group_get_cone(const ma_sound_group* pGroup, float* pInnerAngleInRadians, f/;"	f
ma_sound_group_get_current_fade_volume	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_current_fade_volume(ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_direction	../ext/miniaudio.h	/^MA_API ma_vec3f ma_sound_group_get_direction(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_direction_to_listener	../ext/miniaudio.h	/^MA_API ma_vec3f ma_sound_group_get_direction_to_listener(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_directional_attenuation_factor	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_directional_attenuation_factor(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_doppler_factor	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_doppler_factor(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_engine	../ext/miniaudio.h	/^MA_API ma_engine* ma_sound_group_get_engine(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_listener_index	../ext/miniaudio.h	/^MA_API ma_uint32 ma_sound_group_get_listener_index(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_max_distance	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_max_distance(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_max_gain	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_max_gain(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_min_distance	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_min_distance(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_min_gain	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_min_gain(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_pan	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_pan(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_pan_mode	../ext/miniaudio.h	/^MA_API ma_pan_mode ma_sound_group_get_pan_mode(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_pinned_listener_index	../ext/miniaudio.h	/^MA_API ma_uint32 ma_sound_group_get_pinned_listener_index(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_pitch	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_pitch(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_position	../ext/miniaudio.h	/^MA_API ma_vec3f ma_sound_group_get_position(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_positioning	../ext/miniaudio.h	/^MA_API ma_positioning ma_sound_group_get_positioning(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_rolloff	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_rolloff(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_time_in_pcm_frames	../ext/miniaudio.h	/^MA_API ma_uint64 ma_sound_group_get_time_in_pcm_frames(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_velocity	../ext/miniaudio.h	/^MA_API ma_vec3f ma_sound_group_get_velocity(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_get_volume	../ext/miniaudio.h	/^MA_API float ma_sound_group_get_volume(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_init	../ext/miniaudio.h	/^MA_API ma_result ma_sound_group_init(ma_engine* pEngine, ma_uint32 flags, ma_sound_group* pParen/;"	f
ma_sound_group_init_ex	../ext/miniaudio.h	/^MA_API ma_result ma_sound_group_init_ex(ma_engine* pEngine, const ma_sound_group_config* pConfig/;"	f
ma_sound_group_is_playing	../ext/miniaudio.h	/^MA_API ma_bool32 ma_sound_group_is_playing(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_is_spatialization_enabled	../ext/miniaudio.h	/^MA_API ma_bool32 ma_sound_group_is_spatialization_enabled(const ma_sound_group* pGroup);$/;"	f
ma_sound_group_set_attenuation_model	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_attenuation_model(ma_sound_group* pGroup, ma_attenuation_model at/;"	f
ma_sound_group_set_cone	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_cone(ma_sound_group* pGroup, float innerAngleInRadians, float out/;"	f
ma_sound_group_set_direction	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_direction(ma_sound_group* pGroup, float x, float y, float z);$/;"	f
ma_sound_group_set_directional_attenuation_factor	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_directional_attenuation_factor(ma_sound_group* pGroup, float dire/;"	f
ma_sound_group_set_doppler_factor	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_doppler_factor(ma_sound_group* pGroup, float dopplerFactor);$/;"	f
ma_sound_group_set_fade_in_milliseconds	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_fade_in_milliseconds(ma_sound_group* pGroup, float volumeBeg, flo/;"	f
ma_sound_group_set_fade_in_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_fade_in_pcm_frames(ma_sound_group* pGroup, float volumeBeg, float/;"	f
ma_sound_group_set_max_distance	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_max_distance(ma_sound_group* pGroup, float maxDistance);$/;"	f
ma_sound_group_set_max_gain	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_max_gain(ma_sound_group* pGroup, float maxGain);$/;"	f
ma_sound_group_set_min_distance	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_min_distance(ma_sound_group* pGroup, float minDistance);$/;"	f
ma_sound_group_set_min_gain	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_min_gain(ma_sound_group* pGroup, float minGain);$/;"	f
ma_sound_group_set_pan	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_pan(ma_sound_group* pGroup, float pan);$/;"	f
ma_sound_group_set_pan_mode	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_pan_mode(ma_sound_group* pGroup, ma_pan_mode panMode);$/;"	f
ma_sound_group_set_pinned_listener_index	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_pinned_listener_index(ma_sound_group* pGroup, ma_uint32 listenerI/;"	f
ma_sound_group_set_pitch	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_pitch(ma_sound_group* pGroup, float pitch);$/;"	f
ma_sound_group_set_position	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_position(ma_sound_group* pGroup, float x, float y, float z);$/;"	f
ma_sound_group_set_positioning	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_positioning(ma_sound_group* pGroup, ma_positioning positioning);$/;"	f
ma_sound_group_set_rolloff	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_rolloff(ma_sound_group* pGroup, float rolloff);$/;"	f
ma_sound_group_set_spatialization_enabled	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_spatialization_enabled(ma_sound_group* pGroup, ma_bool32 enabled)/;"	f
ma_sound_group_set_start_time_in_milliseconds	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_start_time_in_milliseconds(ma_sound_group* pGroup, ma_uint64 abso/;"	f
ma_sound_group_set_start_time_in_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_start_time_in_pcm_frames(ma_sound_group* pGroup, ma_uint64 absolu/;"	f
ma_sound_group_set_stop_time_in_milliseconds	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_stop_time_in_milliseconds(ma_sound_group* pGroup, ma_uint64 absol/;"	f
ma_sound_group_set_stop_time_in_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_stop_time_in_pcm_frames(ma_sound_group* pGroup, ma_uint64 absolut/;"	f
ma_sound_group_set_velocity	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_velocity(ma_sound_group* pGroup, float x, float y, float z);$/;"	f
ma_sound_group_set_volume	../ext/miniaudio.h	/^MA_API void ma_sound_group_set_volume(ma_sound_group* pGroup, float volume);$/;"	f
ma_sound_group_start	../ext/miniaudio.h	/^MA_API ma_result ma_sound_group_start(ma_sound_group* pGroup);$/;"	f
ma_sound_group_stop	../ext/miniaudio.h	/^MA_API ma_result ma_sound_group_stop(ma_sound_group* pGroup);$/;"	f
ma_sound_group_uninit	../ext/miniaudio.h	/^MA_API void ma_sound_group_uninit(ma_sound_group* pGroup);$/;"	f
ma_sound_init_copy	../ext/miniaudio.h	/^MA_API ma_result ma_sound_init_copy(ma_engine* pEngine, const ma_sound* pExistingSound, ma_uint3/;"	f
ma_sound_init_ex	../ext/miniaudio.h	/^MA_API ma_result ma_sound_init_ex(ma_engine* pEngine, const ma_sound_config* pConfig, ma_sound* /;"	f
ma_sound_init_from_data_source	../ext/miniaudio.h	/^MA_API ma_result ma_sound_init_from_data_source(ma_engine* pEngine, ma_data_source* pDataSource,/;"	f
ma_sound_init_from_file	../ext/miniaudio.h	/^MA_API ma_result ma_sound_init_from_file(ma_engine* pEngine, const char* pFilePath, ma_uint32 fl/;"	f
ma_sound_init_from_file_w	../ext/miniaudio.h	/^MA_API ma_result ma_sound_init_from_file_w(ma_engine* pEngine, const wchar_t* pFilePath, ma_uint/;"	f
ma_sound_inlined	../ext/miniaudio.h	/^struct ma_sound_inlined$/;"	s
ma_sound_inlined	../ext/miniaudio.h	/^typedef struct ma_sound_inlined ma_sound_inlined;$/;"	t
ma_sound_is_looping	../ext/miniaudio.h	/^MA_API ma_bool32 ma_sound_is_looping(const ma_sound* pSound);$/;"	f
ma_sound_is_playing	../ext/miniaudio.h	/^MA_API ma_bool32 ma_sound_is_playing(const ma_sound* pSound);$/;"	f
ma_sound_is_spatialization_enabled	../ext/miniaudio.h	/^MA_API ma_bool32 ma_sound_is_spatialization_enabled(const ma_sound* pSound);$/;"	f
ma_sound_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_sound_seek_to_pcm_frame(ma_sound* pSound, ma_uint64 frameIndex); \/* Just a /;"	f
ma_sound_set_attenuation_model	../ext/miniaudio.h	/^MA_API void ma_sound_set_attenuation_model(ma_sound* pSound, ma_attenuation_model attenuationMod/;"	f
ma_sound_set_cone	../ext/miniaudio.h	/^MA_API void ma_sound_set_cone(ma_sound* pSound, float innerAngleInRadians, float outerAngleInRad/;"	f
ma_sound_set_direction	../ext/miniaudio.h	/^MA_API void ma_sound_set_direction(ma_sound* pSound, float x, float y, float z);$/;"	f
ma_sound_set_directional_attenuation_factor	../ext/miniaudio.h	/^MA_API void ma_sound_set_directional_attenuation_factor(ma_sound* pSound, float directionalAtten/;"	f
ma_sound_set_doppler_factor	../ext/miniaudio.h	/^MA_API void ma_sound_set_doppler_factor(ma_sound* pSound, float dopplerFactor);$/;"	f
ma_sound_set_fade_in_milliseconds	../ext/miniaudio.h	/^MA_API void ma_sound_set_fade_in_milliseconds(ma_sound* pSound, float volumeBeg, float volumeEnd/;"	f
ma_sound_set_fade_in_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_sound_set_fade_in_pcm_frames(ma_sound* pSound, float volumeBeg, float volumeEnd, /;"	f
ma_sound_set_looping	../ext/miniaudio.h	/^MA_API void ma_sound_set_looping(ma_sound* pSound, ma_bool32 isLooping);$/;"	f
ma_sound_set_max_distance	../ext/miniaudio.h	/^MA_API void ma_sound_set_max_distance(ma_sound* pSound, float maxDistance);$/;"	f
ma_sound_set_max_gain	../ext/miniaudio.h	/^MA_API void ma_sound_set_max_gain(ma_sound* pSound, float maxGain);$/;"	f
ma_sound_set_min_distance	../ext/miniaudio.h	/^MA_API void ma_sound_set_min_distance(ma_sound* pSound, float minDistance);$/;"	f
ma_sound_set_min_gain	../ext/miniaudio.h	/^MA_API void ma_sound_set_min_gain(ma_sound* pSound, float minGain);$/;"	f
ma_sound_set_pan	../ext/miniaudio.h	/^MA_API void ma_sound_set_pan(ma_sound* pSound, float pan);$/;"	f
ma_sound_set_pan_mode	../ext/miniaudio.h	/^MA_API void ma_sound_set_pan_mode(ma_sound* pSound, ma_pan_mode panMode);$/;"	f
ma_sound_set_pinned_listener_index	../ext/miniaudio.h	/^MA_API void ma_sound_set_pinned_listener_index(ma_sound* pSound, ma_uint32 listenerIndex);$/;"	f
ma_sound_set_pitch	../ext/miniaudio.h	/^MA_API void ma_sound_set_pitch(ma_sound* pSound, float pitch);$/;"	f
ma_sound_set_position	../ext/miniaudio.h	/^MA_API void ma_sound_set_position(ma_sound* pSound, float x, float y, float z);$/;"	f
ma_sound_set_positioning	../ext/miniaudio.h	/^MA_API void ma_sound_set_positioning(ma_sound* pSound, ma_positioning positioning);$/;"	f
ma_sound_set_rolloff	../ext/miniaudio.h	/^MA_API void ma_sound_set_rolloff(ma_sound* pSound, float rolloff);$/;"	f
ma_sound_set_spatialization_enabled	../ext/miniaudio.h	/^MA_API void ma_sound_set_spatialization_enabled(ma_sound* pSound, ma_bool32 enabled);$/;"	f
ma_sound_set_start_time_in_milliseconds	../ext/miniaudio.h	/^MA_API void ma_sound_set_start_time_in_milliseconds(ma_sound* pSound, ma_uint64 absoluteGlobalTi/;"	f
ma_sound_set_start_time_in_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_sound_set_start_time_in_pcm_frames(ma_sound* pSound, ma_uint64 absoluteGlobalTime/;"	f
ma_sound_set_stop_time_in_milliseconds	../ext/miniaudio.h	/^MA_API void ma_sound_set_stop_time_in_milliseconds(ma_sound* pSound, ma_uint64 absoluteGlobalTim/;"	f
ma_sound_set_stop_time_in_pcm_frames	../ext/miniaudio.h	/^MA_API void ma_sound_set_stop_time_in_pcm_frames(ma_sound* pSound, ma_uint64 absoluteGlobalTimeI/;"	f
ma_sound_set_velocity	../ext/miniaudio.h	/^MA_API void ma_sound_set_velocity(ma_sound* pSound, float x, float y, float z);$/;"	f
ma_sound_set_volume	../ext/miniaudio.h	/^MA_API void ma_sound_set_volume(ma_sound* pSound, float volume);$/;"	f
ma_sound_start	../ext/miniaudio.h	/^MA_API ma_result ma_sound_start(ma_sound* pSound);$/;"	f
ma_sound_stop	../ext/miniaudio.h	/^MA_API ma_result ma_sound_stop(ma_sound* pSound);$/;"	f
ma_sound_uninit	../ext/miniaudio.h	/^MA_API void ma_sound_uninit(ma_sound* pSound);$/;"	f
ma_spatializer	../ext/miniaudio.h	/^} ma_spatializer;$/;"	t
ma_spatializer_config	../ext/miniaudio.h	/^} ma_spatializer_config;$/;"	t
ma_spatializer_config_init	../ext/miniaudio.h	/^MA_API ma_spatializer_config ma_spatializer_config_init(ma_uint32 channelsIn, ma_uint32 channels/;"	f
ma_spatializer_get_attenuation_model	../ext/miniaudio.h	/^MA_API ma_attenuation_model ma_spatializer_get_attenuation_model(const ma_spatializer* pSpatiali/;"	f
ma_spatializer_get_cone	../ext/miniaudio.h	/^MA_API void ma_spatializer_get_cone(const ma_spatializer* pSpatializer, float* pInnerAngleInRadi/;"	f
ma_spatializer_get_direction	../ext/miniaudio.h	/^MA_API ma_vec3f ma_spatializer_get_direction(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_directional_attenuation_factor	../ext/miniaudio.h	/^MA_API float ma_spatializer_get_directional_attenuation_factor(const ma_spatializer* pSpatialize/;"	f
ma_spatializer_get_doppler_factor	../ext/miniaudio.h	/^MA_API float ma_spatializer_get_doppler_factor(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_spatializer_get_heap_size(const ma_spatializer_config* pConfig, size_t* pHea/;"	f
ma_spatializer_get_input_channels	../ext/miniaudio.h	/^MA_API ma_uint32 ma_spatializer_get_input_channels(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_max_distance	../ext/miniaudio.h	/^MA_API float ma_spatializer_get_max_distance(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_max_gain	../ext/miniaudio.h	/^MA_API float ma_spatializer_get_max_gain(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_min_distance	../ext/miniaudio.h	/^MA_API float ma_spatializer_get_min_distance(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_min_gain	../ext/miniaudio.h	/^MA_API float ma_spatializer_get_min_gain(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_output_channels	../ext/miniaudio.h	/^MA_API ma_uint32 ma_spatializer_get_output_channels(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_position	../ext/miniaudio.h	/^MA_API ma_vec3f ma_spatializer_get_position(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_positioning	../ext/miniaudio.h	/^MA_API ma_positioning ma_spatializer_get_positioning(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_relative_position_and_direction	../ext/miniaudio.h	/^MA_API void ma_spatializer_get_relative_position_and_direction(const ma_spatializer* pSpatialize/;"	f
ma_spatializer_get_rolloff	../ext/miniaudio.h	/^MA_API float ma_spatializer_get_rolloff(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_get_velocity	../ext/miniaudio.h	/^MA_API ma_vec3f ma_spatializer_get_velocity(const ma_spatializer* pSpatializer);$/;"	f
ma_spatializer_init	../ext/miniaudio.h	/^MA_API ma_result ma_spatializer_init(const ma_spatializer_config* pConfig, const ma_allocation_c/;"	f
ma_spatializer_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_spatializer_init_preallocated(const ma_spatializer_config* pConfig, void* pH/;"	f
ma_spatializer_listener	../ext/miniaudio.h	/^} ma_spatializer_listener;$/;"	t
ma_spatializer_listener_config	../ext/miniaudio.h	/^} ma_spatializer_listener_config;$/;"	t
ma_spatializer_listener_config_init	../ext/miniaudio.h	/^MA_API ma_spatializer_listener_config ma_spatializer_listener_config_init(ma_uint32 channelsOut)/;"	f
ma_spatializer_listener_get_channel_map	../ext/miniaudio.h	/^MA_API ma_channel* ma_spatializer_listener_get_channel_map(ma_spatializer_listener* pListener);$/;"	f
ma_spatializer_listener_get_cone	../ext/miniaudio.h	/^MA_API void ma_spatializer_listener_get_cone(const ma_spatializer_listener* pListener, float* pI/;"	f
ma_spatializer_listener_get_direction	../ext/miniaudio.h	/^MA_API ma_vec3f ma_spatializer_listener_get_direction(const ma_spatializer_listener* pListener);$/;"	f
ma_spatializer_listener_get_heap_size	../ext/miniaudio.h	/^MA_API ma_result ma_spatializer_listener_get_heap_size(const ma_spatializer_listener_config* pCo/;"	f
ma_spatializer_listener_get_position	../ext/miniaudio.h	/^MA_API ma_vec3f ma_spatializer_listener_get_position(const ma_spatializer_listener* pListener);$/;"	f
ma_spatializer_listener_get_speed_of_sound	../ext/miniaudio.h	/^MA_API float ma_spatializer_listener_get_speed_of_sound(const ma_spatializer_listener* pListener/;"	f
ma_spatializer_listener_get_velocity	../ext/miniaudio.h	/^MA_API ma_vec3f ma_spatializer_listener_get_velocity(const ma_spatializer_listener* pListener);$/;"	f
ma_spatializer_listener_get_world_up	../ext/miniaudio.h	/^MA_API ma_vec3f ma_spatializer_listener_get_world_up(const ma_spatializer_listener* pListener);$/;"	f
ma_spatializer_listener_init	../ext/miniaudio.h	/^MA_API ma_result ma_spatializer_listener_init(const ma_spatializer_listener_config* pConfig, con/;"	f
ma_spatializer_listener_init_preallocated	../ext/miniaudio.h	/^MA_API ma_result ma_spatializer_listener_init_preallocated(const ma_spatializer_listener_config*/;"	f
ma_spatializer_listener_is_enabled	../ext/miniaudio.h	/^MA_API ma_bool32 ma_spatializer_listener_is_enabled(const ma_spatializer_listener* pListener);$/;"	f
ma_spatializer_listener_set_cone	../ext/miniaudio.h	/^MA_API void ma_spatializer_listener_set_cone(ma_spatializer_listener* pListener, float innerAngl/;"	f
ma_spatializer_listener_set_direction	../ext/miniaudio.h	/^MA_API void ma_spatializer_listener_set_direction(ma_spatializer_listener* pListener, float x, f/;"	f
ma_spatializer_listener_set_enabled	../ext/miniaudio.h	/^MA_API void ma_spatializer_listener_set_enabled(ma_spatializer_listener* pListener, ma_bool32 is/;"	f
ma_spatializer_listener_set_position	../ext/miniaudio.h	/^MA_API void ma_spatializer_listener_set_position(ma_spatializer_listener* pListener, float x, fl/;"	f
ma_spatializer_listener_set_speed_of_sound	../ext/miniaudio.h	/^MA_API void ma_spatializer_listener_set_speed_of_sound(ma_spatializer_listener* pListener, float/;"	f
ma_spatializer_listener_set_velocity	../ext/miniaudio.h	/^MA_API void ma_spatializer_listener_set_velocity(ma_spatializer_listener* pListener, float x, fl/;"	f
ma_spatializer_listener_set_world_up	../ext/miniaudio.h	/^MA_API void ma_spatializer_listener_set_world_up(ma_spatializer_listener* pListener, float x, fl/;"	f
ma_spatializer_listener_uninit	../ext/miniaudio.h	/^MA_API void ma_spatializer_listener_uninit(ma_spatializer_listener* pListener, const ma_allocati/;"	f
ma_spatializer_process_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_spatializer_process_pcm_frames(ma_spatializer* pSpatializer, ma_spatializer_/;"	f
ma_spatializer_set_attenuation_model	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_attenuation_model(ma_spatializer* pSpatializer, ma_attenuation_mo/;"	f
ma_spatializer_set_cone	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_cone(ma_spatializer* pSpatializer, float innerAngleInRadians, flo/;"	f
ma_spatializer_set_direction	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_direction(ma_spatializer* pSpatializer, float x, float y, float z/;"	f
ma_spatializer_set_directional_attenuation_factor	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_directional_attenuation_factor(ma_spatializer* pSpatializer, floa/;"	f
ma_spatializer_set_doppler_factor	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_doppler_factor(ma_spatializer* pSpatializer, float dopplerFactor)/;"	f
ma_spatializer_set_max_distance	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_max_distance(ma_spatializer* pSpatializer, float maxDistance);$/;"	f
ma_spatializer_set_max_gain	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_max_gain(ma_spatializer* pSpatializer, float maxGain);$/;"	f
ma_spatializer_set_min_distance	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_min_distance(ma_spatializer* pSpatializer, float minDistance);$/;"	f
ma_spatializer_set_min_gain	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_min_gain(ma_spatializer* pSpatializer, float minGain);$/;"	f
ma_spatializer_set_position	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_position(ma_spatializer* pSpatializer, float x, float y, float z)/;"	f
ma_spatializer_set_positioning	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_positioning(ma_spatializer* pSpatializer, ma_positioning position/;"	f
ma_spatializer_set_rolloff	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_rolloff(ma_spatializer* pSpatializer, float rolloff);$/;"	f
ma_spatializer_set_velocity	../ext/miniaudio.h	/^MA_API void ma_spatializer_set_velocity(ma_spatializer* pSpatializer, float x, float y, float z)/;"	f
ma_spatializer_uninit	../ext/miniaudio.h	/^MA_API void ma_spatializer_uninit(ma_spatializer* pSpatializer, const ma_allocation_callbacks* p/;"	f
ma_spinlock	../ext/miniaudio.h	/^typedef ma_uint32 ma_spinlock;$/;"	t
ma_spinlock_lock	../ext/miniaudio.h	/^MA_API ma_result ma_spinlock_lock(volatile ma_spinlock* pSpinlock)$/;"	f
ma_spinlock_lock	../ext/miniaudio.h	/^MA_API ma_result ma_spinlock_lock(volatile ma_spinlock* pSpinlock);$/;"	f	struct:ma_resampler_config
ma_spinlock_lock_ex	../ext/miniaudio.h	/^static MA_INLINE ma_result ma_spinlock_lock_ex(volatile ma_spinlock* pSpinlock, ma_bool32 yield)$/;"	f
ma_spinlock_lock_noyield	../ext/miniaudio.h	/^MA_API ma_result ma_spinlock_lock_noyield(volatile ma_spinlock* pSpinlock)$/;"	f
ma_spinlock_lock_noyield	../ext/miniaudio.h	/^MA_API ma_result ma_spinlock_lock_noyield(volatile ma_spinlock* pSpinlock);$/;"	f	struct:ma_resampler_config
ma_spinlock_unlock	../ext/miniaudio.h	/^MA_API ma_result ma_spinlock_unlock(volatile ma_spinlock* pSpinlock)$/;"	f
ma_spinlock_unlock	../ext/miniaudio.h	/^MA_API ma_result ma_spinlock_unlock(volatile ma_spinlock* pSpinlock);$/;"	f	struct:ma_resampler_config
ma_splitter_node	../ext/miniaudio.h	/^} ma_splitter_node;$/;"	t
ma_splitter_node_config	../ext/miniaudio.h	/^} ma_splitter_node_config;$/;"	t
ma_splitter_node_config_init	../ext/miniaudio.h	/^MA_API ma_splitter_node_config ma_splitter_node_config_init(ma_uint32 channels);$/;"	f
ma_splitter_node_init	../ext/miniaudio.h	/^MA_API ma_result ma_splitter_node_init(ma_node_graph* pNodeGraph, const ma_splitter_node_config*/;"	f
ma_splitter_node_uninit	../ext/miniaudio.h	/^MA_API void ma_splitter_node_uninit(ma_splitter_node* pSplitterNode, const ma_allocation_callbac/;"	f
ma_sqrtd	../ext/miniaudio.h	/^static MA_INLINE double ma_sqrtd(double x)$/;"	f
ma_standard_channel_map	../ext/miniaudio.h	/^} ma_standard_channel_map;$/;"	t
ma_standard_channel_map_alsa	../ext/miniaudio.h	/^    ma_standard_channel_map_alsa,$/;"	e
ma_standard_channel_map_default	../ext/miniaudio.h	/^    ma_standard_channel_map_default = ma_standard_channel_map_microsoft$/;"	e
ma_standard_channel_map_flac	../ext/miniaudio.h	/^    ma_standard_channel_map_flac,$/;"	e
ma_standard_channel_map_microsoft	../ext/miniaudio.h	/^    ma_standard_channel_map_microsoft,$/;"	e
ma_standard_channel_map_rfc3551	../ext/miniaudio.h	/^    ma_standard_channel_map_rfc3551,   \/* Based off AIFF. *\/$/;"	e
ma_standard_channel_map_sndio	../ext/miniaudio.h	/^    ma_standard_channel_map_sndio,     \/* www.sndio.org\/tips.html *\/$/;"	e
ma_standard_channel_map_sound4	../ext/miniaudio.h	/^    ma_standard_channel_map_sound4,    \/* FreeBSD's sound(4). *\/$/;"	e
ma_standard_channel_map_vorbis	../ext/miniaudio.h	/^    ma_standard_channel_map_vorbis,$/;"	e
ma_standard_channel_map_webaudio	../ext/miniaudio.h	/^    ma_standard_channel_map_webaudio = ma_standard_channel_map_flac, \/* https:\/\/webaudio.gith/;"	e
ma_standard_sample_rate	../ext/miniaudio.h	/^} ma_standard_sample_rate;$/;"	t
ma_standard_sample_rate_11025	../ext/miniaudio.h	/^    ma_standard_sample_rate_11025  = 11250,$/;"	e
ma_standard_sample_rate_16000	../ext/miniaudio.h	/^    ma_standard_sample_rate_16000  = 16000,     \/* Extreme lows *\/$/;"	e
ma_standard_sample_rate_176400	../ext/miniaudio.h	/^    ma_standard_sample_rate_176400 = 176400,$/;"	e
ma_standard_sample_rate_192000	../ext/miniaudio.h	/^    ma_standard_sample_rate_192000 = 192000,$/;"	e
ma_standard_sample_rate_22050	../ext/miniaudio.h	/^    ma_standard_sample_rate_22050  = 22050,$/;"	e
ma_standard_sample_rate_24000	../ext/miniaudio.h	/^    ma_standard_sample_rate_24000  = 24000,$/;"	e
ma_standard_sample_rate_32000	../ext/miniaudio.h	/^    ma_standard_sample_rate_32000  = 32000,     \/* Lows *\/$/;"	e
ma_standard_sample_rate_352800	../ext/miniaudio.h	/^    ma_standard_sample_rate_352800 = 352800,    \/* Extreme highs *\/$/;"	e
ma_standard_sample_rate_384000	../ext/miniaudio.h	/^    ma_standard_sample_rate_384000 = 384000,$/;"	e
ma_standard_sample_rate_44100	../ext/miniaudio.h	/^    ma_standard_sample_rate_44100  = 44100,$/;"	e
ma_standard_sample_rate_48000	../ext/miniaudio.h	/^    ma_standard_sample_rate_48000  = 48000,     \/* Most common *\/$/;"	e
ma_standard_sample_rate_8000	../ext/miniaudio.h	/^    ma_standard_sample_rate_8000   = 8000,$/;"	e
ma_standard_sample_rate_88200	../ext/miniaudio.h	/^    ma_standard_sample_rate_88200  = 88200,     \/* Highs *\/$/;"	e
ma_standard_sample_rate_96000	../ext/miniaudio.h	/^    ma_standard_sample_rate_96000  = 96000,$/;"	e
ma_standard_sample_rate_count	../ext/miniaudio.h	/^    ma_standard_sample_rate_count  = 14         \/* Need to maintain the count manually. Make su/;"	e
ma_standard_sample_rate_max	../ext/miniaudio.h	/^    ma_standard_sample_rate_max    = ma_standard_sample_rate_384000,$/;"	e
ma_standard_sample_rate_min	../ext/miniaudio.h	/^    ma_standard_sample_rate_min    = ma_standard_sample_rate_8000,$/;"	e
ma_strappend	../ext/miniaudio.h	/^MA_API int ma_strappend(char* dst, size_t dstSize, const char* srcA, const char* srcB)$/;"	f
ma_strcat_s	../ext/miniaudio.h	/^MA_API int ma_strcat_s(char* dst, size_t dstSizeInBytes, const char* src)$/;"	f
ma_strcmp	../ext/miniaudio.h	/^MA_API int ma_strcmp(const char* str1, const char* str2)$/;"	f
ma_strcpy_s	../ext/miniaudio.h	/^MA_API int ma_strcpy_s(char* dst, size_t dstSizeInBytes, const char* src)$/;"	f
ma_stream_format	../ext/miniaudio.h	/^} ma_stream_format;$/;"	t
ma_stream_format_pcm	../ext/miniaudio.h	/^    ma_stream_format_pcm = 0$/;"	e
ma_stream_layout	../ext/miniaudio.h	/^} ma_stream_layout;$/;"	t
ma_stream_layout_deinterleaved	../ext/miniaudio.h	/^    ma_stream_layout_deinterleaved$/;"	e
ma_stream_layout_interleaved	../ext/miniaudio.h	/^    ma_stream_layout_interleaved = 0,$/;"	e
ma_strncat_s	../ext/miniaudio.h	/^MA_API int ma_strncat_s(char* dst, size_t dstSizeInBytes, const char* src, size_t count)$/;"	f
ma_strncpy_s	../ext/miniaudio.h	/^MA_API int ma_strncpy_s(char* dst, size_t dstSizeInBytes, const char* src, size_t count)$/;"	f
ma_swap_endian_uint32	../ext/miniaudio.h	/^static MA_INLINE ma_uint32 ma_swap_endian_uint32(ma_uint32 n)$/;"	f
ma_thread	../ext/miniaudio.h	/^typedef ma_handle ma_thread;$/;"	t
ma_thread	../ext/miniaudio.h	/^typedef ma_pthread_t ma_thread;$/;"	t
ma_thread_create	../ext/miniaudio.h	/^static ma_result ma_thread_create(ma_thread* pThread, ma_thread_priority priority, size_t stackS/;"	f
ma_thread_create__posix	../ext/miniaudio.h	/^static ma_result ma_thread_create__posix(ma_thread* pThread, ma_thread_priority priority, size_t/;"	f
ma_thread_create__win32	../ext/miniaudio.h	/^static ma_result ma_thread_create__win32(ma_thread* pThread, ma_thread_priority priority, size_t/;"	f
ma_thread_entry_proxy	../ext/miniaudio.h	/^static ma_thread_result MA_THREADCALL ma_thread_entry_proxy(void* pData)$/;"	f
ma_thread_priority	../ext/miniaudio.h	/^} ma_thread_priority;$/;"	t
ma_thread_priority_default	../ext/miniaudio.h	/^    ma_thread_priority_default  =  0$/;"	e
ma_thread_priority_high	../ext/miniaudio.h	/^    ma_thread_priority_high     = -1,$/;"	e
ma_thread_priority_highest	../ext/miniaudio.h	/^    ma_thread_priority_highest  =  0,$/;"	e
ma_thread_priority_idle	../ext/miniaudio.h	/^    ma_thread_priority_idle     = -5,$/;"	e
ma_thread_priority_low	../ext/miniaudio.h	/^    ma_thread_priority_low      = -3,$/;"	e
ma_thread_priority_lowest	../ext/miniaudio.h	/^    ma_thread_priority_lowest   = -4,$/;"	e
ma_thread_priority_normal	../ext/miniaudio.h	/^    ma_thread_priority_normal   = -2,$/;"	e
ma_thread_priority_realtime	../ext/miniaudio.h	/^    ma_thread_priority_realtime =  1,$/;"	e
ma_thread_priority_to_win32	../ext/miniaudio.h	/^static int ma_thread_priority_to_win32(ma_thread_priority priority)$/;"	f
ma_thread_proxy_data	../ext/miniaudio.h	/^} ma_thread_proxy_data;$/;"	t
ma_thread_result	../ext/miniaudio.h	/^    typedef unsigned long ma_thread_result;$/;"	t
ma_thread_result	../ext/miniaudio.h	/^    typedef void* ma_thread_result;$/;"	t
ma_thread_wait	../ext/miniaudio.h	/^static void ma_thread_wait(ma_thread* pThread)$/;"	f
ma_thread_wait__posix	../ext/miniaudio.h	/^static void ma_thread_wait__posix(ma_thread* pThread)$/;"	f
ma_thread_wait__win32	../ext/miniaudio.h	/^static void ma_thread_wait__win32(ma_thread* pThread)$/;"	f
ma_timer_get_time_in_seconds	../ext/miniaudio.h	/^        static double ma_timer_get_time_in_seconds(ma_timer* pTimer)$/;"	f
ma_timer_get_time_in_seconds	../ext/miniaudio.h	/^    double ma_timer_get_time_in_seconds(ma_timer* pTimer)$/;"	f
ma_timer_get_time_in_seconds	../ext/miniaudio.h	/^    static MA_INLINE double ma_timer_get_time_in_seconds(ma_timer* pTimer)$/;"	f
ma_timer_get_time_in_seconds	../ext/miniaudio.h	/^    static double ma_timer_get_time_in_seconds(ma_timer* pTimer)$/;"	f
ma_timer_init	../ext/miniaudio.h	/^        static void ma_timer_init(ma_timer* pTimer)$/;"	f
ma_timer_init	../ext/miniaudio.h	/^    static MA_INLINE void ma_timer_init(ma_timer* pTimer)$/;"	f
ma_timer_init	../ext/miniaudio.h	/^    static void ma_timer_init(ma_timer* pTimer)$/;"	f
ma_timer_init	../ext/miniaudio.h	/^    void ma_timer_init(ma_timer* pTimer)$/;"	f
ma_uint16	../ext/miniaudio.h	/^    typedef uint16_t ma_uint16;$/;"	t
ma_uint16	../ext/miniaudio.h	/^    typedef unsigned short          ma_uint16;$/;"	t
ma_uint32	../ext/miniaudio.h	/^    typedef uint32_t ma_uint32;$/;"	t
ma_uint32	../ext/miniaudio.h	/^    typedef unsigned int            ma_uint32;$/;"	t
ma_uint64	../ext/miniaudio.h	/^        typedef unsigned __int64    ma_uint64;$/;"	t
ma_uint64	../ext/miniaudio.h	/^        typedef unsigned long long  ma_uint64;$/;"	t
ma_uint64	../ext/miniaudio.h	/^    ma_uint64 (* onGetInputLatency            )(void* pUserData, const ma_resampling_backend* pB/;"	E
ma_uint64	../ext/miniaudio.h	/^    ma_uint64 (* onGetOutputLatency           )(void* pUserData, const ma_resampling_backend* pB/;"	E
ma_uint64	../ext/miniaudio.h	/^    typedef uint64_t ma_uint64;$/;"	t
ma_uint8	../ext/miniaudio.h	/^    typedef uint8_t  ma_uint8;$/;"	t
ma_uint8	../ext/miniaudio.h	/^    typedef unsigned char           ma_uint8;$/;"	t
ma_uintptr	../ext/miniaudio.h	/^    typedef ma_uint32           ma_uintptr;$/;"	t
ma_uintptr	../ext/miniaudio.h	/^    typedef ma_uint64           ma_uintptr;$/;"	t
ma_vec3f	../ext/miniaudio.h	/^} ma_vec3f;$/;"	t
ma_version	../ext/miniaudio.h	/^MA_API void ma_version(ma_uint32* pMajor, ma_uint32* pMinor, ma_uint32* pRevision)$/;"	f
ma_version	../ext/miniaudio.h	/^MA_API void ma_version(ma_uint32* pMajor, ma_uint32* pMinor, ma_uint32* pRevision);$/;"	f
ma_version_string	../ext/miniaudio.h	/^MA_API const char* ma_version_string(void)$/;"	f
ma_version_string	../ext/miniaudio.h	/^MA_API const char* ma_version_string(void);$/;"	f
ma_vfs	../ext/miniaudio.h	/^typedef void      ma_vfs;$/;"	t	struct:ma_paged_audio_buffer_page
ma_vfs_callbacks	../ext/miniaudio.h	/^} ma_vfs_callbacks;$/;"	t	struct:ma_paged_audio_buffer_page
ma_vfs_close	../ext/miniaudio.h	/^MA_API ma_result ma_vfs_close(ma_vfs* pVFS, ma_vfs_file file);$/;"	f	struct:ma_paged_audio_buffer_page
ma_vfs_file	../ext/miniaudio.h	/^typedef ma_handle ma_vfs_file;$/;"	t	struct:ma_paged_audio_buffer_page
ma_vfs_info	../ext/miniaudio.h	/^MA_API ma_result ma_vfs_info(ma_vfs* pVFS, ma_vfs_file file, ma_file_info* pInfo);$/;"	f	struct:ma_paged_audio_buffer_page
ma_vfs_open	../ext/miniaudio.h	/^MA_API ma_result ma_vfs_open(ma_vfs* pVFS, const char* pFilePath, ma_uint32 openMode, ma_vfs_fil/;"	f	struct:ma_paged_audio_buffer_page
ma_vfs_open_and_read_file	../ext/miniaudio.h	/^MA_API ma_result ma_vfs_open_and_read_file(ma_vfs* pVFS, const char* pFilePath, void** ppData, s/;"	f	struct:ma_paged_audio_buffer_page
ma_vfs_open_w	../ext/miniaudio.h	/^MA_API ma_result ma_vfs_open_w(ma_vfs* pVFS, const wchar_t* pFilePath, ma_uint32 openMode, ma_vf/;"	f	struct:ma_paged_audio_buffer_page
ma_vfs_read	../ext/miniaudio.h	/^MA_API ma_result ma_vfs_read(ma_vfs* pVFS, ma_vfs_file file, void* pDst, size_t sizeInBytes, siz/;"	f	struct:ma_paged_audio_buffer_page
ma_vfs_seek	../ext/miniaudio.h	/^MA_API ma_result ma_vfs_seek(ma_vfs* pVFS, ma_vfs_file file, ma_int64 offset, ma_seek_origin ori/;"	f	struct:ma_paged_audio_buffer_page
ma_vfs_tell	../ext/miniaudio.h	/^MA_API ma_result ma_vfs_tell(ma_vfs* pVFS, ma_vfs_file file, ma_int64* pCursor);$/;"	f	struct:ma_paged_audio_buffer_page
ma_vfs_write	../ext/miniaudio.h	/^MA_API ma_result ma_vfs_write(ma_vfs* pVFS, ma_vfs_file file, const void* pSrc, size_t sizeInByt/;"	f	struct:ma_paged_audio_buffer_page
ma_volume_db_to_linear	../ext/miniaudio.h	/^MA_API float ma_volume_db_to_linear(float gain);$/;"	f	struct:ma_device
ma_volume_linear_to_db	../ext/miniaudio.h	/^MA_API float ma_volume_linear_to_db(float factor);$/;"	f	struct:ma_device
ma_vscprintf	../ext/miniaudio.h	/^static int ma_vscprintf(const ma_allocation_callbacks* pAllocationCallbacks, const char* format,/;"	f
ma_waveform	../ext/miniaudio.h	/^} ma_waveform;$/;"	t	struct:ma_encoder
ma_waveform_config	../ext/miniaudio.h	/^} ma_waveform_config;$/;"	t	struct:ma_encoder
ma_waveform_config_init	../ext/miniaudio.h	/^MA_API ma_waveform_config ma_waveform_config_init(ma_format format, ma_uint32 channels, ma_uint3/;"	f	struct:ma_encoder
ma_waveform_init	../ext/miniaudio.h	/^MA_API ma_result ma_waveform_init(const ma_waveform_config* pConfig, ma_waveform* pWaveform);$/;"	f	struct:ma_encoder
ma_waveform_read_pcm_frames	../ext/miniaudio.h	/^MA_API ma_result ma_waveform_read_pcm_frames(ma_waveform* pWaveform, void* pFramesOut, ma_uint64/;"	f	struct:ma_encoder
ma_waveform_seek_to_pcm_frame	../ext/miniaudio.h	/^MA_API ma_result ma_waveform_seek_to_pcm_frame(ma_waveform* pWaveform, ma_uint64 frameIndex);$/;"	f	struct:ma_encoder
ma_waveform_set_amplitude	../ext/miniaudio.h	/^MA_API ma_result ma_waveform_set_amplitude(ma_waveform* pWaveform, double amplitude);$/;"	f	struct:ma_encoder
ma_waveform_set_frequency	../ext/miniaudio.h	/^MA_API ma_result ma_waveform_set_frequency(ma_waveform* pWaveform, double frequency);$/;"	f	struct:ma_encoder
ma_waveform_set_sample_rate	../ext/miniaudio.h	/^MA_API ma_result ma_waveform_set_sample_rate(ma_waveform* pWaveform, ma_uint32 sampleRate);$/;"	f	struct:ma_encoder
ma_waveform_set_type	../ext/miniaudio.h	/^MA_API ma_result ma_waveform_set_type(ma_waveform* pWaveform, ma_waveform_type type);$/;"	f	struct:ma_encoder
ma_waveform_type	../ext/miniaudio.h	/^} ma_waveform_type;$/;"	t	struct:ma_encoder
ma_waveform_type_sawtooth	../ext/miniaudio.h	/^    ma_waveform_type_sawtooth$/;"	e	struct:ma_encoder
ma_waveform_type_sine	../ext/miniaudio.h	/^    ma_waveform_type_sine,$/;"	e	struct:ma_encoder
ma_waveform_type_square	../ext/miniaudio.h	/^    ma_waveform_type_square,$/;"	e	struct:ma_encoder
ma_waveform_type_triangle	../ext/miniaudio.h	/^    ma_waveform_type_triangle,$/;"	e	struct:ma_encoder
ma_waveform_uninit	../ext/miniaudio.h	/^MA_API void ma_waveform_uninit(ma_waveform* pWaveform);$/;"	f	struct:ma_encoder
ma_wcscpy_s	../ext/miniaudio.h	/^MA_API int ma_wcscpy_s(wchar_t* dst, size_t dstCap, const wchar_t* src)$/;"	f
ma_wfopen	../ext/miniaudio.h	/^MA_API ma_result ma_wfopen(FILE** ppFile, const wchar_t* pFilePath, const wchar_t* pOpenMode, co/;"	f
ma_xgetbv	../ext/miniaudio.h	/^            static MA_INLINE unsigned __int64 ma_xgetbv(int reg)$/;"	f
ma_xgetbv	../ext/miniaudio.h	/^        static MA_INLINE ma_uint64 ma_xgetbv(int reg)$/;"	f
ma_yield	../ext/miniaudio.h	/^static MA_INLINE void ma_yield()$/;"	f
ma_zero_memory_64	../ext/miniaudio.h	/^static MA_INLINE void ma_zero_memory_64(void* dst, ma_uint64 sizeInBytes)$/;"	f
masterVolumeFactor	../ext/miniaudio.h	/^    MA_ATOMIC(4, float) masterVolumeFactor;     \/* Linear 0..1. Can be read and written simulta/;"	E	struct:ma_device
maxDistance	../ext/miniaudio.h	/^    float maxDistance;$/;"	E
maxGain	../ext/miniaudio.h	/^    float maxGain;$/;"	E
minDistance	../ext/miniaudio.h	/^    float minDistance;$/;"	E
minGain	../ext/miniaudio.h	/^    float minGain;$/;"	E
miniaudio_c	../ext/miniaudio.h	/^#define miniaudio_c$/;"	M
miniaudio_h	../ext/miniaudio.h	/^#define miniaudio_h$/;"	M
mixingMode	../ext/miniaudio.h	/^    ma_channel_mix_mode mixingMode;$/;"	E	struct:ma_resampler_config
mode	../ext/miniaudio.h	/^    ma_pan_mode mode;$/;"	E
monoExpansionMode	../ext/miniaudio.h	/^    ma_mono_expansion_mode monoExpansionMode;   \/* Controls how the mono channel should be expa/;"	E	struct:ma_sound_inlined
name	../ext/miniaudio.h	/^    char name[MA_MAX_DEVICE_NAME_LENGTH + 1];   \/* +1 for null terminator. *\/$/;"	E
nativeDataFormatCount	../ext/miniaudio.h	/^    ma_uint32 nativeDataFormatCount;$/;"	E
nativeDataFormats	../ext/miniaudio.h	/^    } nativeDataFormats[\/*ma_format_count * ma_standard_sample_rate_count * MA_MAX_CHANNELS*\/ /;"	E
next	../ext/miniaudio.h	/^    MA_ATOMIC(8, ma_uint64) next; \/* refcount + slot for the next item. Does not include the jo/;"	E	struct:ma_job
nextCounter	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) nextCounter;    \/* This is used to determine whether or not the inp/;"	E	struct:ma_node_input_bus
noAutoConvertSRC	../ext/miniaudio.h	/^    ma_bool32 noAutoConvertSRC;$/;"	E	struct:ma_completion_handler_uwp
noAutoStart	../ext/miniaudio.h	/^    ma_bool32 noAutoStart;                      \/* When set to true, requires an explicit call /;"	E	struct:ma_sound_inlined
noClip	../ext/miniaudio.h	/^    ma_bool8 noClip;                    \/* When set to true, the contents of the output buffer /;"	E	struct:ma_device_config
noClip	../ext/miniaudio.h	/^    ma_bool8 noClip;$/;"	E	struct:ma_device
noDefaultQualitySRC	../ext/miniaudio.h	/^    ma_bool32 noDefaultQualitySRC;$/;"	E	struct:ma_completion_handler_uwp
noDevice	../ext/miniaudio.h	/^    ma_bool32 noDevice;                         \/* When set to true, don't create a default dev/;"	E	struct:ma_sound_inlined
noDisableDenormals	../ext/miniaudio.h	/^    ma_bool8 noDisableDenormals;        \/* Do not disable denormals when firing the data callba/;"	E	struct:ma_device_config
noDisableDenormals	../ext/miniaudio.h	/^    ma_bool8 noDisableDenormals;$/;"	E	struct:ma_device
noFixedSizedCallback	../ext/miniaudio.h	/^    ma_bool8 noFixedSizedCallback;      \/* Disables strict fixed-sized data callbacks. Setting /;"	E	struct:ma_device_config
noFixedSizedCallback	../ext/miniaudio.h	/^    ma_bool8 noFixedSizedCallback;$/;"	E	struct:ma_device
noHardwareOffloading	../ext/miniaudio.h	/^    ma_bool32 noHardwareOffloading;$/;"	E	struct:ma_completion_handler_uwp
noPreSilencedOutputBuffer	../ext/miniaudio.h	/^    ma_bool8 noPreSilencedOutputBuffer; \/* When set to true, the contents of the output buffer /;"	E	struct:ma_device_config
noPreSilencedOutputBuffer	../ext/miniaudio.h	/^    ma_bool8 noPreSilencedOutputBuffer;$/;"	E	struct:ma_device
noThread	../ext/miniaudio.h	/^    ma_bool32 noThread; \/* Set this to true if you want to process jobs yourself. *\/$/;"	E	struct:ma_job
nodeCacheCapInFrames	../ext/miniaudio.h	/^    ma_uint16 nodeCacheCapInFrames;$/;"	E	struct:ma_node_base
nodeConfig	../ext/miniaudio.h	/^    ma_node_config nodeConfig;$/;"	E
notch	../ext/miniaudio.h	/^    ma_notch2 notch;$/;"	E
notch	../ext/miniaudio.h	/^    ma_notch_config notch;$/;"	E
notificationCallback	../ext/miniaudio.h	/^    ma_device_notification_proc notificationCallback;$/;"	E	struct:ma_device_config
oldDopplerPitch	../ext/miniaudio.h	/^    float oldDopplerPitch;                              \/* For determining whether or not the r/;"	E
oldPitch	../ext/miniaudio.h	/^    float oldPitch;                                     \/* For determining whether or not the r/;"	E
onData	../ext/miniaudio.h	/^    ma_device_data_proc onData;                 \/* Set once at initialization time and should n/;"	E	struct:ma_device
onGetNext	../ext/miniaudio.h	/^    ma_data_source_get_next_proc onGetNext; \/* Will be used when pNext is NULL. If both are NUL/;"	E	struct:ma_device
onInit	../ext/miniaudio.h	/^    ma_encoder_init_proc onInit;$/;"	E	struct:ma_encoder
onLog	../ext/miniaudio.h	/^    ma_log_callback_proc onLog;$/;"	E
onNotification	../ext/miniaudio.h	/^    ma_device_notification_proc onNotification; \/* Set once at initialization time and should n/;"	E	struct:ma_device
onRead	../ext/miniaudio.h	/^    ma_decoder_read_proc onRead;$/;"	E	struct:ma_decoder
onSeek	../ext/miniaudio.h	/^    ma_decoder_seek_proc onSeek;$/;"	E	struct:ma_decoder
onSeek	../ext/miniaudio.h	/^    ma_encoder_seek_proc onSeek;$/;"	E	struct:ma_encoder
onStop	../ext/miniaudio.h	/^    ma_stop_proc onStop;                        \/* DEPRECATED. Use the notification callback in/;"	E	struct:ma_device
onTell	../ext/miniaudio.h	/^    ma_decoder_tell_proc onTell;$/;"	E	struct:ma_decoder
onUninit	../ext/miniaudio.h	/^    ma_encoder_uninit_proc onUninit;$/;"	E	struct:ma_encoder
onWrite	../ext/miniaudio.h	/^    ma_encoder_write_proc onWrite;$/;"	E	struct:ma_encoder
onWritePCMFrames	../ext/miniaudio.h	/^    ma_encoder_write_pcm_frames_proc onWritePCMFrames;$/;"	E	struct:ma_encoder
opensl	../ext/miniaudio.h	/^    } opensl;$/;"	E	struct:ma_device_config
order	../ext/miniaudio.h	/^    ma_uint32 order;    \/* Execution order. Used to create a data dependency and ensure a job i/;"	E	struct:ma_job
order	../ext/miniaudio.h	/^    ma_uint32 order;    \/* If set to 0, will be treated as a passthrough (no filtering will be /;"	E
origin	../ext/miniaudio.h	/^typedef ma_result (* ma_decoder_seek_proc)(ma_decoder* pDecoder, ma_int64 byteOffset, ma_seek_or/;"	t
origin	../ext/miniaudio.h	/^typedef ma_result (* ma_encoder_seek_proc)            (ma_encoder* pEncoder, ma_int64 offset, ma/;"	t
origin	../ext/miniaudio.h	/^typedef ma_result (* ma_seek_proc)(void* pUserData, ma_int64 offset, ma_seek_origin origin);$/;"	t	struct:ma_paged_audio_buffer_page
outputBusCount	../ext/miniaudio.h	/^    ma_uint32 outputBusCount;           \/* Only used if the vtable specifies an output bus coun/;"	E
outputBusCount	../ext/miniaudio.h	/^    ma_uint32 outputBusCount;$/;"	E	struct:ma_node_base
outputBusCount	../ext/miniaudio.h	/^    ma_uint8 outputBusCount;$/;"	E
outputBusIndex	../ext/miniaudio.h	/^    ma_uint8 outputBusIndex;                                \/* The index of the output bus on p/;"	E	struct:ma_node_output_bus
outputChannels	../ext/miniaudio.h	/^    ma_uint32 outputChannels;$/;"	E	struct:ma_decoder
outputFormat	../ext/miniaudio.h	/^    ma_format outputFormat;$/;"	E	struct:ma_decoder
outputSampleRate	../ext/miniaudio.h	/^    ma_uint32 outputSampleRate;$/;"	E	struct:ma_decoder
ownsBuffer	../ext/miniaudio.h	/^    ma_bool8 ownsBuffer;                        \/* Used to know whether or not miniaudio is res/;"	E	struct:ma_resampler_config
ownsData	../ext/miniaudio.h	/^    ma_bool32 ownsData;             \/* Used to control whether or not miniaudio owns the data b/;"	E	struct:ma_device
ownsDataSource	../ext/miniaudio.h	/^    ma_bool8 ownsDataSource;$/;"	E	struct:ma_sound
pAudioClient	../ext/miniaudio.h	/^    ma_IAudioClient* pAudioClient;$/;"	E	struct:ma_completion_handler_uwp
pAudioData	../ext/miniaudio.h	/^    ma_uint8 pAudioData[1];$/;"	E	struct:ma_paged_audio_buffer_page
pBPF2	../ext/miniaudio.h	/^    ma_bpf2* pBPF2;$/;"	E
pBackend	../ext/miniaudio.h	/^    ma_data_source* pBackend;                   \/* The decoding backend we'll be pulling data f/;"	E	struct:ma_decoder
pBackend	../ext/miniaudio.h	/^    ma_resampling_backend* pBackend;$/;"	E	struct:ma_resampler_config
pBackendUserData	../ext/miniaudio.h	/^    void* pBackendUserData;$/;"	E	struct:ma_decoder
pBackendUserData	../ext/miniaudio.h	/^    void* pBackendUserData;$/;"	E	struct:ma_resampler_config
pBackendVTable	../ext/miniaudio.h	/^    const ma_decoding_backend_vtable* pBackendVTable; \/* The vtable for the decoding backend. T/;"	E	struct:ma_decoder
pBackendVTable	../ext/miniaudio.h	/^    ma_resampling_backend_vtable* pBackendVTable;$/;"	E	struct:ma_resampler_config
pBuffer	../ext/miniaudio.h	/^    float* pBuffer;$/;"	E
pBuffer	../ext/miniaudio.h	/^    void* pBuffer;$/;"	E	struct:ma_resampler_config
pBytesRead	../ext/miniaudio.h	/^typedef ma_result (* ma_decoder_read_proc)(ma_decoder* pDecoder, void* pBufferOut, size_t bytesT/;"	t
pBytesRead	../ext/miniaudio.h	/^typedef ma_result (* ma_read_proc)(void* pUserData, void* pBufferOut, size_t bytesToRead, size_t/;"	t	struct:ma_paged_audio_buffer_page
pBytesWritten	../ext/miniaudio.h	/^typedef ma_result (* ma_encoder_write_proc)           (ma_encoder* pEncoder, const void* pBuffer/;"	t
pCachedData	../ext/miniaudio.h	/^    float* pCachedData;                     \/* Allocated on the heap. Fixed size. Needs to be s/;"	E	struct:ma_node_base
pCaptureClient	../ext/miniaudio.h	/^    ma_IAudioCaptureClient* pCaptureClient;$/;"	E	struct:ma_completion_handler_uwp
pChannelMap	../ext/miniaudio.h	/^    ma_channel* pChannelMap;$/;"	E
pChannelMapIn	../ext/miniaudio.h	/^    const ma_channel* pChannelMapIn;$/;"	E	struct:ma_resampler_config
pChannelMapIn	../ext/miniaudio.h	/^    ma_channel* pChannelMapIn;$/;"	E
pChannelMapIn	../ext/miniaudio.h	/^    ma_channel* pChannelMapIn;$/;"	E	struct:ma_resampler_config
pChannelMapOut	../ext/miniaudio.h	/^    const ma_channel* pChannelMapOut;$/;"	E	struct:ma_resampler_config
pChannelMapOut	../ext/miniaudio.h	/^    ma_channel* pChannelMapOut;$/;"	E
pChannelMapOut	../ext/miniaudio.h	/^    ma_channel* pChannelMapOut;$/;"	E	struct:ma_resampler_config
pChildHi	../ext/miniaudio.h	/^    ma_resource_manager_data_buffer_node* pChildHi;$/;"	E	struct:ma_resource_manager_data_buffer_node
pChildLo	../ext/miniaudio.h	/^    ma_resource_manager_data_buffer_node* pChildLo;$/;"	E	struct:ma_resource_manager_data_buffer_node
pContext	../ext/miniaudio.h	/^    ma_context* pContext;$/;"	E	struct:ma_IDirectSoundNotify
pContext	../ext/miniaudio.h	/^    ma_context* pContext;$/;"	E	struct:ma_device
pContext	../ext/miniaudio.h	/^    ma_context* pContext;$/;"	E	struct:ma_sound_inlined
pContext	../ext/miniaudio.h	/^typedef BOOL    (CALLBACK * ma_DSEnumCallbackAProc)             (LPGUID pDeviceGUID, LPCSTR pDev/;"	t	struct:ma_IDirectSoundNotify
pContext	../ext/miniaudio.h	/^typedef HRESULT (WINAPI   * ma_DirectSoundCaptureEnumerateAProc)(ma_DSEnumCallbackAProc pDSEnumC/;"	t	struct:ma_IDirectSoundNotify
pContext	../ext/miniaudio.h	/^typedef HRESULT (WINAPI   * ma_DirectSoundEnumerateAProc)       (ma_DSEnumCallbackAProc pDSEnumC/;"	t	struct:ma_IDirectSoundNotify
pCurrent	../ext/miniaudio.h	/^    ma_data_source* pCurrent;               \/* When non-NULL, the data source being initialized/;"	E	struct:ma_device
pCurrent	../ext/miniaudio.h	/^    ma_paged_audio_buffer_page* pCurrent;$/;"	E	struct:ma_paged_audio_buffer_page
pCursor	../ext/miniaudio.h	/^typedef ma_result (* ma_decoder_tell_proc)(ma_decoder* pDecoder, ma_int64* pCursor);$/;"	t
pCursor	../ext/miniaudio.h	/^typedef ma_result (* ma_tell_proc)(void* pUserData, ma_int64* pCursor);$/;"	t	struct:ma_paged_audio_buffer_page
pCustomBackendUserData	../ext/miniaudio.h	/^    void* pCustomBackendUserData;$/;"	E
pCustomDecodingBackendUserData	../ext/miniaudio.h	/^    void* pCustomDecodingBackendUserData;$/;"	E
pData	../ext/miniaudio.h	/^    const void* pData;  \/* If set to NULL, will allocate a block of memory for you. *\/$/;"	E	struct:ma_device
pData	../ext/miniaudio.h	/^    const void* pData;$/;"	E	struct:ma_device
pData	../ext/miniaudio.h	/^    ma_paged_audio_buffer_data* pData;              \/* Audio data is read from here. Cannot be /;"	E	struct:ma_paged_audio_buffer_page
pData	../ext/miniaudio.h	/^    ma_paged_audio_buffer_data* pData;  \/* Must not be null. *\/$/;"	E	struct:ma_paged_audio_buffer_page
pData	../ext/miniaudio.h	/^    void* pData;$/;"	E
pData	../ext/miniaudio.h	/^typedef ma_thread_result (MA_THREADCALL * ma_thread_entry_proc)(void* pData);$/;"	t
pDataSource	../ext/miniaudio.h	/^    ma_data_source* pDataSource;                \/* Set this to load from an existing data sourc/;"	E
pDataSource	../ext/miniaudio.h	/^    ma_data_source* pDataSource;$/;"	E
pDataSource	../ext/miniaudio.h	/^    ma_data_source* pDataSource;$/;"	E	struct:ma_sound
pDataSource	../ext/miniaudio.h	/^typedef ma_data_source* (* ma_data_source_get_next_proc)(ma_data_source* pDataSource);$/;"	t	struct:ma_device
pDevice	../ext/miniaudio.h	/^    ma_device* pDevice;                         \/* If set, the caller is responsible for callin/;"	E	struct:ma_sound_inlined
pDevice	../ext/miniaudio.h	/^    ma_device* pDevice;$/;"	E	struct:ma_job
pDevice	../ext/miniaudio.h	/^typedef void (* ma_stop_proc)(ma_device* pDevice);  \/* DEPRECATED. Use ma_device_notification_p/;"	t	struct:ma_job
pDeviceID	../ext/miniaudio.h	/^    const ma_device_id* pDeviceID;$/;"	E	struct:ma_IDirectSoundNotify
pDeviceID	../ext/miniaudio.h	/^    const ma_device_id* pDeviceID;$/;"	E	struct:ma_device_config
pDeviceInfo	../ext/miniaudio.h	/^    ma_device_info* pDeviceInfo;$/;"	E	struct:ma_IDirectSoundNotify
pDoneFence	../ext/miniaudio.h	/^    ma_fence* pDoneFence;                       \/* Released when the resource manager has finis/;"	E
pEncoder	../ext/miniaudio.h	/^typedef ma_result (* ma_encoder_init_proc)            (ma_encoder* pEncoder);$/;"	t
pEncoder	../ext/miniaudio.h	/^typedef void      (* ma_encoder_uninit_proc)          (ma_encoder* pEncoder);$/;"	t
pEngine	../ext/miniaudio.h	/^    ma_engine* pEngine;                                 \/* A pointer to the engine. Set based o/;"	E
pEngine	../ext/miniaudio.h	/^    ma_engine* pEngine;$/;"	E
pEvent	../ext/miniaudio.h	/^    ma_event* pEvent;   \/* This will be signalled when the event is complete. *\/$/;"	E	struct:ma_context_config
pFence	../ext/miniaudio.h	/^    ma_fence* pFence;$/;"	E
pFilePath	../ext/miniaudio.h	/^    const char* pFilePath;                      \/* Set this to load from the resource manager. /;"	E
pFilePath	../ext/miniaudio.h	/^    const char* pFilePath;$/;"	E
pFilePathW	../ext/miniaudio.h	/^    const wchar_t* pFilePathW;                  \/* Set this to load from the resource manager. /;"	E
pFilePathW	../ext/miniaudio.h	/^    const wchar_t* pFilePathW;$/;"	E
pFramesWritten	../ext/miniaudio.h	/^typedef ma_result (* ma_encoder_write_pcm_frames_proc)(ma_encoder* pEncoder, const void* pFrames/;"	t
pGroups	../ext/miniaudio.h	/^    ma_slot_allocator_group* pGroups;   \/* Slots are grouped in chunks of 32. *\/$/;"	E	struct:ma_resampler_config
pHPF1	../ext/miniaudio.h	/^    ma_hpf1* pHPF1;$/;"	E
pHPF2	../ext/miniaudio.h	/^    ma_hpf2* pHPF2;$/;"	E
pInitialAttachment	../ext/miniaudio.h	/^    ma_node* pInitialAttachment;                \/* If set, the sound will be attached to an inp/;"	E
pInputBuses	../ext/miniaudio.h	/^    ma_node_input_bus* pInputBuses;$/;"	E	struct:ma_node_base
pInputCache	../ext/miniaudio.h	/^    void* pInputCache;              \/* In input format. Can be null if it's not needed. *\/$/;"	E	struct:ma_decoder
pInputChannels	../ext/miniaudio.h	/^    const ma_uint32* pInputChannels;    \/* The number of elements are determined by the input b/;"	E
pInputNode	../ext/miniaudio.h	/^    MA_ATOMIC(MA_SIZEOF_PTR, ma_node*) pInputNode;          \/* The node that this output bus is/;"	E	struct:ma_node_output_bus
pInternalEncoder	../ext/miniaudio.h	/^    void* pInternalEncoder; \/* <-- The drwav\/drflac\/stb_vorbis\/etc. objects. *\/$/;"	E	struct:ma_encoder
pJob	../ext/miniaudio.h	/^typedef ma_result (* ma_job_proc)(ma_job* pJob);$/;"	t
pJobs	../ext/miniaudio.h	/^    ma_job* pJobs;$/;"	E	struct:ma_job
pLPF1	../ext/miniaudio.h	/^    ma_lpf1* pLPF1;$/;"	E
pLPF2	../ext/miniaudio.h	/^    ma_lpf2* pLPF2;$/;"	E
pLog	../ext/miniaudio.h	/^    ma_log* pLog;                               \/* When set to NULL, will use the context's log/;"	E	struct:ma_sound_inlined
pLog	../ext/miniaudio.h	/^    ma_log* pLog;$/;"	E
pLog	../ext/miniaudio.h	/^    ma_log* pLog;$/;"	E	struct:ma_context_config
pMessage	../ext/miniaudio.h	/^typedef void (* ma_log_callback_proc)(void* pUserData, ma_uint32 level, const char* pMessage);$/;"	t
pNewChannelGainsOut	../ext/miniaudio.h	/^    float* pNewChannelGainsOut; \/* An offset of _pHeap. Used by ma_spatializer_process_pcm_fram/;"	E
pNewGains	../ext/miniaudio.h	/^    float* pNewGains;$/;"	E
pNext	../ext/miniaudio.h	/^    MA_ATOMIC(MA_SIZEOF_PTR, ma_node_output_bus*) pNext;    \/* If null, it's the tail node or d/;"	E	struct:ma_node_output_bus
pNext	../ext/miniaudio.h	/^    MA_ATOMIC(MA_SIZEOF_PTR, ma_paged_audio_buffer_page*) pNext;$/;"	E	struct:ma_paged_audio_buffer_page
pNext	../ext/miniaudio.h	/^    ma_data_source* pNext;                  \/* When set to NULL, onGetNext will be used. *\/$/;"	E	struct:ma_device
pNext	../ext/miniaudio.h	/^    ma_sound_inlined* pNext;$/;"	E	struct:ma_sound_inlined
pNode	../ext/miniaudio.h	/^    ma_node* pNode;                                         \/* The node that owns this output b/;"	E	struct:ma_node_output_bus
pNodeGraph	../ext/miniaudio.h	/^    ma_node_graph* pNodeGraph;  \/* The graph this node belongs to. *\/$/;"	E	struct:ma_node_base
pNotification	../ext/miniaudio.h	/^    ma_async_notification* pNotification;$/;"	E
pNotification	../ext/miniaudio.h	/^typedef void (* ma_device_notification_proc)(const ma_device_notification* pNotification);$/;"	t	struct:ma_job
pNotifications	../ext/miniaudio.h	/^    const ma_resource_manager_pipeline_notifications* pNotifications;$/;"	E
pOldGains	../ext/miniaudio.h	/^    float* pOldGains;$/;"	E
pOutputBuses	../ext/miniaudio.h	/^    ma_node_output_bus* pOutputBuses;$/;"	E	struct:ma_node_base
pOutputChannels	../ext/miniaudio.h	/^    const ma_uint32* pOutputChannels;   \/* The number of elements are determined by the output /;"	E
pPageData	../ext/miniaudio.h	/^    void* pPageData;                            \/* Buffer containing the decoded data of each p/;"	E	struct:ma_resource_manager_data_stream
pParent	../ext/miniaudio.h	/^    ma_resource_manager_data_buffer_node* pParent;$/;"	E	struct:ma_resource_manager_data_buffer_node
pPlaybackDeviceID	../ext/miniaudio.h	/^    ma_device_id* pPlaybackDeviceID;            \/* The ID of the playback device to use with th/;"	E	struct:ma_sound_inlined
pPrev	../ext/miniaudio.h	/^    MA_ATOMIC(MA_SIZEOF_PTR, ma_node_output_bus*) pPrev;    \/* If null, it's the head node or d/;"	E	struct:ma_node_output_bus
pPrev	../ext/miniaudio.h	/^    ma_sound_inlined* pPrev;$/;"	E	struct:ma_sound_inlined
pR1	../ext/miniaudio.h	/^    ma_biquad_coefficient* pR1;$/;"	E
pR2	../ext/miniaudio.h	/^    ma_biquad_coefficient* pR2;$/;"	E
pRenderClient	../ext/miniaudio.h	/^    ma_IAudioRenderClient* pRenderClient;$/;"	E	struct:ma_completion_handler_uwp
pResourceManager	../ext/miniaudio.h	/^    ma_resource_manager* pResourceManager;      \/* A pointer to the resource manager that owns /;"	E	struct:ma_resource_manager_data_stream
pResourceManager	../ext/miniaudio.h	/^    ma_resource_manager* pResourceManager;      \/* Can be null in which case a resource manager/;"	E	struct:ma_sound_inlined
pResourceManagerDataSource	../ext/miniaudio.h	/^    ma_resource_manager_data_source* pResourceManagerDataSource;$/;"	E	struct:ma_sound
pResourceManagerVFS	../ext/miniaudio.h	/^    ma_vfs* pResourceManagerVFS;                \/* A pointer to a pre-allocated VFS object to u/;"	E	struct:ma_sound_inlined
pRootDataBufferNode	../ext/miniaudio.h	/^    ma_resource_manager_data_buffer_node* pRootDataBufferNode;      \/* The root buffer in the b/;"	E	struct:ma_resource_manager
pShuffleTable	../ext/miniaudio.h	/^    ma_uint8* pShuffleTable;    \/* Indexed by output channel index. *\/$/;"	E	struct:ma_resampler_config
pSlots	../ext/miniaudio.h	/^    ma_uint32* pSlots;                  \/* 32 bits for reference counting for ABA mitigation. */;"	E	struct:ma_resampler_config
pTail	../ext/miniaudio.h	/^    MA_ATOMIC(MA_SIZEOF_PTR, ma_paged_audio_buffer_page*) pTail;    \/* Never null. Initially se/;"	E	struct:ma_paged_audio_buffer_page
pUnkOuter	../ext/miniaudio.h	/^typedef HRESULT (WINAPI   * ma_DirectSoundCaptureCreateProc)    (const GUID* pcGuidDevice, ma_ID/;"	t	struct:ma_IDirectSoundNotify
pUnkOuter	../ext/miniaudio.h	/^typedef HRESULT (WINAPI   * ma_DirectSoundCreateProc)           (const GUID* pcGuidDevice, ma_ID/;"	t	struct:ma_IDirectSoundNotify
pUserData	../ext/miniaudio.h	/^    void* pUserData;                            \/* Application defined data. *\/$/;"	E	struct:ma_device
pUserData	../ext/miniaudio.h	/^    void* pUserData;$/;"	E
pUserData	../ext/miniaudio.h	/^    void* pUserData;$/;"	E	struct:ma_IDirectSoundNotify
pUserData	../ext/miniaudio.h	/^    void* pUserData;$/;"	E	struct:ma_context_config
pUserData	../ext/miniaudio.h	/^    void* pUserData;$/;"	E	struct:ma_decoder
pUserData	../ext/miniaudio.h	/^    void* pUserData;$/;"	E	struct:ma_device_config
pUserData	../ext/miniaudio.h	/^    void* pUserData;$/;"	E	struct:ma_encoder
pUserData	../ext/miniaudio.h	/^typedef ma_bool32 (* ma_enum_devices_callback_proc)(ma_context* pContext, ma_device_type deviceT/;"	t	struct:ma_device_config
pVFS	../ext/miniaudio.h	/^    ma_vfs* pVFS;                   \/* Can be NULL in which case defaults will be used. *\/$/;"	E
pageFrameCount	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) pageFrameCount[2];  \/* The number of valid PCM frames in each page./;"	E	struct:ma_resource_manager_data_stream
pan	../ext/miniaudio.h	/^    float pan;  \/* -1..1 where 0 is no pan, -1 is left side, +1 is right side. Defaults to 0. */;"	E
pan	../ext/miniaudio.h	/^    float pan;$/;"	E
panner	../ext/miniaudio.h	/^    ma_panner panner;$/;"	E
peak	../ext/miniaudio.h	/^    ma_peak2 peak;$/;"	E
peak	../ext/miniaudio.h	/^    ma_peak_config peak;$/;"	E
performanceProfile	../ext/miniaudio.h	/^    ma_performance_profile performanceProfile;$/;"	E	struct:ma_completion_handler_uwp
performanceProfile	../ext/miniaudio.h	/^    ma_performance_profile performanceProfile;$/;"	E	struct:ma_device_config
periodCount	../ext/miniaudio.h	/^    ma_uint32 periodCount;$/;"	E	struct:ma_device_config
periodSizeInFrames	../ext/miniaudio.h	/^    ma_uint32 periodSizeInFrames;               \/* If set to something other than 0, updates wi/;"	E	struct:ma_sound_inlined
periodSizeInFrames	../ext/miniaudio.h	/^    ma_uint32 periodSizeInFrames;$/;"	E	struct:ma_device_config
periodSizeInFramesIn	../ext/miniaudio.h	/^    ma_uint32 periodSizeInFramesIn;$/;"	E	struct:ma_completion_handler_uwp
periodSizeInFramesOut	../ext/miniaudio.h	/^    ma_uint32 periodSizeInFramesOut;$/;"	E	struct:ma_completion_handler_uwp
periodSizeInMilliseconds	../ext/miniaudio.h	/^    ma_uint32 periodSizeInMilliseconds;         \/* Used if periodSizeInFrames is unset. *\/$/;"	E	struct:ma_sound_inlined
periodSizeInMilliseconds	../ext/miniaudio.h	/^    ma_uint32 periodSizeInMilliseconds;$/;"	E	struct:ma_device_config
periodSizeInMillisecondsIn	../ext/miniaudio.h	/^    ma_uint32 periodSizeInMillisecondsIn;$/;"	E	struct:ma_completion_handler_uwp
periods	../ext/miniaudio.h	/^    ma_uint32 periods;$/;"	E	struct:ma_device_config
periodsIn	../ext/miniaudio.h	/^    ma_uint32 periodsIn;$/;"	E	struct:ma_completion_handler_uwp
periodsOut	../ext/miniaudio.h	/^    ma_uint32 periodsOut;$/;"	E	struct:ma_completion_handler_uwp
phkResult	../ext/miniaudio.h	/^typedef LONG (WINAPI * MA_PFN_RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM/;"	t
pid	../ext/miniaudio.h	/^    DWORD pid;$/;"	E
pinnedListenerIndex	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) pinnedListenerIndex;        \/* The index of the listener this node /;"	E
pinnedListenerIndex	../ext/miniaudio.h	/^    ma_uint8 pinnedListenerIndex;       \/* The index of the listener this node should always us/;"	E
pitch	../ext/miniaudio.h	/^    MA_ATOMIC(4, float) pitch;$/;"	E
playback	../ext/miniaudio.h	/^    } playback;$/;"	E	struct:ma_device
playback	../ext/miniaudio.h	/^    } playback;$/;"	E	struct:ma_device_config
position	../ext/miniaudio.h	/^    ma_vec3f position;  \/* The absolute position of the listener. *\/$/;"	E
position	../ext/miniaudio.h	/^    ma_vec3f position;$/;"	E
positioning	../ext/miniaudio.h	/^    ma_positioning positioning;$/;"	E
ppChannelWeights	../ext/miniaudio.h	/^    float** ppChannelWeights;  \/* [in][out]. Only used when mixingMode is set to ma_channel_mix/;"	E	struct:ma_resampler_config
ppCustomBackendVTables	../ext/miniaudio.h	/^    ma_decoding_backend_vtable** ppCustomBackendVTables;$/;"	E
ppCustomDecodingBackendVTables	../ext/miniaudio.h	/^    ma_decoding_backend_vtable** ppCustomDecodingBackendVTables;$/;"	E
ppWeights	../ext/miniaudio.h	/^    float** ppWeights;  \/* [in][out]. Only used when mixingMode is set to ma_channel_mix_mode_c/;"	E	struct:ma_resampler_config
ppv	../ext/miniaudio.h	/^typedef HRESULT (WINAPI * MA_PFN_CoCreateInstance)(REFCLSID rclsid, LPUNKNOWN pUnkOuter, DWORD d/;"	t
preferredFormat	../ext/miniaudio.h	/^    ma_format preferredFormat;$/;"	E
pulse	../ext/miniaudio.h	/^    } pulse;$/;"	E	struct:ma_context_config
pulse	../ext/miniaudio.h	/^    } pulse;$/;"	E	struct:ma_device_config
pv	../ext/miniaudio.h	/^typedef void    (WINAPI * MA_PFN_CoTaskMemFree)(LPVOID pv);$/;"	t
pvar	../ext/miniaudio.h	/^typedef HRESULT (WINAPI * MA_PFN_PropVariantClear)(PROPVARIANT *pvar);$/;"	t
q	../ext/miniaudio.h	/^    double q;$/;"	E
rangeBegInFrames	../ext/miniaudio.h	/^    ma_uint64 rangeBegInFrames;$/;"	E	struct:ma_device
rangeBegInPCMFrames	../ext/miniaudio.h	/^    ma_uint64 rangeBegInPCMFrames;$/;"	E
rangeEndInFrames	../ext/miniaudio.h	/^    ma_uint64 rangeEndInFrames;             \/* Set to -1 for unranged (default). *\/$/;"	E	struct:ma_device
rangeEndInPCMFrames	../ext/miniaudio.h	/^    ma_uint64 rangeEndInPCMFrames;$/;"	E
rb	../ext/miniaudio.h	/^    ma_pcm_rb rb;$/;"	E	struct:ma_resampler_config
rb	../ext/miniaudio.h	/^    ma_rb rb;$/;"	E	struct:ma_resampler_config
readPointerInPCMFrames	../ext/miniaudio.h	/^    ma_uint64 readPointerInPCMFrames;      \/* In output sample rate. Used for keeping track of /;"	E	struct:ma_decoder
ref	../ext/miniaudio.h	/^    ma_audio_buffer_ref ref;$/;"	E	struct:ma_device
refCount	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_uint32) refCount;                       \/* Reference count for some thread-/;"	E	struct:ma_node_output_bus
refCount	../ext/miniaudio.h	/^    ma_uint32 refCount;$/;"	E	struct:ma_resource_manager_data_buffer_node
relativeCursor	../ext/miniaudio.h	/^    ma_uint32 relativeCursor;                   \/* The playback cursor, relative to the current/;"	E	struct:ma_resource_manager_data_stream
relativeCursor	../ext/miniaudio.h	/^    ma_uint64 relativeCursor;                       \/* Relative to the current page. *\/$/;"	E	struct:ma_paged_audio_buffer_page
resampler	../ext/miniaudio.h	/^    ma_linear_resampler resampler;                      \/* For pitch shift. *\/$/;"	E
resampler	../ext/miniaudio.h	/^    ma_resampler resampler;$/;"	E	struct:ma_resampler_config
resampling	../ext/miniaudio.h	/^    ma_resampler_config resampling;$/;"	E
resampling	../ext/miniaudio.h	/^    ma_resampler_config resampling;$/;"	E	struct:ma_device_config
resampling	../ext/miniaudio.h	/^    ma_resampler_config resampling;$/;"	E	struct:ma_resampler_config
resampling	../ext/miniaudio.h	/^    } resampling;$/;"	E	struct:ma_device
result	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_result) result;                 \/* Result from asynchronous loading. When l/;"	E	struct:ma_resource_manager_data_buffer_node
result	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_result) result;             \/* Result from asynchronous loading. When loadi/;"	E	struct:ma_resource_manager_data_stream
rolloff	../ext/miniaudio.h	/^    float rolloff;$/;"	E
sampleRate	../ext/miniaudio.h	/^    ma_uint32 sampleRate;                               \/* The sample rate of the input data. F/;"	E
sampleRate	../ext/miniaudio.h	/^    ma_uint32 sampleRate;                       \/* The sample rate. When set to 0 will use the /;"	E	struct:ma_sound_inlined
sampleRate	../ext/miniaudio.h	/^    ma_uint32 sampleRate;               \/* Only used when the type is set to ma_engine_node_typ/;"	E
sampleRate	../ext/miniaudio.h	/^    ma_uint32 sampleRate;  \/* Set to 0 to use the stream's internal sample rate. *\/$/;"	E
sampleRate	../ext/miniaudio.h	/^    ma_uint32 sampleRate;$/;"	E
sampleRate	../ext/miniaudio.h	/^    ma_uint32 sampleRate;$/;"	E	struct:ma_device
sampleRate	../ext/miniaudio.h	/^    ma_uint32 sampleRate;$/;"	E	struct:ma_device_config
sampleRate	../ext/miniaudio.h	/^    ma_uint32 sampleRate;$/;"	E	struct:ma_encoder
sampleRateIn	../ext/miniaudio.h	/^    ma_uint32 sampleRateIn;$/;"	E
sampleRateIn	../ext/miniaudio.h	/^    ma_uint32 sampleRateIn;$/;"	E	struct:ma_completion_handler_uwp
sampleRateIn	../ext/miniaudio.h	/^    ma_uint32 sampleRateIn;$/;"	E	struct:ma_resampler_config
sampleRateOut	../ext/miniaudio.h	/^    ma_uint32 sampleRateOut;$/;"	E
sampleRateOut	../ext/miniaudio.h	/^    ma_uint32 sampleRateOut;$/;"	E	struct:ma_completion_handler_uwp
sampleRateOut	../ext/miniaudio.h	/^    ma_uint32 sampleRateOut;$/;"	E	struct:ma_resampler_config
seed	../ext/miniaudio.h	/^    ma_int32 seed;$/;"	E	struct:ma_encoder
seekCounter	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_bool32) seekCounter;        \/* When 0, no seeking is being performed. When /;"	E	struct:ma_resource_manager_data_stream
seekPointCount	../ext/miniaudio.h	/^    ma_uint32 seekPointCount;   \/* Set to > 0 to generate a seektable if the decoding backend s/;"	E
seekPointCount	../ext/miniaudio.h	/^    ma_uint32 seekPointCount;   \/* When set to > 0, specifies the number of seek points to use /;"	E
seekTarget	../ext/miniaudio.h	/^    MA_ATOMIC(8, ma_uint64) seekTarget; \/* The PCM frame index to seek to in the mixing thread./;"	E	struct:ma_sound
sem	../ext/miniaudio.h	/^    ma_semaphore sem;               \/* Only used when MA_JOB_QUEUE_FLAG_NON_BLOCKING is unset. /;"	E	struct:ma_job
shareMode	../ext/miniaudio.h	/^    ma_share_mode shareMode;$/;"	E	struct:ma_completion_handler_uwp
shareMode	../ext/miniaudio.h	/^    ma_share_mode shareMode;$/;"	E	struct:ma_device_config
shelfSlope	../ext/miniaudio.h	/^    double shelfSlope;$/;"	E
signalled	../ext/miniaudio.h	/^    ma_bool32 signalled;$/;"	E	struct:ma_resampler_config
sizeInBytes	../ext/miniaudio.h	/^    ma_uint64 sizeInBytes;$/;"	E	struct:ma_paged_audio_buffer_page
sizeInBytes	../ext/miniaudio.h	/^    size_t sizeInBytes;$/;"	E
sizeInFrames	../ext/miniaudio.h	/^    ma_uint64 sizeInFrames;$/;"	E	struct:ma_device
sizeInFrames	../ext/miniaudio.h	/^    ma_uint64 sizeInFrames;$/;"	E	struct:ma_paged_audio_buffer_page
slotsOffset	../ext/miniaudio.h	/^    size_t slotsOffset;$/;"	E
smoothTimeInFrames	../ext/miniaudio.h	/^    ma_uint32 smoothTimeInFrames;$/;"	E
sound	../ext/miniaudio.h	/^    ma_sound sound;$/;"	E	struct:ma_sound_inlined
spatializer	../ext/miniaudio.h	/^    ma_spatializer spatializer;$/;"	E
speedOfSound	../ext/miniaudio.h	/^    float speedOfSound;$/;"	E
startEvent	../ext/miniaudio.h	/^    ma_event startEvent;$/;"	E	struct:ma_device
startStopLock	../ext/miniaudio.h	/^    ma_mutex startStopLock;$/;"	E	struct:ma_device
state	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_device_state) state;        \/* The state of the device is variable and can /;"	E	struct:ma_device
state	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_node_state) state;      \/* When set to stopped, nothing will be read, regar/;"	E	struct:ma_node_base
state	../ext/miniaudio.h	/^    ma_int32 state;$/;"	E
state	../ext/miniaudio.h	/^    } state;    \/* State for stock resamplers so we can avoid a malloc. For stock resamplers, p/;"	E	struct:ma_resampler_config
state	../ext/miniaudio.h	/^    } state;$/;"	E	struct:ma_encoder
stateTimes	../ext/miniaudio.h	/^    MA_ATOMIC(8, ma_uint64) stateTimes[2];  \/* Indexed by ma_node_state. Specifies the time bas/;"	E	struct:ma_node_base
stopCallback	../ext/miniaudio.h	/^    ma_stop_proc stopCallback;$/;"	E	struct:ma_device_config
stopEvent	../ext/miniaudio.h	/^    ma_event stopEvent;$/;"	E	struct:ma_device
subbufferCount	../ext/miniaudio.h	/^    ma_uint32 subbufferCount;$/;"	E	struct:ma_resampler_config
subbufferSizeInBytes	../ext/miniaudio.h	/^    ma_uint32 subbufferSizeInBytes;$/;"	E	struct:ma_resampler_config
subbufferStrideInBytes	../ext/miniaudio.h	/^    ma_uint32 subbufferStrideInBytes;$/;"	E	struct:ma_resampler_config
szCSDVersion	../ext/miniaudio.h	/^    WCHAR szCSDVersion[128];$/;"	E
szPname	../ext/miniaudio.h	/^    CHAR szPname[MAXPNAMELEN];$/;"	E	struct:ma_IDirectSoundNotify
t	../ext/miniaudio.h	/^    ma_uint32 t;$/;"	E
tail	../ext/miniaudio.h	/^    MA_ATOMIC(8, ma_uint64) tail;   \/* The last item in the list. Required for appending to the/;"	E	struct:ma_job
terminated	../ext/miniaudio.h	/^    ma_bool32 terminated;$/;"	E	struct:ma_IDirectSoundNotify
thread	../ext/miniaudio.h	/^    ma_thread thread;$/;"	E	struct:ma_device
thread	../ext/miniaudio.h	/^    ma_thread thread;$/;"	E	struct:ma_job
threadPriority	../ext/miniaudio.h	/^    ma_thread_priority threadPriority;$/;"	E	struct:ma_context_config
threadStackSize	../ext/miniaudio.h	/^    size_t threadStackSize;$/;"	E	struct:ma_context_config
time	../ext/miniaudio.h	/^    double time;$/;"	E	struct:ma_encoder
toc	../ext/miniaudio.h	/^    } toc;  \/* 8 bytes. We encode the job code into the slot allocation data to save space. *\/$/;"	E	struct:ma_job
totalLengthInPCMFrames	../ext/miniaudio.h	/^    ma_uint64 totalLengthInPCMFrames;           \/* This is calculated when first loaded by the /;"	E	struct:ma_resource_manager_data_stream
type	../ext/miniaudio.h	/^    MA_ATOMIC(4, ma_resource_manager_data_supply_type) type;    \/* Read and written from differ/;"	E
type	../ext/miniaudio.h	/^    ma_device_notification_type type;$/;"	E	struct:ma_job
type	../ext/miniaudio.h	/^    ma_device_type type;$/;"	E	struct:ma_device
type	../ext/miniaudio.h	/^    ma_engine_node_type type;$/;"	E
type	../ext/miniaudio.h	/^    ma_noise_type type;$/;"	E	struct:ma_encoder
type	../ext/miniaudio.h	/^    ma_waveform_type type;$/;"	E	struct:ma_encoder
union	../ext/miniaudio.h	/^    };$/;"	E	struct:ma_device
usingAudioClient3	../ext/miniaudio.h	/^    ma_bool32 usingAudioClient3;$/;"	E	struct:ma_completion_handler_uwp
vDriverVersion	../ext/miniaudio.h	/^    MMVERSION vDriverVersion;$/;"	E	struct:ma_IDirectSoundNotify
value	../ext/miniaudio.h	/^    int value;$/;"	E
value	../ext/miniaudio.h	/^    ma_uint32 value;$/;"	E
velocity	../ext/miniaudio.h	/^    ma_vec3f velocity;  \/* For doppler effect. *\/$/;"	E
velocity	../ext/miniaudio.h	/^    ma_vec3f velocity;$/;"	E
void	../ext/miniaudio.h	/^    void      (* onUninit                     )(void* pUserData, ma_resampling_backend* pBackend/;"	E
void	../ext/miniaudio.h	/^    void      (* onUninit    )(void* pUserData, ma_data_source* pBackend, const ma_allocation_ca/;"	E
void	../ext/miniaudio.h	/^    void  (* onFree)(void* p, void* pUserData);$/;"	E
void	../ext/miniaudio.h	/^    void (* onProcess)(ma_node* pNode, const float** ppFramesIn, ma_uint32* pFrameCountIn, float/;"	E
void	../ext/miniaudio.h	/^    void (* onSignal)(ma_async_notification* pNotification);$/;"	E	struct:ma_resampler_config
void	../ext/miniaudio.h	/^    void* (* onMalloc)(size_t sz, void* pUserData);$/;"	E
void	../ext/miniaudio.h	/^    void* (* onRealloc)(void* p, size_t sz, void* pUserData);$/;"	E
void	../ext/miniaudio.h	/^typedef HWND (WINAPI * MA_PFN_GetDesktopWindow)(void);$/;"	t
void	../ext/miniaudio.h	/^typedef HWND (WINAPI * MA_PFN_GetForegroundWindow)(void);$/;"	t
void	../ext/miniaudio.h	/^typedef UINT     (WINAPI * MA_PFN_waveInGetNumDevs)(void);$/;"	t	struct:ma_IDirectSoundNotify
void	../ext/miniaudio.h	/^typedef UINT     (WINAPI * MA_PFN_waveOutGetNumDevs)(void);$/;"	t	struct:ma_IDirectSoundNotify
void	../ext/miniaudio.h	/^typedef void    (WINAPI * MA_PFN_CoUninitialize)(void);$/;"	t
void	../ext/miniaudio.h	/^typedef void (* ma_proc)(void);$/;"	t
volume	../ext/miniaudio.h	/^    MA_ATOMIC(4, float) volume;                             \/* Linear. *\/$/;"	E	struct:ma_node_output_bus
volumeBeg	../ext/miniaudio.h	/^    float volumeBeg;            \/* If volumeBeg and volumeEnd is equal to 1, no fading happens /;"	E
volumeEnd	../ext/miniaudio.h	/^    float volumeEnd;$/;"	E
vtable	../ext/miniaudio.h	/^    const ma_data_source_vtable* vtable;$/;"	E	struct:ma_device
vtable	../ext/miniaudio.h	/^    const ma_node_vtable* vtable;       \/* Should never be null. Initialization of the node wil/;"	E
vtable	../ext/miniaudio.h	/^    const ma_node_vtable* vtable;$/;"	E	struct:ma_node_base
wChannels	../ext/miniaudio.h	/^    WORD wChannels;$/;"	E	struct:ma_IDirectSoundNotify
wMid	../ext/miniaudio.h	/^    WORD wMid;$/;"	E	struct:ma_IDirectSoundNotify
wPid	../ext/miniaudio.h	/^    WORD wPid;$/;"	E	struct:ma_IDirectSoundNotify
wProductType	../ext/miniaudio.h	/^    BYTE  wProductType;$/;"	E
wReserved	../ext/miniaudio.h	/^    BYTE  wReserved;$/;"	E
wReserved1	../ext/miniaudio.h	/^    WORD wReserved1;$/;"	E	struct:ma_IDirectSoundNotify
wServicePackMajor	../ext/miniaudio.h	/^    WORD  wServicePackMajor;$/;"	E
wServicePackMinor	../ext/miniaudio.h	/^    WORD  wServicePackMinor;$/;"	E
wSuiteMask	../ext/miniaudio.h	/^    WORD  wSuiteMask;$/;"	E
wakeupEvent	../ext/miniaudio.h	/^    ma_event wakeupEvent;$/;"	E	struct:ma_device
wasapi	../ext/miniaudio.h	/^    wchar_t wasapi[64];             \/* WASAPI uses a wchar_t string for identification. *\/$/;"	t
wasapi	../ext/miniaudio.h	/^    } wasapi;$/;"	E	struct:ma_device_config
wchar_t	../ext/miniaudio.h	/^typedef ma_uint16 wchar_t;$/;"	t
weights	../ext/miniaudio.h	/^    } weights;  \/* [in][out] *\/$/;"	E	struct:ma_resampler_config
wet	../ext/miniaudio.h	/^    float wet;                  \/* 0..1. Default = 1. *\/$/;"	E
workResult	../ext/miniaudio.h	/^    ma_result workResult;                       \/* This is set by the worker thread after it's /;"	E	struct:ma_device
worldUp	../ext/miniaudio.h	/^    ma_vec3f worldUp;$/;"	E
x	../ext/miniaudio.h	/^    float x;$/;"	E
x0	../ext/miniaudio.h	/^    } x0; \/* The previous input frame. *\/$/;"	E
x1	../ext/miniaudio.h	/^    } x1; \/* The next input frame. *\/$/;"	E
y	../ext/miniaudio.h	/^    float y;$/;"	E
z	../ext/miniaudio.h	/^    float z;$/;"	E
